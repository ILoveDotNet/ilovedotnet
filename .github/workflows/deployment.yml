name: build and test and deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - main
  schedule:
      # Runs every sunday 05.00 PM UTC (22.30 PM IST Equivalent). Pattern - "*(0-59 minute) *(0-23 hour) *(1-31 day of the month) *(1-12 month) *(0-6 day of the week)"
      - cron: '0 17 * * 0'

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v3.4.0

      # Install .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
          
      # Install dotnet wasm buildtools workload
      - name: Install .NET WASM Build Tools
        run: dotnet workload install wasm-tools

      # Install Node JS
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'
      - run: npm install
        working-directory: ./CommonComponents
        
      # Restore Dependencies
      - name: Restore dependencies
        run: dotnet restore
        
      # Check Vulnerable Nuget Packages
      - name: Checking Vulnerable Nuget Packages
        run: |
          dotnet list package --vulnerable --include-transitive --format json 2>&1 | tee vulnerable-nuget.log
          echo "Analyze dotnet vulnerable nuget package command log output..."
          # Check for vulnerabilities in topLevelPackages and transitivePackages arrays
          # Check if the "projects" node exists in the JSON
          if jq -e 'has("projects")' vulnerable-nuget.log >/dev/null; then
              # Check if frameworks exist and contain either topLevelPackages or transitivePackages
              if jq -e '.projects[] | select(has("frameworks") and (.frameworks[] | has("topLevelPackages") or has("transitivePackages")))' vulnerable-nuget.log >/dev/null; then
                  # Check for vulnerabilities with severity "Critical" in topLevelPackages and transitivePackages arrays
                  if jq -e '.projects[] |
                             .frameworks[].topLevelPackages[]?.vulnerabilities[]? | select(.severity == "Critical") or . / 
                             .frameworks[].transitivePackages[]?.vulnerabilities[]? | select(.severity == "Critical")' 
                             vulnerable-nuget.log >/dev/null; then
                      echo "Vulnerable Nuget Packages with severity Critical is found in vulnerable-nuget.log"
                      exit 1
                  else
                      exit 0
                  fi
              else
                  echo "No frameworks node is found in vulnerable-nuget.log"
                  echo "No Vulnerable Nuget Packages with severity Critical is found in vulnerable-nuget.log"
                  exit 0
              fi
          else
              echo "No projects node is found in vulnerable-nuget.log"
              echo "No Vulnerable Nuget Packages with severity Critical is found in vulnerable-nuget.log"
              exit 0
          fi
        
      # Check Outdated Nuget Packages
      - name: Checking Outdated Nuget Packages
        run: dotnet list package --outdated --include-transitive --format json
        
       # Check Deprecated Nuget Packages
      - name: Checking Deprecated Nuget Packages
        run: dotnet list package --deprecated --include-transitive --format json
        
      # Build Project
      - name: Build Solution
        run: dotnet build ./ILoveDotNet.sln --configuration Release --no-restore
      
      # Install dotnet report generator
      - name: Install .NET Report Generator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
        
      # Run Tests
      - name: Run Test
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
      # Generate Test Report
      - name: Generate Test Report
        run: reportgenerator -reports:./**/Coverage.cobertura.xml -targetdir:"./Test/Report" -reporttypes:Html
      
      # Upload Test Report
      - name: Upload Test Result
        uses: actions/upload-artifact@v3
        with:
          name: ilovedotnet-test-report
          path: ./Test/Report
          retention-days: 3
      
      # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
  
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' && github.event_name != 'pull_request' }}
    steps:
      # Checkout the code
      - uses: actions/checkout@v3.4.0

      # Install .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Install dotnet wasm buildtools workload
      - name: Install .NET WASM Build Tools
        run: dotnet workload install wasm-tools
        
      # Install Node JS
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'
      - run: npm install
        working-directory: ./CommonComponents

      # Restore Dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build Project
      - name: Build
        run: dotnet build ./ILoveDotNet.sln --configuration Release --no-restore
        
      # Publishes Blazor project to the release-folder
      - name: Publish .NET Core Project
        run: dotnet publish Web/Web.csproj -c:Release -p:GHPages=true --no-restore -o dist/Web --nologo
        
      - name: Commit wwwroot to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          BRANCH: gh-pages
          FOLDER: dist/Web/wwwroot
