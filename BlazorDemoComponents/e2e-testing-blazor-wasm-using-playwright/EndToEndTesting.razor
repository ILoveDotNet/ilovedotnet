@page "/blogs/e2e-testing-blazor-wasm-using-playwright"
@using BlazorDemoComponents
@inherits BasePage

<Content FileName=@nameof(EndToEndTesting) UseNewTableOfContentsMenu=true>
    <ContentBody>
        <What>
            <p>
                In this blog post, we will learn how to perform end-to-end testing of a Blazor WebAssembly application
                using Playwright. Playwright is a open sources tool that enables reliable end-to-end testing for modern
                web apps with a single API. It is developed by Microsoft and is a great tool for end-to-end testing of
                web applications.
            </p>
        </What>

        <Why>
            <p>
                End to end testing is essential open to be added to test suite because of the following reasons:
            </p>

            <ol>
                <li><strong>User Workflow Validation:</strong> Simulates real user interactions across the application,
                    ensuring workflows function as expected.</li>
                <li><strong>Integration Assurance:</strong> Verifies seamless communication between different components
                    like APIs, databases, and UIs.</li>
                <li><strong>Regression Prevention:</strong> Detects bugs caused by code changes in interconnected
                    systems.</li>
                <li><strong>Cross-Environment Testing:</strong> Confirms consistent behavior across multiple deployment
                    environments.</li>
                <li><strong>Improved User Experience:</strong> Ensures the application meets user expectations in
                    real-world scenarios.</li>
            </ol>

            <p>
                Playwright integrates with .NET via NUnit or MSTest, offering advanced features like element
                locators, assertions, and codegen for recording tests.
            </p>
        </Why>

        <How>
            <p>
                The first step is to create e2e test project in a separate solution to avoid conflicts with existing unit and integration tests.
            </p>

            <ol>
                <li>
                    <strong>Create Project:</strong>
                    <ul>
                        <li>Use Visual Studio to create a Playwright NUnit project.</li>
                        <li>Place the project in a separate directory (e.g., e2e) to isolate end-to-end tests.</li>
                    </ul>
                </li>
                <li>
                    <strong>Project Template:</strong>
                    <ul>
                        <li>Template includes a <code>PageTest</code> base class with a <code>Page</code> object for
                            browser interaction.</li>
                        <li>Example test: Navigate to I Love .NET's site, assert the title.</li>
                    </ul>
                </li>
                <li>
                    <strong>Assertions:</strong>
                    <ul>
                        <li>Use <code>Expect</code> for verifying elements, locators for interactions, and async waits
                            for dynamic page updates.</li>
                    </ul>
                </li>
            </ol>
        </How>

        <Summary>

        </Summary>
    </ContentBody>
</Content>