@page "/blogs/e2e-testing-blazor-wasm-using-playwright"
@using BlazorDemoComponents
@inherits BasePage

<Content FileName=@nameof(EndToEndTesting) UseNewTableOfContentsMenu=true>
    <ContentBody>
        <What>
            <p>
                In this blog post, we will learn how to perform <ContentHighlight>end-to-end testing</ContentHighlight>
                of a <ContentHighlight>Blazor WebAssembly</ContentHighlight> application using <ContentHighlight>Playwright</ContentHighlight>. Playwright is
                a open sources tool that enables reliable end-to-end testing for modern web apps with a single API. 
                It is developed by Microsoft and is a great tool for end-to-end testing of web applications.
            </p>

            <p>
                <strong>
                    <ContentHighlight>Note that in this example we are using Blazor WASM, but the same testing principle can be applied to
                    any ASP.NET projects like MVC, RazorPages, etc.</ContentHighlight>
                </strong>
            </p>
        </What>

        <Why>
            <p>
                End to end testing is essential one to be added to test suite because of the following reasons:
            </p>

            <ol>
                <li><strong><ContentHighlight>User Workflow Validation:</ContentHighlight></strong> Simulates real user interactions across the application,
                    ensuring workflows function as expected.</li>
                <li><strong><ContentHighlight>Integration Assurance:</ContentHighlight></strong> Verifies seamless communication between different components
                    like APIs, databases, and UIs.</li>
                <li><strong><ContentHighlight>Regression Prevention:</ContentHighlight></strong> Detects bugs caused by code changes in interconnected
                    systems.</li>
                <li><strong><ContentHighlight>Cross-Environment Testing:</ContentHighlight></strong> Confirms consistent behavior across multiple deployment
                    environments.</li>
                <li><strong><ContentHighlight>Improved User Experience:</ContentHighlight></strong> Ensures the application meets user expectations in
                    real-world scenarios.</li>
            </ol>

            <p>
                Playwright integrates with <ContentHighlight>.NET via NUnit or MSTest</ContentHighlight>, offering advanced features like element
                locators, assertions, and codegen for recording tests.
            </p>
        </Why>

        <How>
            <ol>
                <li>
                    <p>
                        The first step is to create e2e test project in a separate solution to avoid conflicts with
                        existing unit and integration tests.
                        Create a new solution and add a new project of type <ContentHighlight>NUnit Test Project (.NET Core)</ContentHighlight> using the
                        following cli command.
                    </p>

                    <GithubGistSnippet Title="Create NUnit Playwright project" UserId="fingers10"
                        FileName="a2d23ed2148d6c2d04406932f440bf32"></GithubGistSnippet>

                    <p>
                        This will create sln and csproj as shown below.
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/E2E Solution and Project Structure.png"
                            alt="E2E Solution and Project Structure" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    Now updated all the nuget packages inside test project.
                </li>
                <li>
                    <p>
                        Default Unit Test includes a <ContentHighlight>PageTest base class</ContentHighlight> with a <ContentHighlight>Page</ContentHighlight> object
                        for browser interaction. I have updated the test to Navigate to I Love .NET's site, assert the title as shown below.
                    </p>

                    <GithubGistSnippet Title="Home page E2E Test" UserId="fingers10"
                        FileName="dfd1e331345bd61bac3bb0079223bd2f"></GithubGistSnippet>
                </li>
                <li>
                    <p>
                        Now run the Project and run the test. I'm running this in mac for first time and noticed the
                        below error.
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Playwright First Run Error.png"
                            alt="Playwright First Run Error" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        I resolved the above error by installing powershell in mac as shown below
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Install PowerShell in Mac.png"
                            alt="Install PowerShell in Mac" class="[ w-full ]" />
                    </figure>

                    <p>
                        <strong>Note:</strong> You need to do <ContentHighlight>playwright.ps1 install
                        </ContentHighlight> everytime you update the nuget packages in this test project.
                    </p>
                </li>
                <li>
                    <p>
                        Now we need to run <ContentHighlight>/bin/Debug/net9.0/playwright.ps1 install</ContentHighlight>
                        as
                        shown below.
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Install Playwright Power Shell Script.png"
                            alt="Install Playwright Power Shell Script" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        Now run the test and it should pass as shown below.
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/First E2E Test Run.png"
                            alt="First E2E Test Run" class="[ w-full ]" />
                    </figure>
                </li>
            </ol>

            <h4>Recording a test to create it automatically</h4>

            <p>
                Playwright provides a feature to record the test and generate the code for it. This is very useful to
                create the test quickly.
            </p>

            <ol>
                <li>
                    <p>
                        To record the test, run the following command <ContentHighlight>playwright.ps1 codegen
                        </ContentHighlight> as shown below.
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Generate code with Playwright using Power Shell Script.png"
                            alt="Generate code with Playwright using Power Shell Script" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        This will now open the browser and code generation window. Make sure to select
                        <ContentHighlight>NUnit</ContentHighlight> in the window as shown below.
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Playwright Recorder and Code Generator Windows.png"
                            alt="Playwright Recorder and Code Generator Windows" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        you can now browse to your application url and perform the actions you want using the
                        highlighted <ContentHighlight>toolbar
                        </ContentHighlight> in the above browser to record. Once you are done, you can stop the
                        recording and it will generate the code for you as shown below.
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Generating Code in Recorder.png"
                            alt="Generating Code in Recorder" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        Now you can copy the code and paste it in your test project and run the test.
                        <strong>Note</strong> that sometimes you might need to adjust the code to make it work.
                    </p>

                    <figure>
                        <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Auto Generated Test Passing.png"
                            alt="Auto Generated Test Passing" class="[ w-full ]" />
                    </figure>
                </li>
            </ol>

            <h4>Configuring Base URL from Run Settings</h4>

            <p>
                Hardcoding base URLs in tests limits flexibility, especially when testing across multiple environments
                like QA and staging. To address this, create a BaseTest class that dynamically manages the base URL
                using an environment variable, with an optional fallback or exception if the variable is unset.
                Eliminate hardcoded values by adding a .runsettings file for centralized configuration.a This way we can
                avoid code changes for URL for different environments.
            </p>

            <GithubGistSnippet Title="Run Settings to configure Base URL for Playwright E2E Tests" UserId="fingers10"
                FileName="7d75043bde7c87639bcfebfd9d15aecc"></GithubGistSnippet>

            <p>
                Update test classes to inherit from BaseTest and reference the BaseUrl property for easy maintenance.
                This setup enables seamless testing across different environments without code changes. Debugging is
                simplified with Visual Studio's configuration options, like the auto-detected .runsettings file. This
                approach enhances scalability and efficiency in end-to-end testing workflows.
            </p>

            <GithubGistSnippet Title="Blazor WASM PlayWright E2E Test with Base Test" UserId="fingers10"
                FileName="a159d6d38ade2aa31cbb05633a9dc632"></GithubGistSnippet>

            <p>
                <strong>Note</strong> that you need to run test with <ContentHighlight CssClasses="[ break-all ]">dotnet
                    test EndToEndTests.csproj --settings .runsettings</ContentHighlight> after making above changes.
            </p>

            <h4>Debugging and Screenshots</h4>

            <p>
                Troubleshooting Playwright tests is essential when logic issues or test failures occur. Failed tests
                display
                valuable information in the test output, including expected vs. actual results and locator details.
                Debugging helps pinpoint issues, though locators may not always provide meaningful insights.
            </p>

            <p>
                Enhance troubleshooting by taking screenshots during test execution using await <ContentHighlight
                    CssClasses="[ break-all ]">
                    Page.ScreenshotAsync()</ContentHighlight>. This captures the app's state at specific points, aiding
                in diagnosing issues effectively. This approach
                simplifies debugging and improves test reliability.
            </p>

            <GithubGistSnippet Title="Blazor WASM PlayWright E2E Test with Screenshot" UserId="fingers10"
                FileName="0c0965c9c678d0aa903c1b46e9eb666c"></GithubGistSnippet>

            <p>
                This will generate screenshots of the page while executing that exact line in test and store them in
                <ContentHighlight>bin/debug/net9.0</ContentHighlight> folder as shown below.
            </p>

            <figure>
                <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Screenshot Generated During Test.png"
                    alt="Screenshot Generated During Test" class="[ w-full ]" />
            </figure>

            <h4>Recording and testing complete user flow</h4>

            <p>
                Now lets use the recorder to test a complete login flow from <NavLink
                    href="/blogs/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server">Securing Blazor WASM
                    with OAuth and OIDC using Identity Server</NavLink> page. In the above section I explained on how to
                use recorder so I'm sharing the final code here directly. I'm using the command <ContentHighlight
                    CssClasses="[ break-all ]">pwsh playwright.ps1 codegen --target csharp-nunit https://localhost:7176/
                </ContentHighlight> to get started
            </p>

            <figure>
                <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Generating Test for Login Workflow.png"
                    alt="Generating Test for Login Workflow" class="[ w-full ]" />
            </figure>

            <p>
                I'm altering above test a little to fix and make it work as shown below.
            </p>

            <GithubGistSnippet Title="Blazor WASM E2E Login Workflow Test" UserId="fingers10"
                FileName="5319e06a630fa4cfb0cbdfc804c79b24"></GithubGistSnippet>

            <p>
                <strong>Note</strong> that for demo purpose I have hardcoded the username and password in the test. You
                can use environment
                variables or any other secure way to store them.
            </p>

            <h4>Traces and Trace Viewer</h4>

            <p>
                The <ContentHighlight>Playwright Trace Viewer</ContentHighlight> is a powerful tool for troubleshooting
                tests by recording
                and visualizing test execution steps. To enable tracing, implement <ContentHighlight>Setup
                </ContentHighlight> and
                <ContentHighlight>TearDown</ContentHighlight> methods in your <ContentHighlight>NUnit test class
                </ContentHighlight>.
                The <ContentHighlight>Setup</ContentHighlight> method starts a trace, capturing screenshots, snapshots,
                and sources, while
                the <ContentHighlight>TearDown</ContentHighlight> method generates a trace zip file.
            </p>

            <GithubGistSnippet Title="Playwright NUnit Setup and Trace Method" UserId="fingers10"
                FileName="d34dc5ed8139bc3794f3b5ac695e8e83"></GithubGistSnippet>

            <p>
                Use the Playwright PowerShell script <ContentHighlight CssClasses="[ break-all ]">pwsh playwright.ps1
                    show-trace ./playwright-traces/CompleteLoginWorkFlowAsync</ContentHighlight>
                command or drag the trace file into the Trace Viewer. It provides detailed insights, including test
                actions, timings, screenshots,
                and assertions. This visual debugging approach simplifies test analysis, helping identify and resolve
                issues effectively.
            </p>

            <p>
                Replace the <ContentHighlight CssClasses="[ break-all ]">CompleteLoginWorkFlowAsync</ContentHighlight>
                with your test name in above command.
            </p>

            <figure>
                <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Traces Zip File.png"
                    alt="Traces Zip File" class="[ w-full ]" />
            </figure>

            <p>
                The trace analysis will help to analysis more details like time taken to load, wait time, error happened
                in console, timeline and
                each step details as shown below.
            </p>

            <figure>
                <img src="./image/blogs/blazor/wasm/e2e-testing-blazor-wasm-using-playwright/Trace Analysis.png"
                    alt="Trace Analysis" class="[ w-full ]" />
            </figure>
        </How>

        <Summary>
            <p>
                In this blog post, we learned how to perform end-to-end testing of a Blazor WebAssembly application
                using Playwright. We discussed the importance of end-to-end testing, the benefits of using Playwright, and how
                to create and run tests. We also covered recording tests, configuring base URLs, debugging, taking
                screenshots, and testing complete user flows. By following these steps, you can enhance your testing
                workflows and ensure your Blazor WebAssembly applications are reliable and user-friendly.
            </p>
        </Summary>
    </ContentBody>
</Content>