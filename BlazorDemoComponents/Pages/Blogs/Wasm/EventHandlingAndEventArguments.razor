@page "/blogs/blazor-wasm-event-handling-and-event-arguments"
@using BlazorDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Description=@Description
         Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="Blazor"
         FileName=@nameof(EventHandlingAndEventArguments)>
    <ContentBody>
        <p>
            In this article, lets learn about <ContentHighlight>Event Handling</ContentHighlight> and <ContentHighlight>Event Arguments</ContentHighlight> in 
            blazor wasm apps.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-data-binding">Blazor WASM Data Binding</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-event-handling-in-blazor-components")" Match="NavLinkMatch.All">
                    Why Event Handling in blazor components?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#event-arguments")" Match="NavLinkMatch.All">
                    Event arguments
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="why-event-handling-in-blazor-components" class="[ font-semibold text-lg ]">Why Event Handling in blazor components?</h3>

        <p>
            <ContentHighlight>Event Handling</ContentHighlight> in blazor components helps us to bring interactivity in our blazor applications. What should happen when a user clicks on a 
            button or when the user hovers on element inside a component? we can run a form submit event on click of button or show an alert on click of button or animate a element inside 
            component when the users hovers on the element, etc. We can do all these with the help of event handlers in blazor components.
        </p>

        <p>
            The razor syntax for that is <ContentHighlight>@@on{DOM EVENT}="{DELEGATE}"</ContentHighlight>
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>
                The <ContentHighlight>{DOM EVENT}</ContentHighlight> placeholder is a 
                <NavLink class="[ underline ]" href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank">Document Object Model (DOM) event (for example, click).</NavLink>
            </li>
            <li>The <ContentHighlight>{DELEGATE}</ContentHighlight> placeholder is the C# delegate event handler.</li>
        </ul>

        <GithubGistSnippet Title="Blazor WASM Event Handling" UserId="fingers10" FileName="11d905fae4bef22075b0f73dcf461beb"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Event Handling">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>
                    Scenario - Let's try a simple <ContentHighlight>@@onclick</ContentHighlight> and <ContentHighlight>@@onchange</ContentHighlight>. Click on the button and checkbox to see 
                    how event handler works.
                </b>
            </p>
            <EventHandlingDemo></EventHandlingDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="event-arguments" class="[ font-semibold text-lg ]">Event arguments</h3>

        <p>
            For events that support an event argument type, specifying an event parameter in the event method definition is only necessary if the event type is used in the method. In the 
            following example, MouseEventArgs is used in the <ContentHighlight>ReportPointerLocation</ContentHighlight> method to set message text that reports the mouse coordinates when the 
            user selects a button in the UI.
        </p>

        <GithubGistSnippet Title="Blazor WASM Event Arguments" UserId="fingers10" FileName="2965f5096c630c0de48e30fa358e3a2c"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Event Arguments">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>
                    The following demo shows how to use <ContentHighlight>MouseEventArgs</ContentHighlight> to report mouse coordinates.
                </b>
            </p>
            <EventArgumentsDemo></EventArgumentsDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Here are the list of supported event arguments:
        </p>

        <div class="[ w-full ] [ overflow-x-auto ]">
            <table aria-label="Built-in event arguments" class="[ table-fixed border-collapse ] [ bg-white ] [ border-2 ] [ dark:bg-black dark:border-slate-500 ]">
                <thead>
                    <tr class="[ bg-gray-100 ] [ dark:bg-slate-500 ]">
                        <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">Event</th>
                        <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">Class</th>
                        <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://developer.mozilla.org/docs/Web/API/Document_Object_Model/Introduction" data-linktype="external">Document Object Model (DOM)</NavLink> events and notes
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Clipboard</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.clipboardeventargs" target="_blank">ClipboardEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>oncut</code>, <code>oncopy</code>, <code>onpaste</code>
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Drag</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs" target="_blank">DragEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>ondrag</code>, <code>ondragstart</code>, <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragover</code>, <code>ondrop</code>, <code>ondragend</code><br><br><NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.datatransfer" target="_blank">DataTransfer</NavLink> and <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.datatransferitem" target="_blank">DataTransferItem</NavLink> hold dragged item data.<br><br>Implement drag and drop in Blazor apps using <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-6.0" data-linktype="relative-path">JS interop</NavLink> with <NavLink class="[ underline ]" href="https://developer.mozilla.org/docs/
                    Web/API/HTML_Drag_and_Drop_API" data-linktype="external">HTML Drag and Drop API</NavLink></td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Error</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.erroreventargs" target="_blank">ErrorEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>onerror</code>
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Event</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/system.eventargs" target="_blank">EventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]"><em>General</em><br><code>onactivate</code>, <code>onbeforeactivate</code>, <code>onbeforedeactivate</code>, <code>ondeactivate</code>, <code>onfullscreenchange</code>, <code>onfullscreenerror</code>, <code>onloadeddata</code>, <code>onloadedmetadata</code>, <code>onpointerlockchange</code>, <code>onpointerlockerror</code>, <code>onreadystatechange</code>, <code>onscroll</code><br><br><em>Clipboard</em><br><code>onbeforecut</code>, <code>onbeforecopy</code>, <code>onbeforepaste</code><br><br><em>Input</em><br><code>oninvalid</code>, <code>onreset</code>, <code>onselect</code>, <code>onselectionchange</code>, <code>onselectstart</code>, <code>onsubmit</code><br><br><em>Media</em><br><code>oncanplay</code>, <code>oncanplaythrough</code>, <code>oncuechange</code>, <code>ondurationchange</code>, <code>onemptied</code>, <code>onended</code>, <code>onpause</code>, <code>onplay</code>, <code>onplaying</code>, <code>onratechange</code>, <code>onseeked</code>, <code>onseeking</code>, <code>onstalled</code>, <code>onstop</code>, <code>onsuspend</code>, <code>ontimeupdate</code>, <code>ontoggle</code>, <code>onvolumechange</code>, <code>onwaiting</code><br><br><NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.eventhandlers" target="_blank">EventHandlers</NavLink> holds attributes to configure the mappings between event names and event argument types.</td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Focus</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.focuseventargs" target="_blank">FocusEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>onfocus</code>, <code>onblur</code>, <code>onfocusin</code>, <code>onfocusout</code><br><br>Doesn't include support for <code>relatedTarget</code>.
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Input</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.changeeventargs" target="_blank">ChangeEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>onchange</code>, <code>oninput</code>
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Keyboard</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.keyboardeventargs" target="_blank">KeyboardEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>onkeydown</code>, <code>onkeypress</code>, <code>onkeyup</code>
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Mouse</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.mouseeventargs" target="_blank">MouseEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>onclick</code>, <code>oncontextmenu</code>, <code>ondblclick</code>, <code>onmousedown</code>, <code>onmouseup</code>, <code>onmouseover</code>, <code>onmousemove</code>, <code>onmouseout</code>
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Mouse pointer</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.pointereventargs" target="_blank">PointerEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>onpointerdown</code>, <code>onpointerup</code>, <code>onpointercancel</code>, <code>onpointermove</code>, <code>onpointerover</code>, <code>onpointerout</code>, <code>onpointerenter</code>, <code>onpointerleave</code>, <code>ongotpointercapture</code>, <code>onlostpointercapture</code>
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Mouse wheel</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.wheeleventargs" target="_blank">WheelEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>onwheel</code>, <code>onmousewheel</code>
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Progress</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.progresseventargs" target="_blank">ProgressEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>onabort</code>, <code>onload</code>, <code>onloadend</code>, <code>onloadstart</code>, <code>onprogress</code>, <code>ontimeout</code>
                        </td>
                    </tr>
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Touch</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.toucheventargs" target="_blank">TouchEventArgs</NavLink>
                        </td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">
                            <code>ontouchstart</code>, <code>ontouchend</code>, <code>ontouchmove</code>, <code>ontouchenter</code>, <code>ontouchleave</code>, <code>ontouchcancel</code><br><br><NavLink class="[ underline ]" href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.touchpoint" target="_blank">TouchPoint</NavLink> represents a single contact point on a touch-sensitive device.
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learn't about what is event handling in blazor components and experienced a live demo. In our next article let's learn about what is event callback and how to 
            communicate between components.
        </p>
    </ContentBody>
</Content>

@code {
    private string Description = "In this post I will teach how to handle events inside components in your Blazor applications. All with live working demo.";
    private string Slug = "blazor-wasm-event-handling-and-event-arguments";
    private string PosterPath = "Blogs/Blazor/Wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
}