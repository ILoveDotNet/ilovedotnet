@page "/blogs/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server"
@using BlazorDemoComponents
@inherits BasePage

<Content FileName=@nameof(SecuringWithOIDC)>
    <ContentBody>
        <h3>Table of Contents</h3>

        <ol>
            <li>
                <NavLink href="@($"blogs/{Slug}#what")" Match="NavLinkMatch.All">
                    What we gonna do?
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#why")" Match="NavLinkMatch.All">
                    Why we gonna do?
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#how")" Match="NavLinkMatch.All">
                    How we gonna do?
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="what">What we gonna do?</h3>

        <p>
            In this article let's learn how to secure Blazor WASM app with <ContentHighlight>OAuth</ContentHighlight> and 
            <ContentHighlight>OpenID Connect</ContentHighlight> using <ContentHighlight>Identity Server</ContentHighlight>.
        </p>

        <h3 id="why">Why we gonna do?</h3>

        <p>
            Blazor WASM app runs on Client thus cannot be trusted and just like any other JavaScript apps, any authorization can be bypassed. 
            So its very important to focus on securing the API Our Client app is talking to.
        </p>

        <p>
            Blazor just like any other SPA Applications runs on the Client side and the most common approach is to use OAuth2 and OpenID Connect. 
            The reason behind this tokens based engineering design is,
        </p>

        <ul>
            <li>No CSRF protection required for server endpoints.</li>
            <li>Tokens have narrower permissions.</li>
            <li>Tokens tend to have short life time (1 Hour).</li>
            <li>Tokens can be revoked if it is a reference token.</li>
        </ul>

        <h3 id="how">How we gonna do?</h3>

        <h4 id="registering-the-client">Registering the Client</h4>

        <p>
            The first step is to register the Blazor WASM app in the <ContentHighlight>Identity Server</ContentHighlight>. 
        </p>  

        <p>
            In this demo, lets make use of the demo Identity Server provided by Duende. You can access the demo Identity Server at 
            <NavLink href="https://demo.duendesoftware.com" target="_blank" class="[ underline ]">https://demo.duendesoftware.com</NavLink>.
        </p>

        <p>
            The manual registration usually involves creating a <ContentHighlight>Client</ContentHighlight> in the Identity Server and it looks like the 
            following:
        </p>

        <GithubGistSnippet Title="Client Registration in Duende Identity Server" UserId="fingers10" FileName="c0cbcb9ad1ec4f9bab2d1542fb70fdd2"></GithubGistSnippet>

        <h4 id="configuring-the-client">Configuring the Client</h4>

        <p>
            The next step is to install the <ContentHighlight CssClasses="[ break-all ]">Microsoft.AspNetCore.Components.WebAssembly.Authentication</ContentHighlight> 
            Nuget package in the Blazor WASM app. The package provides a set of code that help the app authenticate users and obtain tokens.
        </p>

        <p>
            Now we need to include <ContentHighlight>AuthenticationService.js</ContentHighlight> in the <ContentHighlight>index.html</ContentHighlight> file as 
            shown below. It is this service that handles the OpenID Connect flow. Our app will call the methods defined in this script to perform the authentication 
            operations.
        </p>

        <GithubGistSnippet Title="Registering Authentication Service in index.html" UserId="fingers10" FileName="dadd2200c6cd5e58eb06503bf65898fd"></GithubGistSnippet>

        <h4 id="authentication-page">Authentication Page</h4>
        
        <p>
            The part of the app that does that is the authentication component which defines the routes required for handling different 
            authentication stages. Now lets add such a page and name it as  <ContentHighlight>Authentication.razor</ContentHighlight>.  
            The <ContentHighlight>RemoteAuthenticatorView</ContentHighlight> component manages the appropriate actions at the each stages of authentication.
        </p>

        <GithubGistSnippet Title="Authentication Page" UserId="fingers10" FileName="58549c4e4441bc61543183760d671fca"></GithubGistSnippet>

        <h4 id="registering-oidc-services">Registering OIDC Services</h4>

        <p>
            Now we need to configure and register <ContentHighlight>Authorization</ContentHighlight> in the <ContentHighlight>Program.cs</ContentHighlight> in 
            the blazor WASM app. We need to call <ContentHighlight>AddOidcAuthentiaction</ContentHighlight> and we need to use the 
            <ContentHighlight>ClientID</ContentHighlight> from the above registration while configuring the blazor WASM app. 
            The configuration looks like the following:
        </p>

        <GithubGistSnippet Title="Blazor WASM OIDC Configuration" UserId="fingers10" FileName="9a98185a28d10583915227a96ca9cd6f"></GithubGistSnippet>

        <p>
            For demo purpose, I'make using the <ContentHighlight CssClasses="[ break-all ]">interactive.public.short ClientID</ContentHighlight> from the 
            demo Duende Identity Server. We are using code flow which means the middleware in server will execute necessary steps to enable PKCE protection.
        </p>

        <h4 id="redirect-to-login">Redirect to Login</h4>

        <p>
            Next, we need to add <ContentHighlight>RedirectToLogin</ContentHighlight> Component which will manage redirecting unauthorized users to the login page. 
            The current URL that the user is attempting to access is maintained by so that they can be returned to that page if authentication is successful. This 
            happens behind the scenes using <ContentHighlight>Navigation History State</ContentHighlight>.
        </p>

        <GithubGistSnippet Title="OIDC Redirect To Login" UserId="fingers10" FileName="ae0589e2341f7551d4cb4828ddf2d9ce"></GithubGistSnippet>

        <p>
            Thats it! We have successfully secured the Blazor WASM app with <ContentHighlight>OIDC</ContentHighlight> using <ContentHighlight>Duende Identity Server</ContentHighlight>.
            Now if we try to login to the app, we will be redirected to the Identity Server login page and after successful login, we will be redirected back to the app.
        </p>

        <h4 id="demo">Demo</h4>

        <DemoSnippet Title="Login and Log out using OIDC">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>
                    <ol class="[ list-decimal ] [ ml-4 ]">
                        <li>Click on the Login button. This will redirected to demo Duende Identity Server login page.</li>
                        <li>
                            Enter the default credential display on the login screen which is either bob/bob or alice/alie. After successful login, you 
                            will be redirected back to the I Love .NET app.
                        </li>
                        <li>Then you can see Log out button. Click on the Log out button to log out from the app.</li>
                        <li>
                            This will redirected to demo Duende Identity Server logout page and logout will happens at the Identity Server level to avoid cross 
                            site scripting and forgery and after successful logout, you will be redirected back to the I Love .NET app.
                        </li>
                    </ol>
                </b>
            </p>
            <Error>
                <SecuringWithOIDCAuthenticationDemo />
            </Error>
        </DemoSnippet>

        <p>
            Here is the recap of complete flow.
        </p>

        <ol>
            <li>
                <p>Initiate Login</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/Initiate Login.png" alt="Initiate Login" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>Login Redirect</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/Login Redirect.png" alt="Login Redirect" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>Enter Credentials</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/Enter Credentials.png" alt="Enter Credentials" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>Completing Login</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/Completing Login.png" alt="Completing Login" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>Initiate Log Out</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/Initiate Log Out.png" alt="Initiate Log Out" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>Processing Log Out</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/Processing Log Out.png" alt="Processing Log Out" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>End Session</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/End Session.png" alt="End Session" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>Log Out Callback</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/Log Out Callback.png" alt="Log Out Callback" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>Log Out Complete</p>
                <figure>
                    <img src="./image/blogs/blazor/wasm/securing-blazor-wasm-with-oauth-and-oidc-using-identity-server/Log Out Complete.png" alt="Log Out Complete" class="[ w-full ]" />
                </figure>
            </li>
        </ol>

        <p>
            This looks awesome. We have successfully secured the Blazor WASM app with <ContentHighlight>OIDC</ContentHighlight> using 
            <ContentHighlight>Identity Server</ContentHighlight>. 
        </p>

        <h4 id="passing-access-token-to-api">Passing Access Token to API</h4>

        <p>
            Passing Access tokens to API can be easily implemented by using <ContentHighlight>AuthorizationMessageHandler</ContentHighlight> and register it with 
            along with <ContentHighlight>AddHttpClient</ContentHighlight> in Program.cs.
        </p>

        <GithubGistSnippet Title="Passing Access Token to API" UserId="fingers10" FileName="3cad8de6e5734627178ce6a666cf4482"></GithubGistSnippet>

        <h4 id="displaying-parts-of-ui">Displaying parts of UI</h4>

        <p>
            Now let's see how we can shown parts of the UI to user based on authentication status. We can use <ContentHighlight>AuthorizeView</ContentHighlight> 
            component to show different parts of the UI based on the authentication status. The <ContentHighlight>AuthorizeView</ContentHighlight> component 
            has two child components <ContentHighlight>Authorized</ContentHighlight> and <ContentHighlight>NotAuthorized</ContentHighlight> which will be 
            displayed based on the authentication status. I have used the exact same code above to show login button when user is not authenticated and 
            show logout button when user is authenticated.
        </p>

        <DemoSnippet Title="Displaying parts of UI Demo">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>Please login using above demo to see different section getting displayed for Bob and Alice</b>
            </p>
            <br />
            <Error>
                <SecuringWithOIDCAuthorizationDemo />
            </Error>
        </DemoSnippet>

        <h4 id="user-details">User Details</h4>

        <p>
            Now to get details of the user we can rely on <ContentHighlight>context (AuthenticationState)</ContentHighlight> provided by the 
            <ContentHighlight>AuthorizeView</ContentHighlight> component. We can use <ContentHighlight>context.User.Identity!.Name</ContentHighlight> to get 
            the name of the user. We can also use <ContentHighlight>context.User.Identity!.IsAuthenticated</ContentHighlight> to check if the user is 
            authenticated or not. And we can also access the claims of the user using <ContentHighlight>context.User.Claims</ContentHighlight>.
        </p>

        <p>
            This is how I display logged in user name in above demo. We can also change this to email by simply changing
            <ContentHighlight>options.UserOptions.NameClaim</ContentHighlight> in Program.cs file. This will now display email instead of name.
        </p>

        <GithubGistSnippet Title="User Options Provider" UserId="fingers10" FileName="e03cf354d24fd077efe53e6add45af51"></GithubGistSnippet>

        <h4 id="authentication-state-provider">Authentication State Provider</h4>

        <p>
            <ContentHighlight>AuthenticationStateProvider</ContentHighlight> is the underlying built in service that provides the current authentication state 
            to the application. It is this that powers AuthorizeView and CascadingAuthenticationState components. However we should not use this service directly 
            because anonymous changes in it will not notify UI components.
        </p>

        <p>
            So the safe and better way is to get <ContentHighlight>[CascadingParameter] Task&lt;AuthenticationState&gt; authenticationStateTask { get; set; }</ContentHighlight>.
            Now we can use this to get the authentication state and use it in the UI components to conditionally write logic as shown below.
        </p>

        <GithubGistSnippet Title="Get Authentication State" UserId="fingers10" FileName="940a96a6ff59766023e4fb9ccd9c191d"></GithubGistSnippet>

        <h4 id="prevent-unauthorized-access">Prevent UnAuthorized Access</h4>

        <p>
            Now lets see how to secure pages from <ContentHighlight>UnAuthorized</ContentHighlight> access. We need to add 
            <ContentHighlight>[Authorize]</ContentHighlight> attribute to the page or component that we want to secure. This will restrict access to the page or 
            component to only authenticated users. However to restrict access to child components within a component or page, we need to use 
            <ContentHighlight>AuthorizeView</ContentHighlight> component.
        </p>

        <p>
            To make sure users are notified with right message we need to use <ContentHighlight>AuthorizeRouteView</ContentHighlight> which we need to replace the 
            <ContentHighlight>RouteView</ContentHighlight> in the router. This will now show Not Authorized message to the user when they try to access a page 
            that they are not authorized to access.
        </p>

        <p>
            To customise the default Not Authorized message we can use <ContentHighlight>NotAuthorized</ContentHighlight> render fragment within the 
            <ContentHighlight>AuthorizeRouteView</ContentHighlight> component. This will now show the custom message to the user when they try to access a page.
        </p>

        <p>
            Now instead of showing custom message we can simply redirect the user to login page when they try to access a page that they are not authorized to access. 
            This can be done by using <ContentHighlight>RedirectToLogin</ContentHighlight> component within the <ContentHighlight>AuthorizeRouteView</ContentHighlight> 
            component. This will now redirect the user to login page when they try to access a page that they are not authorized to access.
        </p>

        <GithubGistSnippet Title="Update Router with AuthorizeRouteView" UserId="fingers10" FileName="af0fb562baf9fec4e210afaa963f0291"></GithubGistSnippet>

        <h4 id="customization">Customization</h4>
        
        <p>
            We can also Customize the text showing in UI while authentication process is happening. This can be done in RemoteAuthenticatorView component 
            by providing the LoggingIn, LogInFailed, LogOut, LogOutFailed, LogOutSucceeded RenderFragments.
        </p>

        <p>
            You can also customise the messages displayed to the user during the authentication process. The messages can be customised by providing the 
            <ContentHighlight>AuthenticationMessage</ContentHighlight> component in the <ContentHighlight>App.razor</ContentHighlight> file as shown below.
        </p>

        <GithubGistSnippet Title="Customize Authentication Message" UserId="fingers10" FileName="2ab275ca00f681715d4ee7a8ced84323"></GithubGistSnippet>

        <h3 id="summary">Summary</h3>

        <p>
            In this article, we learnt about the <ContentHighlight>OpenID Connect</ContentHighlight> and how to secure the Blazor WASM app with 
            <ContentHighlight>OIDC</ContentHighlight> using <ContentHighlight>Identity Server</ContentHighlight>. We started with 
            <ContentHighlight>Authentication.js</ContentHighlight> and learnt about the <ContentHighlight>Authentication</ContentHighlight> page and how it 
            helps in handling the authentication process behind the scenes. We also learnt about the <ContentHighlight>AuthorizeRouteView</ContentHighlight> and 
            how it helps in redirecting the user to login on application load along with customising the messages displayed to the user during 
            the authentication process.
        </p>
    </ContentBody>
</Content>