@page "/blogs/blazor-wasm-publishing-to-azure-static-web-apps"
@inherits BasePage

<Content FileName=@nameof(PublishingToAzureStaticWebApps)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Publishing</ContentHighlight> Blazor apps to Azure Static Web Apps.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink href="blogs/blazor-wasm-dockerizing" Match="NavLinkMatch.All">Blazor WASM Dockerizing</NavLink>.
        </p>

        <h3>Table of Contents</h3>

        <ol>
            <li>
                <NavLink href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#publishing-to-azure-static-web-apps")" Match="NavLinkMatch.All">
                    Publishing to Azure Static Web Apps
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction">Introduction</h3>

        <p>
            With <ContentHighlight>ASP.NET Blazor WebAssembly (WASM)</ContentHighlight> you can create .NET web applications that run completely inside of 
            the browser sandbox. The publish output of a Blazor WASM project are <strong>all static files</strong>. Now that you can run .NET web applications 
            without server-side code, you can deploy these applications to various static site hosts, such as Azure Static Web Apps and AWS Amplify. With the 
            Blazor WebAssembly hosting model:
        </p>

        <ul>
            <li>The Blazor app, its dependencies, and the .NET runtime are downloaded to the browser in parallel.</li>
            <li>The app is executed directly on the browser UI thread.</li>
        </ul>

        <h3 id="publishing-to-azure-static-web-apps">Publishing to Azure Static Web Apps</h3>

        <h4>Prerequisites</h4>

        <ol>
            <li>Create a Blazor Wasm Project.</li>
            <li>
                <p>
                    Application source code must be inside of a GitHub repository. So, you need to create a local Git repository and commit your 
                    source code to the repository using these commands.
                </p>
                <GithubGistSnippet Title="Create Local Repository" UserId="fingers10" FileName="ba35eed4720d5cc91d6b315a8ee404f1"></GithubGistSnippet>
            </li>
            <li>Create a Azure Account</li>
        </ol>

        <h4>Push Blazor Project to GitHub</h4>

        <p>
            Create a new GitHub repository (<NavLink href="https://docs.github.com/en/github/getting-started-with-github/create-a-repo" target="blank">instructions</NavLink>) 
            and copy the commands to "push an existing repository from the command line" from the empty GitHub repository page, here's what it should looks 
            like but with a different URL:
        </p>

        <GithubGistSnippet Title="Push to GitHub Repository" UserId="fingers10" FileName="f8df74eb610c92a260e42e7e0db22367"></GithubGistSnippet>

        

        <h4>Create a Azure Static Web App</h4>

        <p>
            Now that your source code has been pushed to GitHub, you'll need to create a <ContentHighlight>Azure Static Web App</ContentHighlight> that provision 
            your pipeline, build the project and publishes the code to a random <ContentHighlight>https</ContentHighlight> URL.
        </p>

        <p>
            Start by navigating to the Azure portal and search for <ContentHighlight>Static Web Apps</ContentHighlight> and click on it:
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/search-azure-static-web-apps.png" loading="lazy" alt="search azure static web apps" class="[ w-full ]" />
        </figure>

        
        
        <p>
            Clicking that link will take you to the <ContentHighlight>Static Web App</ContentHighlight> section. Now click on <ContentHighlight>Create</ContentHighlight> 
            under Static Web Apps.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/create-azure-static-web-apps.png" loading="lazy" alt="Create Azure Static Web Apps" class="[ w-full ]" />
        </figure>

        

        <p>
            Now select <ContentHighlight>Subscription</ContentHighlight> and <ContentHighlight>Resource Group</ContentHighlight> and give your static web app a 
            nice <ContentHighlight>name</ContentHighlight> and select <ContentHighlight>plan</ContentHighlight> and select <ContentHighlight>GitHub</ContentHighlight> 
            as the Git source code provider.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/enter-details.png" loading="lazy" alt="Enter Details" class="[ w-full ]" />
        </figure>

        

        <p>
            And select the <ContentHighlight>organization</ContentHighlight>, <ContentHighlight>repository</ContentHighlight>, and <ContentHighlight>branch</ContentHighlight> 
            where your Blazor WASM project is located. Now Azure Static Web Apps will determine the <ContentHighlight>Build Preset</ContentHighlight> 
            (project type) as <ContentHighlight>blazor</ContentHighlight> and auto populate the <ContentHighlight>App Location</ContentHighlight>, 
            <ContentHighlight>Api Location</ContentHighlight> and <ContentHighlight>Output Location</ContentHighlight>. Simply Clear the 
            <ContentHighlight>Api Location</ContentHighlight> and <ContentHighlight>Output Location</ContentHighlight> and click the <ContentHighlight>next</ContentHighlight> button:
        </p>

        <p>
            <strong>Note:</strong> I'm clearing <ContentHighlight>Api Location</ContentHighlight> because I'm not going to use 
            <ContentHighlight>Azure Functions</ContentHighlight> and <ContentHighlight>Output Location</ContentHighlight> because I'm going to use the 
            <ContentHighlight>custom build</ContentHighlight>.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/enter-details-continued.png" loading="lazy" alt="Enter Details Continued" class="[ w-full ]" />
        </figure>

        

        <p>
            Now <ContentHighlight>review</ContentHighlight> the details and click on create.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/review-azure-static-web-apps.png" loading="lazy" alt="Review Azure Static Web Apps" class="[ w-full ]" />
        </figure>

        

        <p>
            On the next page, Azure will show the Static Web Apps <ContentHighlight>deployment progress</ContentHighlight>.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/azure-static-web-apps-deployment-complete.png" loading="lazy" alt="Azure Static Web Apps Deployment Complete" class="[ w-full ]" />
        </figure>

        

        <p>
            Now click on Go to resource. Here you can pretty much do all possible things in your static web apps like 
            <ContentHighlight>managing deployment token</ContentHighlight>, <ContentHighlight>configuring custom domain</ContentHighlight> etc..
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/ilovedotnet-azure-static-web-apps-resource.png" loading="lazy" alt="ILoveDotNet Azure Static Web Apps Resource" class="[ w-full ]" />
        </figure>

        

        <p>
            Now lets switch back to github repo to see the changes made by Azure Static Web Apps. You can see a new <ContentHighlight>workflow</ContentHighlight> file 
            named <ContentHighlight>azure-static-web-apps-gray-coast-0ac087f10.yml</ContentHighlight> added by static web apps. This file is responsible for building 
            and deploying the app to Azure Static Web Apps. I'm going to <ContentHighlight>ignore this file and delete</ContentHighlight> it as the build made by 
            this file <ContentHighlight>fails (in most of the cases if your app needs custom build steps)</ContentHighlight> and its not needed for my app. 
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/azure-deployment-workflow-file.png" loading="lazy" alt="Azure Deployment Workflow File" class="[ w-full ]" />
        </figure>

        

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/build-failed.png" loading="lazy" alt="Build Failed" class="[ w-full ]" />
        </figure>

        

        <p>So Instead I'm going to simply update my existing workflow file with azure deployment step as shown below.</p>

        <GithubGistSnippet Title="Publishing Blazor Wasm Apps to Azure Static Web Apps" UserId="fingers10" FileName="da21248e9d4427894dd3a74e0e5958c6"></GithubGistSnippet>

        

        <p>
            If you notice in the above code snippet, I have configured <ContentHighlight>skip_app_build</ContentHighlight> to <ContentHighlight>true</ContentHighlight> 
            because I'm not going to use the default build provided by Azure Static Web Apps and I'm going to use the <ContentHighlight>custom build</ContentHighlight>. 
            I have already published my app and placed it in <ContentHighlight>dist/Web/wwwroot</ContentHighlight> so I'm going to use that as 
            <ContentHighlight>app_location</ContentHighlight> and use <ContentHighlight>empty values</ContentHighlight> for <ContentHighlight>api_location</ContentHighlight> 
            and <ContentHighlight>output_location</ContentHighlight>.
        </p>

        <p><strong>Note:</strong> You can find more options in the following link 
        <NavLink href="https://learn.microsoft.com/en-in/azure/static-web-apps/build-configuration?tabs=github-actions#build-and-deploy" target="_blank">Build configuration for Azure Static Web Apps</NavLink></p>

        <p>
            You can get the <ContentHighlight>deployment token</ContentHighlight> from the below screen in azure portal and add it to your 
            <ContentHighlight>github secrets</ContentHighlight>.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/manage-deployment-token.png" loading="lazy" alt="Manage Deployment Token" class="[ w-full ]" />
        </figure>

        

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/azure-deployment-token.png" loading="lazy" alt="Azure Deployment Token" class="[ w-full ]" />
        </figure>

        

        <p>
            Now when you <ContentHighlight>commit the code</ContentHighlight> the <ContentHighlight>deployment will be triggered</ContentHighlight> and you can 
            see the <ContentHighlight>deployment logs</ContentHighlight> in the <ContentHighlight>actions tab in github</ContentHighlight>.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/azure-static-web-app-deployment-success.png" loading="lazy" alt="Azure Static Web App Deployment Success" class="[ w-full ]" />
        </figure>

        

        <p>
            Once Azure finished deploying, visit your Blazor app hosted in Azure by clicking on the <ContentHighlight>URL</ContentHighlight> in the 
            <ContentHighlight>Azure Static Web Apps Overview</ContentHighlight> screen or the <ContentHighlight>URL</ContentHighlight> shown in 
            <ContentHighlight>Github Actions Logs</ContentHighlight> as shown above.
        </p>

        

        <p>
            Thats it. Your app will now be deployed in the above mentioned URL with https enabled.
        </p>

        <p>
            Verify the Blazor WASM application is working as expected. Even when you navigate or refresh, the Blazor WASM application is returning as expected. But when you 
            look in the browser developer tools, you will see the page is actually returned with an <ContentHighlight>HTTP status code 404</ContentHighlight>.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/access-via-url.png" loading="lazy" alt="Access Via URL" class="[ w-full ]" />
        </figure>

        

        <h4>Rewrite all requests to index.html</h4>

        <p>
            To fix the <ContentHighlight>404</ContentHighlight> issues, you need to tell Azure Static Web Apps to rewrite all requests to 
            <ContentHighlight>index.html</ContentHighlight>. You need to add <ContentHighlight>Redirect rules</ContentHighlight> in 
            <ContentHighlight>staticwebapp.config.json</ContentHighlight> and place it in the root of your Blazor WASM project as shown below.
        </p>

         <GithubGistSnippet Title="Azure Static Web App Config Json" UserId="fingers10" FileName="19f1a9fbeba24dd051f22afa63235ea2"></GithubGistSnippet>

        

        <p>
            This rule will match all requests except if they end with the listed file extensions. This rule is based on the rule provided by <NavLink target="blank" href="https://learn.microsoft.com/en-us/azure/static-web-apps/configuration">
            Azure's documentation "Configure Azure Static Web Apps"</NavLink>, but with extra file extensions required by the Blazor WASM application. You can 
            find out all the extensions used in your Blazor WASM application using PowerShell. Open a PowerShell window, publish the Blazor WASM application using 
            the .NET CLI, and the last command will recursively look for all files and list out all unique extensions.
        </p>

        <p>
            When you navigate back to the Blazor WASM application hosted in Azure Static Web Apps, the 404 response codes should now be 200.
        </p>

        

        <h4>Configure Domain</h4>

        <p>
            You can also use custom domain to load your blazor wasm app.
        </p>

        <ol>
            <li>Purachse your custom domain.</li>
            <li>Add your domain name in the custom domain section in Azure Static Web App Overview.</li>
            <li>After some time your site will be published under your domain.</li>
        </ol>

        

        <h3 id="summary">Summary</h3>

        <p>
            Blazor WebAssembly can be served as static files. These files can be hosted in static hosting sites such as Azure Static Web Apps. Using 
            <ContentHighlight>Azure Static Web Apps</ContentHighlight> you can create a app and select <ContentHighlight>GitHub</ContentHighlight> as source 
            provider to automatically deploy the Blazor application to Azure Staitc Web Apps. Out of the box, when you refresh the Blazor WASM application while 
            not at the root path, Azure Static Web Apps will return the <ContentHighlight>index.html</ContentHighlight> file but with a 404 status code. 
            You can use Azure's <ContentHighlight>staitcwebappconfig.json</ContentHighlight> functionality to return the index.html file with status code 200 
            for all requests not requesting a specific list of extensions.
        </p>
    </ContentBody>
</Content>