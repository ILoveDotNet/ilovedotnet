@page "/blogs/blazor-wasm-publishing-to-azure-static-web-apps"
@inherits FragmentNavigationBase

<Content FileName=@nameof(PublishingToAzureStaticWebApps)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Publishing</ContentHighlight> Blazor apps to Azure Static Web Apps.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-dockerizing" Match="NavLinkMatch.All">Blazor WASM Dockerizing</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#publishing-to-azure-static-web-apps")" Match="NavLinkMatch.All">
                    Publishing to Azure Static Web Apps
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            With ASP.NET Blazor WebAssembly (WASM) you can create .NET web applications that run completely inside of the browser sandbox. The publish 
            output of a Blazor WASM project are <strong>all static files</strong>. Now that you can run .NET web applications without server-side code, 
            you can deploy these applications to various static site hosts, such as Azure Static Web Apps and AWS Amplify. With the Blazor WebAssembly 
            hosting model:
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>The Blazor app, its dependencies, and the .NET runtime are downloaded to the browser in parallel.</li>
            <li>The app is executed directly on the browser UI thread.</li>
        </ul>

        <h3 id="publishing-to-azure-static-web-apps" class="[ font-semibold text-lg ]">Publishing to Azure Static Web Apps</h3>

        <h4 class="[ font-semibold text-base ]">Prerequisites</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create a Blazor Wasm Project.</li>
            <li>
                <p>
                    Application source code must be inside of a GitHub repository. So, you need to create a local Git repository and commit your 
                    source code to the repository using these commands.
                </p>
                <GithubGistSnippet Title="Create Local Repository" UserId="fingers10" FileName="ba35eed4720d5cc91d6b315a8ee404f1"></GithubGistSnippet>
            </li>
            <li>Create a Azure Account</li>
        </ol>

        <h4 class="[ font-semibold text-base ]">Push Blazor Project to GitHub</h4>

        <p>
            Create a new GitHub repository (<NavLink class="[ underline ]" href="https://docs.github.com/en/github/getting-started-with-github/create-a-repo" target="blank">instructions</NavLink>) 
            and copy the commands to "push an existing repository from the command line" from the empty GitHub repository page, here's what it should looks 
            like but with a different URL:
        </p>

        <GithubGistSnippet Title="Push to GitHub Repository" UserId="fingers10" FileName="f8df74eb610c92a260e42e7e0db22367"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-base ]">Create a Azure Static Web App</h4>

        <p>
            Now that your source code has been pushed to GitHub, you'll need to create a <b>Azure Static Web App</b> that provision your pipeline, build the 
            project and publishes the code to a random <strong>https</strong> URL.
        </p>

        <p>
            Start by navigating to the Azure portal and search for <b>Static Web Apps</b> and click on it:
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Search Azure Static Web Apps.png" loading="lazy" alt="search azure static web apps" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>
        
        <p>
            Clicking that link will take you to the <ContentHighlight>Static Web App</ContentHighlight> section. Now click on <ContentHighlight>Create</ContentHighlight> 
            under Static Web Apps.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Create Azure Static Web Apps.png" loading="lazy" alt="Create Azure Static Web Apps" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Now select Subscription and Resource Group and give your static web app a nice name and select plan and select GitHub as the Git source code provider.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Enter Details.png" loading="lazy" alt="Enter Details" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            And select the organization, repository, and branch where your Blazor WASM project is located. Now Azure Static Web Apps will determine the Build Preset 
            (project type) as blazor and auto populate the App Location, Api Location and Output Location. Simply Clear the Api Location and Output Location and 
            click the <ContentHighlight>next</ContentHighlight> button:
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Enter Details Continued.png" loading="lazy" alt="Enter Details Continued" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Now review the details and click on create.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Review Azure Static Web Apps.png" loading="lazy" alt="Review Azure Static Web Apps" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            On the next page, Azure will show the Static Web Apps deployment progress.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Azure Static Web Apps Deployment Complete.png" loading="lazy" alt="Azure Static Web Apps Deployment Complete" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Now click on Go to resource. Here you can pretty much do all possible things in your static web apps like managing deployment token, configuring custom 
            domain etc..
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/ILoveDotNet Azure Static Web Apps Resource.png" loading="lazy" alt="ILoveDotNet Azure Static Web Apps Resource" class="[ w-full ]" />
        </figure>

        <p>
            Now lets switch back to github repo to see the changes made by Azure Static Web Apps. You can see a new workflow file named azure-static-web-apps-gray-coast-0ac087f10.yml 
            added by static web apps. This file is responsible for building and deploying the app to Azure Static Web Apps. I'm going to ignore this file and delete it 
            as the build made by this file fails (in most of the cases if your app needs custom build steps) and its not needed for my app. So Instead I'm going to 
            simply update my existing workflow file with azure deployment step as shown below.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Azure Deployment Workflow File.png" loading="lazy" alt="Azure Deployment Workflow File" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Build Failed.png" loading="lazy" alt="Build Failed" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <GithubGistSnippet Title="Publishing Blazor Wasm Apps to Azure Static Web Apps" UserId="fingers10" FileName="da21248e9d4427894dd3a74e0e5958c6"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            You can get the deployment token from the below screen in azure portal and add it to your github secrets.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Manage Deployment Token.png" loading="lazy" alt="Manage Deployment Token" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Azure Deployment Token.png" loading="lazy" alt="Azure Deployment Token" class="[ w-full ]" />
        </figure>

        <p>
            Now when you commit the code the deployment will be triggered and you can see the deployment logs in the actions tab in github.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/Azure Static Web App Deployment Success.png" loading="lazy" alt="Azure Static Web App Deployment Success" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Once Azure finished deploying, visit your Blazor app hosted in Azure by clicking on the <ContentHighlight>URL</ContentHighlight> in the Azure Static 
            Web Apps Overview screen or the URL shown in Github Actions Logs.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Thats it. Your app will now be deployed in the above mentioned URL with https enabled.
        </p>

        <p>
            Verify the Blazor WASM application is working as expected. Even when you navigate or refresh, the Blazor WASM application is returning as expected. But when you 
            look in the browser developer tools, you will see the page is actually returned with an <ContentHighlight>HTTP status code 404</ContentHighlight>.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/publishing-to-azure-static-web-apps/access via url.png" loading="lazy" alt="access via url" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-base ]">Rewrite all requests to index.html</h4>

        <p>
            To fix the <ContentHighlight>404</ContentHighlight> issues, you need to tell Azure Static Web Apps to rewrite all requests to 
            <ContentHighlight>index.html</ContentHighlight>. You need to add Redirect rules in staticwebapp.config.json and place it in the root of your Blazor 
            WASM project as shown below.
        </p>

         <GithubGistSnippet Title="Azure Static Web App Config Json" UserId="fingers10" FileName="19f1a9fbeba24dd051f22afa63235ea2"></GithubGistSnippet>

        <p>
            This rule will match all requests except if they end with the listed file extensions. This rule is based on the rule provided by <NavLink class="[ underline ]" target="blank" href="https://learn.microsoft.com/en-us/azure/static-web-apps/configuration">
            Azure's documentation "Redirects for single page web apps (SPA)"</NavLink>, but with extra file extensions required by the Blazor WASM application. You can find 
            out all the extensions used in your Blazor WASM application using PowerShell. Open a PowerShell window, publish the Blazor WASM application using the .NET CLI, and 
            the last command will recursively look for all files and list out all unique extensions.
        </p>

        <p>
            When you navigate back to the Blazor WASM application hosted in Azure Static Web Apps, the 404 response codes should now be 200.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-base ]">Configure Domain</h4>

        <p>
            You can also use custom domain to load your blazor wasm app.
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Purachse your custom domain.</li>
            <li>Add your domain name in the custom domain section in Azure Static Web App Overview.</li>
            <li>After some time your site will be published under your domain.</li>
        </ol>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            Blazor WebAssembly can be served as static files. These files can be hosted in static hosting sites such as Azure Static Web Apps. Using Azure Static Web Apps 
            you can create a app and select GitHub as source provider to automatically deploy the Blazor application to Azure Staitc Web Apps. Out of the box, when you refresh 
            the Blazor WASM application while not at the root path, Azure Static Web Apps will return the index.html file but with a 404 status code. You can use 
            Azure's "staitcwebappconfig.json" functionality to return the index.html file with status code 200 for all requests not requesting a specific list of extensions.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "blazor-wasm-publishing-to-azure-static-web-apps";
}