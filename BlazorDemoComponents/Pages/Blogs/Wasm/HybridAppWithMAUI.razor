@page "/blogs/developing-hybrid-app-with-blazor-wasm-and-dotnet-maui"
@inherits BasePage

<Content FileName=@nameof(HybridAppWithMAUI)>
    <ContentBody>
        <p>
            In this article, let's learn about developing <ContentHighlight>Hybrid App</ContentHighlight> using Blazor WASM and MAUI.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-publishing-to-azure-static-web-apps" Match="NavLinkMatch.All">Developing Hybrid App with Blazor WASM and .NET MAUI</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#converting-blazor-wasm-to-maui-hybrid-app")" Match="NavLinkMatch.All">
                    Converting Blazor WASM to MAUI Hybrid App
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            So far we have learned how to build and run blazor web app. In a Blazor Hybrid app, Razor components run 
            <ContentHighlight>natively</ContentHighlight> on the device. Components render to an <ContentHighlight>embedded Web View control</ContentHighlight> 
            through a <ContentHighlight>local interop channel</ContentHighlight>. Components don't run in the browser, and WebAssembly isn't involved. 
            Razor components load and execute code quickly, and components have <ContentHighlight>full access to the native capabilitie</ContentHighlight> of the 
            device through the .NET platform. <ContentHighlight>Component styles rendered in a Web View are platform dependent</ContentHighlight> and may require 
            you to account for rendering differences across platforms using custom stylesheets.
        </p>

        <p>
            Join me on a journey of building your first hybrid applications across <ContentHighlight>iOS, Android, Mac, Windows, and web with ASP.NET Core, Blazor, 
            Blazor Hybrid, and .NET MAUI</ContentHighlight>. Learn how to use Blazor Hybrid to blend desktop and mobile native client frameworks with .NET and Blazor.
        </p>

        

        <h3 id="converting-blazor-wasm-to-maui-hybrid-app" class="[ font-semibold text-lg ]">Converting Blazor WASM to MAUI Hybrid App</h3>

        <p>
            Let's take our <ContentHighlight>I Love DotNet Blazor WASM</ContentHighlight> app and convert it to a <ContentHighlight>MAUI Hybrid</ContentHighlight> 
            app. The steps we need to follow are:
        </p>

        <ol class="[ list-decimal ] [ ml-5 ]">
            <li>
                <p>Create a web assembly app. In our case we already have our I Love Dotnet Blazor Wasm app.</p>

                <figure>
                    <img src="./image/blogs/blazor/wasm/blazor-hybrid/Blazor Wasm App Pages.png" loading="lazy" alt="Blazor Wasm App Pages" class="[ w-full md:w-1/4 ]" />
                </figure>

                

                <figure>
                    <img src="./image/blogs/blazor/wasm/blazor-hybrid/Blazor Wasm App Assets.png" loading="lazy" alt="Blazor Wasm App Assets" class="[ w-full md:w-1/4 ]" />
                </figure>

                

                <figure>
                    <img src="./image/blogs/blazor/wasm/blazor-hybrid/Blazor Wasm npm configuration.png" loading="lazy" alt="Blazor Wasm npm configuration" class="[ w-full md:w-1/4 ]" />
                </figure>
            </li>
            <li>Create a <ContentHighlight>common razor class library</ContentHighlight>.</li>
            <li>
                <p><ContentHighlight>Move the pages/components/assets</ContentHighlight> to common razor class library.</p>

                <figure>
                    <img src="./image/blogs/blazor/wasm/blazor-hybrid/Blazor Wasm RCL Pages.png" loading="lazy" alt="Blazor Wasm RCL Pages" class="[ w-full md:w-1/4 ]" />
                </figure>

                

                <figure>
                    <img src="./image/blogs/blazor/wasm/blazor-hybrid/Blazor Wasm RCL Assets.png" loading="lazy" alt="Blazor Wasm RCL Assets" class="[ w-full md:w-1/4 ]" />
                </figure>

                
            </li>
            <li><ContentHighlight>Create MAUI Blazor Hybrid</ContentHighlight> Project.</li>
            <li>
                <p>
                    Reuse the <ContentHighlight>common razor class library</ContentHighlight> in <ContentHighlight>MAUI</ContentHighlight> 
                    and <ContentHighlight>Blazor</ContentHighlight>.
                </p>

                <figure>
                    <img src="./image/blogs/blazor/wasm/blazor-hybrid/Blazor Wasm Project Reference.png" loading="lazy" alt="Blazor Wasm Project Reference" class="[ w-full ]" />
                </figure>

                
            </li>
            <li>
                Now we need configure <ContentHighlight>MauiProgram.cs</ContentHighlight> and <ContentHighlight>register the dependencies</ContentHighlight> as we 
                have done in Blazor Wasm <ContentHighlight>Program.cs</ContentHighlight> Make sure to configure <ContentHighlight>environment</ContentHighlight> 
                additionally in <ContentHighlight>MauiProgram.cs</ContentHighlight>.
            </li>
            <li>
                We need to configure the <ContentHighlight>Routes.razor</ContentHighlight> component in <ContentHighlight>Maui</ContentHighlight> App same as we 
                have done in <ContentHighlight>Blazor Wasm</ContentHighlight> App.
            </li>
            <li>
                We need to configure the <ContentHighlight>index.html</ContentHighlight> in <ContentHighlight>Maui</ContentHighlight> App same as we 
                have done in <ContentHighlight>Blazor Wasm</ContentHighlight> App.
            </li>
            <li>
                To make use of <ContentHighlight>native platform features</ContentHighlight> in <ContentHighlight>razor class library</ContentHighlight>, we need to 
                add <ContentHighlight CssClasses="[ break-all ]">&lt;UseMauiEssentials&gt;true&lt;/UseMauiEssentials&gt;</ContentHighlight> in 
                the <ContentHighlight>.csproj</ContentHighlight> file and add reference to Nuget <ContentHighlight>Microsoft.Maui.Essentials</ContentHighlight>.
            </li>
            <li>
                Make sure you point to <ContentHighlight>index.html</ContentHighlight> from <ContentHighlight>wwwroot</ContentHighlight> of 
                <ContentHighlight>common razor class library</ContentHighlight> in <ContentHighlight>MainPage.xaml</ContentHighlight> of Maui project.
            </li>
            <li>
                Thats it. Now we can run the app and see the same Blazor Wasm app running as a MAUI Hybrid app.
            </li>
        </ol>

        <h4 class="[ font-semibold text-base ]">MacOS</h4>

        <figure>
            <img src="./image/blogs/blazor/wasm/blazor-hybrid/MacOS.png" loading="lazy" alt="MacOS" class="[ w-full md:w-3/4 ]" />
        </figure>

        

        <h4 class="[ font-semibold text-base ]">iOS</h4>

        <figure>
            <img src="./image/blogs/blazor/wasm/blazor-hybrid/iOS.png" loading="lazy" alt="iOS" class="[ w-full md:w-1/4 ]" />
        </figure>

        

        <h4 class="[ font-semibold text-base ]">Andriod</h4>

        <img src="./image/blogs/blazor/wasm/blazor-hybrid/Android.png" loading="lazy" alt="Android" class="[ w-full md:w-1/4 ]" />

        

        <h4 class="[ font-semibold text-base ]">Windows</h4>

        <img src="./image/blogs/blazor/wasm/blazor-hybrid/Windows.png" loading="lazy" alt="Windows" class="[ w-full ]" />

        <h4 class="[ font-semibold text-base ]">Web</h4>

        <img src="./image/blogs/blazor/wasm/blazor-hybrid/Web.png" loading="lazy" alt="Web" class="[ w-full ]" />

        

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learnt about <ContentHighlight>developing Hybrid App using Blazor WASM and MAUI</ContentHighlight>. We also learnt about the steps 
            to convert <ContentHighlight>Blazor WASM</ContentHighlight> to <ContentHighlight>MAUI Hybrid</ContentHighlight> App and gone through the steps we 
            need to take to ensure <ContentHighlight>native platform features</ContentHighlight> are available in the razor class library. Boom we now have a 
            <ContentHighlight>single codebase running in multiple platforms and devices</ContentHighlight>.
        </p>
    </ContentBody>
</Content>