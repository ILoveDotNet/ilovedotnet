@page "/blogs/blazor-wasm-publishing-to-aws-amplify"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="Blazor"
         FileName=@nameof(PublishingToAWSAmplify)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Publishing</ContentHighlight> Blazor apps to AWS Amplify.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-dockerizing" Match="NavLinkMatch.All">Blazor WASM Dockerizing</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#publishing-to-aws-amplify")" Match="NavLinkMatch.All">
                    Publishing to AWS Amplify
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            With ASP.NET Blazor WebAssembly (WASM) you can create .NET web applications that run completely inside of the browser sandbox. The publish 
            output of a Blazor WASM project are <strong>all static files</strong>. Now that you can run .NET web applications without server-side code, 
            you can deploy these applications to various static site hosts, such as Azure Static Web Apps and AWS Amplify. With the Blazor WebAssembly 
            hosting model:
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>The Blazor app, its dependencies, and the .NET runtime are downloaded to the browser in parallel.</li>
            <li>The app is executed directly on the browser UI thread.</li>
        </ul>

        <h3 id="publishing-to-aws-amplify" class="[ font-semibold text-lg ]">Publishing to AWS Amplify</h3>

        <h4 class="[ font-semibold text-base ]">Prerequisites</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create a Blazor Wasm Project.</li>
            <li>
                <p>
                    Application source code must be inside of a GitHub repository. So, you need to create a local Git repository and commit your 
                    source code to the repository using these commands.
                </p>
                <GithubGistSnippet Title="Create Local Repository" UserId="fingers10" FileName="ba35eed4720d5cc91d6b315a8ee404f1"></GithubGistSnippet>
            </li>
            <li>Create a AWS Account</li>
        </ol>

        <h4 class="[ font-semibold text-base ]">Push Blazor Project to GitHub</h4>

        <p>
            Create a new GitHub repository (<NavLink class="[ underline ]" href="https://docs.github.com/en/github/getting-started-with-github/create-a-repo" target="blank">instructions</NavLink>) 
            and copy the commands to "push an existing repository from the command line" from the empty GitHub repository page, here's what it should looks 
            like but with a different URL:
        </p>

        <GithubGistSnippet Title="Push to GitHub Repository" UserId="fingers10" FileName="f8df74eb610c92a260e42e7e0db22367"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-base ]">Create a AWS Amplify app</h4>

        <p>
            Now that your source code has been pushed to GitHub, you'll need to create a <b>AWS Amplify app</b> that provision your pipeline, build the 
            project and publishes the code to a random <strong>https</strong> URL.
        </p>

        <p>
            Start by navigating to the <b>AWS Amplify</b> and click on <ContentHighlight>Get Started</ContentHighlight>:
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/go to aws amplify.png" loading="lazy" alt="go to aws amplify" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>
        
        <p>
            Clicking that link will take you to the <ContentHighlight>Amplify Hosting</ContentHighlight> section. Now click on <ContentHighlight>Get started</ContentHighlight> 
            under Amplify Hosting Section.
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/host your web app.png" loading="lazy" alt="host your web app" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Now select GitHub as the Git source code provider, and click the "continue" button. Note that you can also use different Git source code providers.
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/github provider.png" loading="lazy" alt="github provider" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            You will be prompted to give AWS Amplify permissions to your GitHub account.
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/authorize and select repo.png" loading="lazy" alt="authorize and select repo" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            When you get back to Amplify, select the GitHub repository you just created and click the <ContentHighlight>next</ContentHighlight> button:
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/add repository branch.png" loading="lazy" alt="add repository branch" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            On the next page, you need to enter the build settings for your project. Click the edit button below the YAML build code:
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/build settings.png" loading="lazy" alt="build settings" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Enter the following YAML code:
        </p>

        <GithubGistSnippet Title="AWS Amplify Build Settings" UserId="fingers10" FileName="c823f67bf7c0392293a5d6e957f39f9c"></GithubGistSnippet>

        <p>
            The above preBuild commands do the following:
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>The <ContentHighlight>npm install</ContentHighlight> command installs npm. This is optional step and I added because this is needed for ilovedotnet repo to build.</li>
            <li>The <ContentHighlight>curl</ContentHighlight> command download a <ContentHighlight>shell script</ContentHighlight> to install dotnet provided by Microsoft.</li>
            <li>The <ContentHighlight>chmod</ContentHighlight> command changes the permission of the shell script to allow execution of the script.</li>
            <li>The <ContentHighlight>dotnet-install.sh</ContentHighlight> script installs the .NET SDK:</li>
            <li>
                <ol class="[ list-decimal ] [ ml-4 ]">
                    <li>
                        <p>
                            The <ContentHighlight>-c</ContentHighlight> argument tells the install script to install .NET version 7.0 which is the version I am using. 
                            Change 7.0 to your version if you're using a different version.
                        </p>
                        <p>
                            <strong>Amplify already has a version of the .NET SDK pre-installed on their build machines, but not necessarily the version you need. That's why 
                            you need to install the correct version.</strong>
                        </p>
                    </li>
                    <li>The <ContentHighlight>-InstallDir</ContentHighlight> argument will instruct the script to install the SDK in a specific directory. In this case it will create a directory called <ContentHighlight>dotnet7</ContentHighlight> and put the SDK there.</li>
                </ol>
            </li>
            <li>The last command will print the version of the .NET SDK to verify the successful installation of the .NET SDK. Note how it is invoking the dotnet CLI from the <ContentHighlight>dotnet7</ContentHighlight> folder where the .NET 7 SDK was installed by the <ContentHighlight>dotnet-install.sh</ContentHighlight>.</li>
        </ol>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            The build command invokes the dotnet publish command using the .NET 7 SDK installed in the <ContentHighlight>dotnet7</ContentHighlight> folder in the preBuild step.
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>The <ContentHighlight>-c</ContentHighlight> argument tells the CLI to build in Release configuration.</li>
            <li>The <ContentHighlight>-o</ContentHighlight> argument tells the CLI to put the output in the release folder.</li>
        </ol>

        <p>
            The <ContentHighlight>artifacts.baseDirectory</ContentHighlight> property is set to <ContentHighlight>/release/wwwroot</ContentHighlight>. This is the location the 
            dotnet publish command put the publish output. As a result, Amplify will deploy all the files found in <ContentHighlight>/release/wwwroot.</ContentHighlight>
        </p>

        <p>
            Save your changes and click on the <ContentHighlight>next</ContentHighlight> button. The next screen will give you an overview of the choices you've made. 
            Click on the <ContentHighlight>Save and deploy</ContentHighlight> button. 
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/review.png" loading="lazy" alt="review" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Your Amplify application will be created and you will be taken to the homepage of your Amplify app.
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/app created.png" loading="lazy" alt="app created" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Now aws will start to provision the process. Here you can see the status in real-time for the branch you selected earlier:
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/deploy.png" loading="lazy" alt="deploy" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Once Amplify finished deploying, visit your Blazor app hosted in Amplify by clicking on the link below the <ContentHighlight>Domain</ContentHighlight> label.
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/complete.png" loading="lazy" alt="complete" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Thats it. Your app will now be deployed in the above mentioned URL with https enabled.
        </p>

        <p>
            Verify the Blazor WASM application is working as expected. Even when you navigate or refresh, the Blazor WASM application is returning as expected. But when you 
            look in the browser developer tools, you will see the page is actually returned with an <ContentHighlight>HTTP status code 404</ContentHighlight>.
        </p>

        <figure>
            <img src="./_content/BlazorDemoComponents/blogs/blazor/wasm/publishing-to-aws-amplify/access via url.png" loading="lazy" alt="access via url" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-base ]">Rewrite all requests to index.html</h4>

        <p>
            To fix the <ContentHighlight>404</ContentHighlight> issues, you need to tell Amplify to rewrite all requests to <ContentHighlight>index.html</ContentHighlight>. Go 
            back to the Amplify console and navigate to the <ContentHighlight>Rewrites and redirects</ContentHighlight> section. There's already one redirect rule pre-configured 
            which matches all requests and return <ContentHighlight>index.html</ContentHighlight> with a <ContentHighlight>404</ContentHighlight> status code.
        </p>

        <p>
            Click the "Edit" button and add the following redirect rule:
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Source address: <ContentHighlight CssClasses="[ break-all ]">&lt;/^[^.]+$|\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json|br|gz|html|md|eot|otf|dll|blat|wasm|dat)$)([^.]+$)/&gt;</ContentHighlight></li>
            <li>Target address: <ContentHighlight>index.html</ContentHighlight></li>
            <li>Type: <ContentHighlight>200 (Rewrite)</ContentHighlight></li>
            <li>click the <ContentHighlight>Save</ContentHighlight> button.</li>
        </ol>

        <p>
            This rule will match all requests except if they end with the listed file extensions. This rule is based on the rule provided by <NavLink class="[ underline ]" target="blank" href="https://docs.aws.amazon.com/amplify/latest/userguide/redirects.html#redirects-for-single-page-web-apps-spa">
            Amplify's documentation "Redirects for single page web apps (SPA)"</NavLink>, but with extra file extensions required by the Blazor WASM application. You can find 
            out all the extensions used in your Blazor WASM application using PowerShell. Open a PowerShell window, publish the Blazor WASM application using the .NET CLI, and 
            the last command will recursively look for all files and list out all unique extensions.
        </p>

        <p>
            When you navigate back to the Blazor WASM application hosted in AWS Amplify, the 404 response codes should now be 200.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-base ]">Configure Domain</h4>

        <p>
            You can also use custom domain to load your blazor wasm app.
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Purachse your custom domain.</li>
            <li>Add your domain name in the domain management section in AWS Amplify configuration.</li>
            <li>After some time your site will be published under your domain.</li>
        </ol>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            Blazor WebAssembly can be served as static files. These files can be hosted in static hosting sites such as AWS Amplify. Using AWS Amplify 
            you can create a app and select GitHub as source provider to automatically deploy the Blazor application to AWS Amplify. Out of the box, when you refresh the Blazor WASM application while not at the root path, Amplify will return the index.html file but with a 404 status code. You can use Amplify's "Rewrites and redirects" functionality to return the index.html file with status code 200 for all requests not requesting a specific list of extensions.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Publishing to AWS Amplify";
    private string Description = "In this post I will teach how to publish your Blazor applications to AWS Amplify. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2023, 5, 21, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2023, 5, 21, 22, 30, 0);
    private string Slug = "blazor-wasm-publishing-to-aws-amplify";
    private string PosterPath = "Blogs/Blazor/Wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(6) { "Publishing", "AWS Amplify", "AWS", "CI/CD", "Continuous Integration", "Continuous Deployment" };
}