@page "/blogs/blazor-wasm-app-settings"
@using BlazorDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content 
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="Blazor"
         FileName=@nameof(AppSettings)>
    <ContentBody>
        <p>
            In this article, let's learn about how to read configuration from <ContentHighlight>app settings</ContentHighlight> in Blazor WASM application.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-dark-theme-and-light-theme">Blazor WASM Dark Theme and Light Theme</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what-is-appsettings-and-why-it-is-needed")" Match="NavLinkMatch.All">
                    What is App Settings and Why it is needed?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#how-to-read-appsettings")" Match="NavLinkMatch.All">
                    How to read App Settings?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#appsettings-in-release-configuration")" Match="NavLinkMatch.All">
                    App Settings in Release Configuration
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#multiple-appsettings-json-configuration")" Match="NavLinkMatch.All">
                    What if we have multiple <ContentHighlight>appsettings.{ENVIRONMENT}.json</ContentHighlight>?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="what-is-appsettings-and-why-it-is-needed" class="[ font-semibold text-lg ]">What is App Settings and Why it is needed?</h3>

        <p>
            App Settings / Configuration (<ContentHighlight>appsettings.json</ContentHighlight>) located inside <ContentHighlight>wwwroot</ContentHighlight> is 
            used to store application related <ContentHighlight>configuration</ContentHighlight> in <abbr title="Java Script Object Notation">JSON</abbr> format 
            and load them in runtime based on environment to read keys/id for consuming any external services or urls for external services or conditionally 
            render UI or change code flow, etc.
        </p>

        <p>
            Blazor WebAssembly loads configuration from the following app settings files by default:
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li><ContentHighlight>wwwroot/appsettings.json</ContentHighlight></li>
            <li><ContentHighlight>wwwroot/appsettings.{ENVIRONMENT}.json</ContentHighlight>, where the {ENVIRONMENT} placeholder is the app's runtime environment</li>
        </ul>

        <p>
            Please note that <ContentHighlight>appsettings.json</ContentHighlight> in blazor wasm is located inside <ContentHighlight>wwwroot</ContentHighlight>. 
            Which means it can be read by anyone on client side. Hence don't store any sensitive information in it.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="how-to-read-appsettings" class="[ font-semibold text-lg ]">How to read App Settings?</h3>

        <p>
            To read the settings / configuration from <ContentHighlight>appsettings.json</ContentHighlight> you need to follow the below steps,
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Inject <ContentHighlight>@@inject IConfiguration configuration</ContentHighlight></li>
            <li>Use injected configuration object to read settings</li>
            <li>
                <ul class="[ list-disc ] [ ml-4 ]">
                    <li>Use <ContentHighlight>configuration.GetValue&lt;string&gt;("{KEY}")</ContentHighlight> to read simple string value</li>
                    <li>Use <ContentHighlight>configuration.GetValue&lt;bool&gt;("{KEY}")</ContentHighlight> to read simple boolean value</li>
                    <li>Use <ContentHighlight>configuration.GetSection("{KEY}")</ContentHighlight> to read section as object</li>
                </ul>
            </li>
        </ol>

        <p>
            Configuration in app settings files are loaded by default. In I ❤️ .NET, a base url, authors value is stored in an app settings file and loaded by 
            the Blazor framework automatically. The value is read by a component.
        </p>

        <GithubGistSnippet Title="Blazor WASM App Settings Configuration" UserId="fingers10" FileName="55930e92551a666355e743242671d185"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Read Settings From Configuration">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>
                    Scenario - Let's try reading configuration from I ❤️ .NET <ContentHighlight>appsettings.json</ContentHighlight>
                </b>
            </p>
            <AppSettingsConfiguration></AppSettingsConfiguration>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="appsettings-in-release-configuration" class="[ font-semibold text-lg ]">App Settings in Release Configuration</h3>

        <p>
            Generally configuration from <ContentHighlight>appsettings.json</ContentHighlight> will be used in production environment. We cannot have all same 
            configuration in all environment. So we can override configuration for different environment using 
            <ContentHighlight>appsettings.{ENVIRONMENT}.json</ContentHighlight>, where the {ENVIRONMENT} placeholder is the app's runtime environment. For 
            example, in I ❤️ .NET <ContentHighlight>baseUrl</ContentHighlight> in development environment will be different from production environment. So in 
            <ContentHighlight>appsettings.development.json</ContentHighlight> will have different 
            <ContentHighlight>"baseUrl": "https://localhost:7176/"</ContentHighlight> value.
        </p>

        <p>
            Other common use case would be, we have an API Key for consuming external service and that endpoint might have rate limiting mechanism in place. 
            If we use the same production Key in development, then we might end up exhausting our consumption limit. To avoid this we can use dummy keys or 
            different keys in development environment by overriding the key value in <ContentHighlight>appsettings.development.json</ContentHighlight>.
        </p>

        <p>
            Now that we have learn't how to use app settings in blazor wasm. We are still left with one more stuff. It is not necessary to bundle all 
            <ContentHighlight>appsettings.{ENVIRONMENT}.json</ContentHighlight> to production. This can be safely removed in 
            <ContentHighlight>Release</ContentHighlight> configuration using the below settings in <ContentHighlight>.csproj</ContentHighlight> file.
        </p>

        <GithubGistSnippet Title="Blazor WASM Project File Configuration" UserId="fingers10" FileName="040e1c9ad3fb10fe1c962e0120e07ba6"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="multiple-appsettings-json-configuration" class="[ font-semibold text-lg ]">What if we have multiple <ContentHighlight>appsettings.{ENVIRONMENT}.json</ContentHighlight>?</h3>

        <p>
            There are scenarios where we might have multiple <ContentHighlight>appsettings.{ENVIRONMENT}.json</ContentHighlight> files. For example, I have a 
            standalone blazor wasm application and it has the following five environments,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Local</li>
            <li>Offline</li>
            <li>Docker</li>
            <li>Development</li>
            <li>Production</li>
        </ul>

        <p>
            In this case, we can set the respective environment in <ContentHighlight>Blazor.start()</ContentHighlight> in 
            <ContentHighlight>index.html</ContentHighlight> file. And make sure respective <ContentHighlight>appsettings.{ENVIRONMENT}.json</ContentHighlight> is 
            bundled in final output. Blazor WASM will automatically load the respective <ContentHighlight>appsettings.{ENVIRONMENT}.json</ContentHighlight> 
            based on the environment set in <ContentHighlight>Blazor.start()</ContentHighlight>. This can be verified by inspecting the network tab of the 
            browser developer tools. To exclude the unnecessary, we can do some small rejex changes in <ContentHighlight>.csproj</ContentHighlight> file in 
            respective pipelines.
        </p>

        <GithubGistSnippet Title="Blazor WASM Environement Setup in App Start" UserId="fingers10" FileName="d63fafe59bbfb28309952c3b731d451f"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>
        
        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            I'm happy that you have reached to the end of this article. Here we learnt what is <ContentHighlight>appsettings</ContentHighlight> and why do we need 
            them. We also saw how to read values from <ContentHighlight>appsettings</ContentHighlight> and how to <ContentHighlight>override</ContentHighlight> 
            values for specific environment and we saw how to <ContentHighlight>bundle</ContentHighlight> appsettings for 
            <ContentHighlight>release</ContentHighlight> configuration in production. Finally we also learnt how to set Blazor environment in using 
            <ContentHighlight>Blazor.start()</ContentHighlight>. Thank you for taking your time to read here. See you in next article.
        </p>
    </ContentBody>
</Content>

@code {
    private string Description = "In this post I will teach you how to read configuration from app settings in your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 2, 27, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2023, 12, 31, 22, 30, 0);
    private string Slug = "blazor-wasm-app-settings";
    private string PosterPath = "Blogs/Blazor/Wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(2) { "App Settings", "App Configuration" };
}