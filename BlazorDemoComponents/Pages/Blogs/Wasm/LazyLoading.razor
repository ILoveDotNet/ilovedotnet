@page "/blogs/blazor-wasm-lazy-loading"
@using BlazorDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         ContentType="@ContentType"
         FileName=@nameof(LazyLoading)>
    <ContentBody>
        <p>
            In this article, let's learn about what is <ContentHighlight>lazy loading</ContentHighlight>, why it is needed and how to implement lazy loading 
            in Blazor WASM application.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-error-logging">Blazor WASM Error Logging</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what-is-lazy-loading-and-why-it-is-needed")" Match="NavLinkMatch.All">
                    What is Lazy Loading and Why it is needed?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#how-to-implement-lazy-loading")" Match="NavLinkMatch.All">
                    How to implement Lazy loading?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="what-is-lazy-loading-and-why-it-is-needed" class="[ font-semibold text-lg ]">What is Lazy Loading and Why it is needed?</h3>

        <p>
            <ContentHighlight>Lazy loading</ContentHighlight> in Blazor WASM helps to <ContentHighlight>defer downloading of assemblies</ContentHighlight> until 
            the route in which the assembly components used are requested by the end user. This helps to <ContentHighlight>improve startup performance</ContentHighlight> 
            of large Blazor WASM applications. This will be more useful in <ContentHighlight>micro-frontends</ContentHighlight> where each micro-frontend is a 
            Blazor WASM application.
        </p>

        <p>
            I ❤️ .NET makes use of lazy loading to load blog related components only when an blog is opened. It makes sense to not load all the components 
            and assemblies when the user just visit the home screen. Thus <ContentHighlight>saving startup time</ContentHighlight> and 
            <ContentHighlight>saving user bandwidth</ContentHighlight> by <ContentHighlight>avoiding unnecessary downloads</ContentHighlight>.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="how-to-implement-lazy-loading" class="[ font-semibold text-lg ]">How to implement Lazy loading?</h3>

        <p>
            To implement lazy loading, we need to follow two steps.
            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>
                    <NavLink class="[ underline ]" href="@($"blogs/{Slug}#project-configuration")" Match="NavLinkMatch.All">
                        <ContentHighlight>Project file</ContentHighlight> configuration
                    </NavLink>
                </li>
                <li>
                    <NavLink class="[ underline ]" href="@($"blogs/{Slug}#router-configuration")" Match="NavLinkMatch.All">
                        <ContentHighlight>Router</ContentHighlight> component configuration
                    </NavLink>
                </li>
            </ol>
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 id="project-configuration" class="[ font-semibold text-base ]">Project file configuration</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>First we need to find the components to be lazy loaded and move them to new assembly <ContentHighlight>(Razor Class Library Project)</ContentHighlight>.</li>
            <li>Next refer this <ContentHighlight>new assembly</ContentHighlight> in the Blazor WASM project.</li>
            <li>Finally add the assembly name with <ContentHighlight>.wasm</ContentHighlight> extension in the Blazor WASM <ContentHighlight>.csproj</ContentHighlight> using <ContentHighlight>BlazorWebAssemblyLazyLoad</ContentHighlight>.</li>
            <li>Repeat step 2 for as many assemblies to be lazy loaded.</li>
        </ol>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <GithubGistSnippet Title="Blazor WASM Lazy Loading Project File Configuration" UserId="fingers10" FileName="9c029a47dc00c262c76da049ee534d91"></GithubGistSnippet>

        <p>
            This will make Blazor framework to prevent the assemblies to be loaded at app launch thus improves the performance.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 id="router-configuration" class="[ font-semibold text-base ]"><ContentHighlight>Router</ContentHighlight> component configuration</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Go to <ContentHighlight>App.razor</ContentHighlight> file.</li>
            <li>Import <ContentHighlight>@@using Microsoft.AspNetCore.Components.WebAssembly.Services</ContentHighlight>.</li>
            <li>Inject <ContentHighlight>@@inject LazyAssemblyLoader AssemblyLoader</ContentHighlight></li>
            <li>In <ContentHighlight>Router</ContentHighlight> component, assign <ContentHighlight>OnNavigateAsync="@@OnNavigateAsync"</ContentHighlight>. This event gets triggered whenever we navigate to new page.</li>
            <li>Now you can conditionally <ContentHighlight>lazy load asssemblies</ContentHighlight> based on route using <ContentHighlight CssClasses="[ break-all ]">await AssemblyLoader.LoadAssembliesAsync(new[] { "Components.wasm" });</ContentHighlight></li>
        </ol>

        <GithubGistSnippet Title="Blazor WASM Lazy Loading Project File Configuration" UserId="fingers10" FileName="f021dd591d91d06dfd47009a801e7587"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Wow. We have completed lazy loading implementation in Blazor WASM application. Now that your Blazor WASM app will <ContentHighlight>start up faster</ContentHighlight> 
            and <ContentHighlight>lazy load assemblies on demand based on route</ContentHighlight> thus <ContentHighlight>increasing speed</ContentHighlight> and 
            <ContentHighlight>saves user bandwidth</ContentHighlight>.
        </p>

        <p>
            Notice that in the network tab only necessary items to load home page will be requested.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/lazy-loading/Home screen of I Love Dotnet.webp" alt="Home screen of I Love Dotnet" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Now on navigating to Blazor Wasm Lazy Loading article, Notice that in the network tab <ContentHighlight>BaseComponents.wasm.br</ContentHighlight> and 
            <ContentHighlight>BlazorDemoComponents.wasm.br</ContentHighlight> will be requested.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/lazy-loading/Lazy Loading of Blazor Demo Components.webp" alt="Lazy Loading of Blazor Demo Components" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            I'm happy that you have reached to the end of this article. We learnt what is <ContentHighlight>lazy loading</ContentHighlight> and why it is needed 
            and how to configure lazy loading in blazor wasm applications. This will benefit a lot in <ContentHighlight>micro-frontend</ContentHighlight> 
            architecture. All these can be validated from <ContentHighlight>network tab</ContentHighlight> of your browser inside 
            <ContentHighlight>i love dotnet</ContentHighlight> site.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "blazor-wasm-lazy-loading";
    private string PosterPath = "Blogs/Blazor/Wasm";
    private string ContentType = "blogs";
}