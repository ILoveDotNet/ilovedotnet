@page "/blogs/blazor-wasm-exception-handling-and-error-boundary"
@using BlazorDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="Blazor"
         FileName=@nameof(ExceptionHandlingAndErrorBoundary)>
    <ContentBody>
        <p>
            In this article, lets learn about <ContentHighlight>exception handling</ContentHighlight> and <ContentHighlight>error boundary</ContentHighlight> 
            in blazor WASM applications.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on 
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-javascript-interop-and-isolation">Blazor WASM Javascript Interop and Isolation</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#global-exception-handling")" Match="NavLinkMatch.All">
                    Global Exception Handling
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#error-boundary")" Match="NavLinkMatch.All">
                    Error Boundary
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#alternative-global-exception-handling")" Match="NavLinkMatch.All">
                    Alternative Global Exception Handling
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            <ContentHighlight>Exceptions</ContentHighlight> are common in all apps. We can handle known exceptions which we expect 
            using <ContentHighlight>try</ContentHighlight> <ContentHighlight>catch</ContentHighlight> blocks. But this cannot be the case always. Some times we 
            might end up in unforeseen run time unhandled exceptions. There are different ways to handle exceptions. Luckily with 
            <ContentHighlight>blazor</ContentHighlight> we have exception handling built in in two different ways.
        </p>

        <GithubGistSnippet Title="Chat component to simulate exception" UserId="fingers10" FileName="c2b5d43dcc0017bafcecd995772f3f69"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="global-exception-handling" class="[ font-semibold text-lg ]">Global Exception Handling</h3>

        <p>
            Blazor has global error handling element <ContentHighlight>@(@"<div id=""blazor-error-ui"">")</ContentHighlight> in <ContentHighlight>index.html</ContentHighlight>. This will act
            as an global error handler which will catch any <ContentHighlight>unhanled exception</ContentHighlight> across blazor app and display nice error UI codesent inside
            <ContentHighlight>@(@"<div id=""blazor-error-ui"">")</ContentHighlight> at the bottom of the screen by default and 
            <ContentHighlight>logs the error stack trace to browser console</ContentHighlight>. This will also have <ContentHighlight>reload</ContentHighlight> 
            option to reload the app to <ContentHighlight>restore</ContentHighlight> the app to correct working state.
        </p>

        <GithubGistSnippet Title="Blazor Global Exception Handling" UserId="fingers10" FileName="57a183a3489acca5760391d728bf712c"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Global Exception Handling">
            <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
            <Chat></Chat>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="error-boundary" class="[ font-semibold text-lg ]">Error Boundary</h3>

        <p>
            Though <ContentHighlight>@(@"<div id=""blazor-error-ui"">")</ContentHighlight> handles all <ContentHighlight>unhandled exceptions</ContentHighlight> 
            it will be <ContentHighlight>nice to restrict the error handling boundary</ContentHighlight> and have better 
            <ContentHighlight>control of the error message and error UI</ContentHighlight>. That said <ContentHighlight>.Net 6</ContentHighlight> 
            introduced <ContentHighlight>@("<ErrorBoundary>")</ContentHighlight> to serve this purpose. We can wrap any component inside 
            <ContentHighlight>@("<ErrorBoundary>")</ContentHighlight> and this will take care of showing error UI when an unhandled exception occurs inside the 
            component.
        </p>

        <GithubGistSnippet Title="Blazor Error Boundary" UserId="fingers10" FileName="b26cd84ae5ee60c935050cc372c7d727"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Error Boundary">
            <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
            <ErrorBoundaryDemo></ErrorBoundaryDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            We can control the error message with our <ContentHighlight>own custom error message and error UI</ContentHighlight> 
            using <ContentHighlight>@("<ErrorContent>")</ContentHighlight>. From now incase of any unhandled exception, our custom error UI will be displayed.
        </p>

        <GithubGistSnippet Title="Blazor Error Boundary with custom Error UI" UserId="fingers10" FileName="de665e941c3efd35ec2115db3c4b1a98"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Error Boundary with Custom Error UI">
            <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
            <ErrorBoundaryWithErrorUIDemo></ErrorBoundaryWithErrorUIDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            So far so good. But doesn't this leave a <ContentHighlight>bad user experience?</ContentHighlight> How will the user retry the action? One way is to 
            <ContentHighlight>reload</ContentHighlight> the page. But there is an another easy option called <ContentHighlight>Recover</ContentHighlight> in 
            <ContentHighlight>ErrorBoundary</ContentHighlight>. All we need to do is to add a reference to Error Boundary and call 
            <ContentHighlight>errorBoundary?.Recover()</ContentHighlight> method to retry the action.
        </p>

        <GithubGistSnippet Title="Blazor Error Boundary with custom Error UI and Recovery" UserId="fingers10" FileName="28dfa506cb0e53f4ce0469f735f89bfe"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Error Boundary with Custom Error UI and Recovery">
            <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
            <ErrorBoundaryWithErrorUIAndRecoveryDemo></ErrorBoundaryWithErrorUIAndRecoveryDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="alternative-global-exception-handling" class="[ font-semibold text-lg ]">Alternative Global Exception Handling</h3>

        <p>
            An alternative to using <ContentHighlight><NavLink class="[ underline ]" href="@($"blogs/{Slug}#error-boundary")">Error boundaries (ErrorBoundary)</NavLink></ContentHighlight> 
            is to pass a custom <ContentHighlight>Error</ContentHighlight> component as a <ContentHighlight>CascadingValue</ContentHighlight>to child components. An 
            advantage of using a component over using an injected service or a custom logger implementation is that a cascaded component can render content and apply 
            <ContentHighlight>CSS</ContentHighlight> styles when an error occurs.
        </p>

        <GithubGistSnippet Title="Error component" UserId="fingers10" FileName="15e50550370685d5c14334e2c057f19e"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Now in the <ContentHighlight>App</ContentHighlight> component, wrap the <ContentHighlight>Router</ContentHighlight> component with the <ContentHighlight>Error</ContentHighlight> 
            component. This permits the <ContentHighlight>Error</ContentHighlight> component to cascade down to any component of the app where the <ContentHighlight>Error</ContentHighlight> 
            component is received as a <ContentHighlight>CascadingParameter</ContentHighlight>. We can then call error processing method <ContentHighlight>ProcessError</ContentHighlight> 
            from <ContentHighlight>Error</ContentHighlight> component to handle error. To learn more about this, head over to 
            <ContentHighlight><NavLink class="[ underline ]" href="blogs/blazor-wasm-error-logging/">Blazor Wasm Error Logging</NavLink></ContentHighlight>.
        </p>

        <GithubGistSnippet Title="Alternative Global Exception Handling" UserId="fingers10" FileName="7e50f51c0b1585d328e3ff804dcf583c"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            I'm happy that you have reached to the end of this article. Here we leant about how <ContentHighlight>global exception handler</ContentHighlight> works in 
            blazor wasm apps and we also learnt how to <ContentHighlight>control exceptions</ContentHighlight> with <ContentHighlight>ErrorBoundary</ContentHighlight> 
            component to give <ContentHighlight>better experience to users with recovery options</ContentHighlight>.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "blazor-wasm-exception-handling-and-error-boundary";
    private string PosterPath = "Blogs/Blazor/Wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
}