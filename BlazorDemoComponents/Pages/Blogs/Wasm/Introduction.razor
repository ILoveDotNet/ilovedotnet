@page "/blogs/blazor-wasm-introduction"
@using BlazorDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         FileName=@nameof(Introduction)>
    <ContentBody>
        <p>
            In this article, let's learn about what is Blazor WASM and why to go for Blazor WASM and how it differs from JavaScript SPA's like 
            Angular, React and Vue.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#how-blazor-idea-was-born")" Match="NavLinkMatch.All">
                    How Blazor idea was born?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#how-web-applications-work")" Match="NavLinkMatch.All">
                    How Web Applications work?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#running-any-code-in-browser")" Match="NavLinkMatch.All">
                    Running any code in browser
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-use-blazor")" Match="NavLinkMatch.All">
                    Why use Blazor?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what-is-blazor")" Match="NavLinkMatch.All">
                    What is Blazor?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#ways-to-develop-blazor-application")" Match="NavLinkMatch.All">
                    Ways to develop Blazor application
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what-is-blazor-web-assembly")" Match="NavLinkMatch.All">
                    What is Blazor Web Assembly?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#benefits-and-drawbacks")" Match="NavLinkMatch.All">
                    Benefits and Drawbacks of Blazor Web Assembly
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="how-blazor-idea-was-born" class="[ font-semibold text-lg ]">How Blazor idea was born?</h3>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/how blazor.png" alt="How Blazor?" class="[ w-full ]" />
        </figure>

        <p>
            Gone are the days where I used to develop server side razor components in ASP.NET MVC or Razor Pages and the other developers around me 
            used to develop client side components in Javascript using Angular, React or Vue. All these JS SPA's were dominating the UI world. And 
            these requires us to master JS(Javascript) or TS(Type Script). I used to wonder why not all these are possible with .NET. Luckily few 
            years later from that point of time, Steve Sanderson (Father of Blazor) from Microsoft introduced the idea of running razor components 
            in browser using web assembly. Thus browser + razor = blazor was born. 
        </p>

        <h3 id="how-web-applications-work" class="[ font-semibold text-lg ]">How Web Applications work?</h3>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/how web applications work.png" alt="How Web Applications work?" class="[ w-full ]" />
        </figure>

        <p>
            Usually we have a business logics built with .NET, JAVA or Node JS running on server to serve the user interaction and needs in browser 
            using client side technologies like Angular, React or Vue. This works well but there is a disconnect between server and client that you 
            cannot reuse server side code with client side code that you use to buld UI. You cannot reuse your skillset and mastering UI framework 
            need a steep learning curve. But nowadays the good news is that you can run any code in browser using Web Assembly. 
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="running-any-code-in-browser" class="[ font-semibold text-lg ]">Running any code in browser</h3>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/running any code in browser.png" alt="Running any code in browser" class="[ w-full ]" />
        </figure>

        <p>
            Web Assembly is a way to run byte code in browser inside the javascript runtime sandbox. You can compile any code (C#) to Web Assembly byte 
            code and run inside browser in a near native speed without any plugin and that is because Web Assembly is part of all major browsers 
            including mobile browsers. Yep we can run C# in browser. It works by having .NET runtime compiled into WA byte code and this .NET runtime can 
            run any .NET assemblies.
        </p>

        <h3 id="why-use-blazor" class="[ font-semibold text-lg ]">Why use Blazor?</h3>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/why use blazor.png" alt="Why use blazor?" class="[ w-full ]" />
        </figure>

        <p>
            Why should we still go for blazor? that's because,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>WA is part of all major browsers including mobile browsers.</li>
            <li>We can reuse our skill set with C# which is a strongly typed (unlike Javascript) and evolving language.</li>
            <li>We can resue Nuget libraries as long as they are part of .NET standard.</li>
            <li>Performance is near native and over and above for image processing, browser based games and graphics/video editing.</li>
            <li>We have an unmatched tooling (Visual Studio / Visual Studio Code) support backed by Microsoft.</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="what-is-blazor" class="[ font-semibold text-lg ]">What is Blazor?</h3>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/what is blazor 1.png" alt="What is blazor?" class="[ w-full ]" />
        </figure>

        <p>
            Blazor application consists of razor components from ASP.NET which contains HTML, CSS and C# to make a website up and run. You can see 
            Dialog.razor component which contains a button and on click of it OnYes event will be invoked. We can also nest component like how we have 
            Dialog.razor component inside Index.razor component.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/what is blazor 2.png" alt="What is blazor?" class="[ w-full ]" />
        </figure>

        <p>
            When Blazor application is built, it produces .NET standard assemblies (.dlls) which will be converted to Web Assembly byte having .wasm 
            extension by the .NET runtime. This will have all the necessary dependencies and .dlls like System.dll, Microsoft.AspNet.dll and ofcourse 
            your blazor app .dll to run blazor app in browser.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/what is blazor 3.png" alt="What is blazor?" class="[ w-full ]" />
        </figure>

        <p>
            In browser, .NET runs in Web Assembly and Web Assembly runs in Javascript runtime sandbox just like any other JS code. Here it runs the .NET 
            like mono.wasm which runs the dlls of your app. As this runs in Javascript runtime, you can get access to browser capabilities like Web Sockets, 
            File API, other capabilities and DOM which is used to update UI. This can also interact with other JS code which means you can call JS from .NET 
            and JS can call .NET methods.
        </p>

        <h3 id="ways-to-develop-blazor-application" class="[ font-semibold text-lg ]">Ways to develop Blazor application</h3>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/ways to develop blazor application.png" alt="Ways to develop blazor application" class="[ w-full ]" />
        </figure>

        <p>
            The most common ways to develop blazor apps is by using,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Visual Studio</li>
            <li>Visual Studio Code</li>
            <li>.NET CLI</li>
            <li>Jetbrains Rider</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="what-is-blazor-web-assembly" class="[ font-semibold text-lg ]">What is Blazor Web Assembly?</h3>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/what is blazor web assembly.png" alt="What is blazor Web Assembly?" class="[ w-full ]" />
        </figure>

        <p>
            Blazor Web Assembly is one of the architecture that you can use to build your blazor web application. Blazor Web Assembly is a kind of 
            blazor that runs in client in browser. When the blazor app loads, it downloads everything needed to run inside browser. This includes 
            HTML, CSS, images and sometimes JS files along with all .NET .dll's and complete .NET runtime that is converted into Web Assembly byte 
            code. It consists of all static assets and no server connection is needed to run the app. This means it can be server from,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>CDN as static content</li>
            <li>Server</li>
            <li>Azure Static Storage Website</li>
            <li>GitHub Pages</li>
        </ul>

        <h3 id="benefits-and-drawbacks" class="[ font-semibold text-lg ]">Benefits and Drawbacks of Blazor Web Assembly</h3>

        <figure>
            <img src="./image/blogs/blazor/wasm/introduction/benefits and drawbacks of blazor web assembly.png" alt="Benefits and Drawbacks of blazor Web Assembly" class="[ w-full ]" />
        </figure>

        <p>
            The benefits are,
        </p>
        
        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Near native performance or exceptional performance for browser based games, image processing or video editing.</li>
            <li>Can work offline.</li>
            <li>No server neede. A technology to serve static file is enough.</li>
            <li>Makes completed use of client side resources.</li>
            <li>Runs in all modern browsers.</li>
        </ul>

        <p>
            The drawbacks are,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Restricted to capabilities of browser.</li>
            <li>Browser does all the work.</li>
            <li>Longer load time when there is more to download.</li>
            <li>Not able to maintain client side secrets.</li>
            <li>Web Assembly is required.</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            Blazor Web Assembly is a incredibly powerful SPA from ASP.NET family which is used to build web apps using HTML, CSS and C# instead of 
            JavaScript. This runs completely inside browser using Web Assembly without a need for server. It can work offline and gives near native 
            performance. This can be used for browser based game development, image/video processing to give unmatched performance. Above all it is 
            opensource and backed by Microsoft and .NET community.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "blazor-wasm-introduction";
    private string PosterPath = "Blogs/Blazor/Wasm";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
}