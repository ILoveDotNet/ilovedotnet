@page "/blogs/oops-encapsulation"
@using OOPSDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="OOPS"
         FileName=@nameof(Encapsulation)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Encapsulation</ContentHighlight> in Object Oriented Programming.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what-is-encapsulation")" Match="NavLinkMatch.All">
                    What is Encapsulation?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#how-encapsulation-helps-to-enforce-invariants")" Match="NavLinkMatch.All">
                    How Encapsulation helps to Enforce Invariants?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#how-to-introduce-encapsulation")" Match="NavLinkMatch.All">
                    How to introduce Encapsulation?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="what-is-encapsulation" class="[ font-semibold text-lg ]">What is Encapsulation?</h3>

        <p>
            We often hear that Encapsulation means <ContentHighlight>Information hiding</ContentHighlight> and <ContentHighlight>Bundling of data and operations</ContentHighlight>. 
            Although these two techniques help achieve encapsulation they themselves are not the definition of Encapsulation. So what it is then? Encapsultion 
            is the act of protecting data integrity. A class is properly encapsulated when its internal data cannot be set to invalid or inconsistent state. As I 
            mentioned <ContentHighlight>Information hiding</ContentHighlight> and <ContentHighlight>Bundling of data and operations</ContentHighlight> helps to achieve 
            that.
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li><ContentHighlight>Information hiding</ContentHighlight> - Less risk of corrupting the class's internal</li>
            <li><ContentHighlight>Bundling of data and operations</ContentHighlight> - Perform integrity checks before modifying the data such that there is a single entry point to do actions</li>
        </ul>

        <p>
             Let's see how to model and Encapsulate a class properly such that it doesn't bring the class to inconsistent state.
        </p>

        <h3 id="how-encapsulation-helps-to-enforce-invariants" class="[ font-semibold text-lg ]">How Encapsulation helps to Enforce Invariants?</h3>

        <p>
            You can also think of Encapsulation as invariants. Each class will have its own set of invariants that must be held true at all times. Your responsibility 
            as a software developer is to maintain the invariants and the best way to do so is encapsulate your classes so that it wont give you a chance to violate that.
        </p>

        <p>
            For example, there could be <ContentHighlight>class</ContentHighlight> Square in your application. This class represents a concept that could have 4 edges 
            <ContentHighlight>edges.Length == 4</ContentHighlight>. This could should always be true for all the squares. The Square class looks like the below code.
        </p>

        <GithubGistSnippet Title="OOPS Encapsulation Example" UserId="fingers10" FileName="58216f588706e42bc632d9f55c2fe30d"></GithubGistSnippet>

        <p>
            This class is not properly encapsulated because there is nothing preventing us from creating an instance which has two edges (line) or three edges (triangle).
        </p>

        <GithubGistSnippet Title="Not properly Encapsulated" UserId="fingers10" FileName="0d7fe3e50211bce67fea33c5a0e77e91"></GithubGistSnippet>

        <DemoSnippet Title="Not properly Encapsulated">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>
                    Scenario - Let's try creating a square class that violates invariant <ContentHighlight>edges.Length == 4</ContentHighlight>.
                </b>
            </p>
            <NotProperlyEncapsulated></NotProperlyEncapsulated>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="how-to-introduce-encapsulation" class="[ font-semibold text-lg ]">How to introduce Encapsulation?</h3>

        <p>
            How to fix the above violation? Let's try to introduce Encapsulation in <ContentHighlight>class Square</ContentHighlight> such that it will not allow 
            us to violate the invariant. To prevent instances of this class from entring invalid state, we can add a <ContentHighlight>Guard Clause</ContentHighlight> 
            in this class's constructor. With this check we can throw an exception when a Square is created with incorrect number of edges. This version of class is 
            now properly Encapsulated because it protects itself from having fewer or more than 4 edges.
        </p>

        <GithubGistSnippet Title="Properly Encapsulated" UserId="fingers10" FileName="25d573b415173245c0050941cf49f307"></GithubGistSnippet>

        <DemoSnippet Title="Properly Encapsulated">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>
                    Scenario - Let's try creating a square class that violates invariant <ContentHighlight>edges.Length == 4</ContentHighlight>.
                </b>
            </p>
           <ErrorBoundary @ref="@errorBoundary">
                <ChildContent>
                    <ProperlyEncapsulated></ProperlyEncapsulated>
                </ChildContent>
                <ErrorContent>
                    <div class="[ bg-red-500 ]">
                        <p class="[ text-white ]">Square must have 4 edges.</p>
                    </div>
                </ErrorContent>
            </ErrorBoundary>

            <button type="button" class="[ bg-fuchsia-500 ] [ text-white ] [ px-4 py-2 ] [ rounded-md ] [ text-white ]" @onclick="Recover">
                Click to try again
                <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-activity ] [ inline ]" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                    <path d="M3 12h4l3 8l4 -16l3 8h4"></path>
                </svg>
            </button>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this post, we learn't what is encapsulation in oops and the principle behind it. Encapsulation is the act of protecting data integrity. A class is properly Encapsulated when its 
            internal data cannot be set to invalid or inconsistent state. The conditions that define the class state as valid are called invariants and must be held true at all the times. The 
            two techniques that help to achieve Encapsulation are Information hiding and Bundling data and operations together. The purpose of Encapsulation is to reduce the metal burden 
            required to maintain data consistency. Encapsulation and Abstraction are highly interconnected but still have a different principle. In our next article we'll learn what is 
            <NavLink class="[ underline ]" href="blogs/oops-abstraction">abstraction</NavLink>.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "oops-encapsulation";
    private string PosterPath = "Blogs/OOPS";
    private string Channel = "oops";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("OOPS", StringComparison.CurrentCultureIgnoreCase));

    private ErrorBoundary errorBoundary = default!;

    private void Recover()
    {
        errorBoundary?.Recover();
    }
}