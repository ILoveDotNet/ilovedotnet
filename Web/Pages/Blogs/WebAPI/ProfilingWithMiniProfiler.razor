@page "/blogs/profiling-webapi-with-mini-profiler"
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(ProfilingWithMiniProfiler)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Mini Profiler</ContentHighlight> in <ContentHighlight>WebAPI</ContentHighlight> in ASP.NET Core.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-miniprofiler")" Match="NavLinkMatch.All">
                    Why MiniProfiler?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#steps")" Match="NavLinkMatch.All">
                    Steps
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#persisting-profiling-data-in-database")" Match="NavLinkMatch.All">
                    Persisting Profiling Data in Database
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#authorization")" Match="NavLinkMatch.All">
                    Authorization
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#useful-configurations")" Match="NavLinkMatch.All">
                    Useful Configurations
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            MiniProfiler is a simple but effective library and UI for profiling your application. Mini profiler provides an ADO.NET profiler, capable of profiling calls on raw ADO.NET 
            (SQL Server, Oracle, etc), LINQ-to-SQL, Entity Framework (including Code First and EF Core), and a range of other data access scenarios. Mini profiler also helps to profile code 
            paths explicitly using steps.
        </p>

        <h3 id="why-mini-profiler" class="[ font-semibold text-lg ]">Why MiniProfiler?</h3>

        <p>
            Miniprofiler helps to quickly configure and identify performance issues in your code base. There are many tools available for profiling application during development but it can be 
            challenging to use those tools specially in production environment. MiniProfiler is a very lightweight, opensourced, stable and easy to use profiling library for ASP.Net 
            applications which can profile dotnet application during runtime without change to the environment and effect on the application. It is maintained and backed by STackOverflow 
            and used in StackExchange family of sites.
        </p>

        <p>
            MiniProfiler profiles each and every part of your code starting from filters to model binding and from controller execution to database calls.
        </p>

        <h3 id="steps" class="[ font-semibold text-lg ]">Steps</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Install <ContentHighlight>MiniProfiler.AspNetCore.Mvc</ContentHighlight> and <ContentHighlight>MiniProfiler.EntityFrameworkCore</ContentHighlight> Nuget Packages.</li>
            <li>Add <ContentHighlight>AddMiniProfiler</ContentHighlight> services to dependency injection container.</li>
            <li>Configure <ContentHighlight>app.UseMiniProfiler()</ContentHighlight> to the request pipeline.</li>
        </ol>

        <p>

        </p>

        <h3 id="persisting-profiling-data-in-database" class="[ font-semibold text-lg ]">Persisting Profiling Data in Database</h3>

        <p>

        </p>

        <h3 id="authorization" class="[ font-semibold text-lg ]">Authorization</h3>

        <p>

        </p>

        <h3 id="useful-configurations" class="[ font-semibold text-lg ]">Useful Configurations</h3>

        <p>

        </p>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to profile performance issues in ASP.NET Core WebAPI using Miniprofiler and we also learnt how to persist data in database and how to configure 
            authorization. We also saw some bonus tips to simplify and remove unnecessary routes from getting profiled.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Profiling Web API with Mini Profiler";
    private string Description = "In this post I will teach you how to profile Web API with Mini Profiler. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 9, 18, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 9, 18, 22, 30, 0);
    private string Slug = "profiling-webapi-with-mini-profiler";
    private string PosterPath = "Blogs/WebAPI";
    private string Channel = "webapi";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("WebAPI", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(2) { "Profiling", "Mini Profiler" };
}