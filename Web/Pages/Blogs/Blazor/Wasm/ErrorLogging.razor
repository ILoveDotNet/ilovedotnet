@page "/blogs/blazor-wasm-error-logging"
@using Web.Pages.Blogs.Blazor.Wasm.Demo
@using Humanizer
@inject IConfiguration configuration
@inject TableOfContents tableOfContents

<ContentHead Title=@Title
             Description=@Description
             CreatedOn=@CreatedOn
             ModifiedOn=@ModifiedOn
             Slug=@Slug
             Keywords=@Keywords>
</ContentHead>

<section class="[ flex flex-col md:flex-row ] [ p-5 md:px-20 ] [ space-x-5 ]">
    <article class="[ md:basis-4/5 ] [ space-y-5 ]">
        <header class="[ space-y-2 ]">
            <figure>
                <img srcset="@($"image/blogs/blazor/wasm/{Slug}-400w.svg 400w,image/blogs/blazor/wasm/{Slug}-1200w.svg 1200w"))"
                     sizes="(max-width: 400px) 480px,1200px"
                     alt="@Title" class="[ w-full ]" loading="lazy" />
            </figure>
            <h2 class="[ dark:text-white ] [ font-semibold text-xl ]">@Title</h2>
            <section class="[ flex flex-col md:flex-row justify-between ] [ space-y-1 md:space-y-0 ] [ dark:text-white ] [ font-bold ]">
                <div>
                    <p>Authors - <a href="@(configuration.GetValue<string>("authors:Abdul Rahman"))" class="[ underline ]" target="_blank">Abdul Rahman (Content Writer)</a>, <a href="@(configuration.GetValue<string>("authors:Regina Sharon"))" class="[ underline ]" target="_blank">Regina Sharon (Graphic Designer)</a></p>
                    <time datetime="@ModifiedOn.ToString("yyyy-MM-dd HH:mm:ss")">Last updated @ModifiedOn.Humanize()</time>
                </div>
                <div>
                    <SocialShare Url="@($"{BaseUrl}blogs/{Slug}/")"></SocialShare>
                </div>
            </section>
        </header>
        <section class="[ dark:text-white ] [ space-y-2 ] [ leading-relaxed ]">
            <p>
                In our previous article <NavLink class="[ underline ]" href="@($"{BaseUrl}blogs/blazor-wasm-exception-handling-and-error-boundary")">Blazor WASM Exception Handling and Error Boundary</NavLink>, 
                we learnt how global exception works and how to handle exceptions using built in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">ErrorBoundary</code> 
                component. In this article, let's talk learn about Error Logging in Blazor WASM.
            </p>

            <p>
                Logging is needed in all applications. This will help to find root cause or track user activity in any environment.
                This can be done easily in server side applications with logging frameworks but for <abbr title="Single Page Application">SPA</abbr> 
                like <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Blazor <abbr title="Web Assembly">WASM</abbr></code> running in browser sandbox,
                we will not be having direct access to file system or database and logging cannot be done like how we do in server side applications. We can use 
                browser console to log <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Information</code>, 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Warning</code> or 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Error</code>. But this will not help much in production. 
                We can still make logging happen in production by processing <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Exception</code> and posting the error details to backend API. 
                Let's look on how to achieve this in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Blazor <abbr title="Web Assembly">WASM</abbr></code>. 
            </p>

            <p>
                Let's start with simple <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Subscription</code> component. 
                This will throw error on <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Subscribe Now</code> button click.
            </p>

            <GithubGistSnippet Title="Subscribe component to simulate exception" UserId="fingers10" FileName="63b860184af61f1d0274e1eb06e28151"></GithubGistSnippet>

            <p>
                To process the error, let's create an <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Error</code> component.
                This component takes Child Content <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">RenderFragment</code> as input.
                This component also has <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">ProcessError</code> method to process the 
                exception and log it to <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">browser console</code> or 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">backend API</code>. For simplicity I'm logging into browser console.
            </p>

            <GithubGistSnippet Title="Error component to log exception" UserId="fingers10" FileName="15e50550370685d5c14334e2c057f19e"></GithubGistSnippet>

            <p>
                Now lets wrap our <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Subscription</code> component with 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Error</code> component.
            </p>

            <GithubGistSnippet Title="Blazor Error logging with Error Component" UserId="fingers10" FileName="87f6fd800d66d3162e69eabbea5f8aec"></GithubGistSnippet>

            <p>
                That's it. Now if any exception occurs, <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Sunscription</code> component 
                will make use of <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">CascadingParameter Error</code> component and process 
                the exception which then can be used to log to browser console or posted to backend API.
            </p>

            <DemoSnippet Title="Error Logging">
                <DemoContent>
                    <p class="[ text-black ] [ dark:text-white ]">
                        <b>
                            Scenario - Let's simulate an error logging when subscribing. Don't forget to check the browser console after clicking the 
                            below button
                        </b>
                    </p>
                    <Error>
                        <Subscription></Subscription>
                    </Error>
                </DemoContent>
            </DemoSnippet>
        </section>
    </article>
    <aside class="[ flex flex-col md:basis-1/5 ] [ space-y-2 ]">
        @foreach (var content in tableOfContents.Contents.Where(content => content.Title != Title))
        {
             <Thumbnail PosterUrl="@content.PosterUrl" 
                    ContentUrl="@content.ContentUrl"
                    Title="@content.Title"
                    AltText="@content.Title"
                    IconUrl="@content.IconUrl"
                    IconAlt="@content.Type"
                    CreatedOn="@content.CreatedOn"
                    Author="@content.Author"
                    Swap=true>
            </Thumbnail>           
        }
    </aside>
</section>

@code {
    private string Title = "Blazor WASM Error Logging";
    private string Description = "In this post I will teach you how to log error in your Blazor applications. All with live working demo.";
    private string BaseUrl => configuration.GetValue<string>("baseUrl");
    private DateTime CreatedOn = new DateTime(2022,1,23,22,30,0);
    private DateTime ModifiedOn = new DateTime(2022,1,23,22,30,0);
    private string Slug = "blazor-wasm-error-logging";
    private List<string> Keywords = new(2) { "Exception Logging", "Error Logging" };
}