@page "/blogs/blazor-wasm-dark-theme-and-light-theme"
@using BlazorDemoComponents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         Keywords=@Keywords>
    <ContentBody>
        <p>
            Dark Mode or Theme has become common nowadays. Almost all the operating system, apps and websites started supporting Dark Mode
            as first class feature as it gives a pleasing experience to eyes when reading or using the app at night time. So it's time to
            design dark version of apps or website to go along with the default design. Let's see how we can implement this in Blazor application.
        </p>

        <p>
            First, lets have a <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">enum</code>
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">DisplayMode</code> to represent different display modes.
            Next, we need the help of <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Javascript</code> here to add
            respective <abbr title="Cascading Style Sheet">CSS</abbr> class to our document based on the option we select. We can select
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Light</code> mode,
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Dark</code> mode or
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">System</code> mode to let it detect based on operating
            systems default display mode.
        </p>

        <GithubGistSnippet Title="Display Theme Component to toggle Display Mode" UserId="fingers10" FileName="61c1c376a14a8126935ca276aaae6dbf"></GithubGistSnippet>

        <p>
            When we click on button to set theme or mode, <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">SetTheme(DisplayMode displayMode)</code>
            method is called by <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Blazor</code> which in turn will use
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">JavaScript</code> to call
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">onDisplayModeChanged</code> function. If the selected
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">DisplayMode</code> is
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Dark</code> or
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">System</code> and if the operation system has dark theme enabled? then we can set
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">dark</code> CSS Class to <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">HTML</code>
            document and store the user preference in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Local Storage</code> to retain it for
            next time when the user visits our app.
        </p>

        <p>
            If the user has selecetd <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Light</code>
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">DisplayMode</code> then we can remove the
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">dark</code> CSS Class from the
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">HTML</code> document and also remove the entry from
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Local Storage</code>.
        </p>

        <GithubGistSnippet Title="Javascript function to store and toggle CSS class" UserId="fingers10" FileName="5064bb598d94a8d37b624ac4029b7295"></GithubGistSnippet>

        <p>
            Now that all set, we need to make sure to load the user preference when the user visits our site anytime in future. For this we
            can again use small <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Javascript</code> on page load in our
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">index.html</code> to check if the
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Local Storage</code> entry has
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">DisplayMode</code> key with
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">dark</code> value or we can check if the operating system
            supports <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Dark</code> mode. In both case we can add
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">dark</code> CSS class back to
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">HTML</code> document. If both the above cases are not met then,
            we can leave it to default light theme.
        </p>

        <GithubGistSnippet Title="Javascript to toggle display mode CSS class on page load" UserId="fingers10" FileName="ceee90f0cd2a5db2e2fd12ea27f63e1d"></GithubGistSnippet>

        <p>
            Time for a live demo. Try with below demo and make sure to inspect and see how CSS classed are toggled in
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">HTML</code> along with
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Local Storage</code> changes.
        </p>

        <DemoSnippet Title="Display Mode">
            <DemoContent>
                <p class="[ text-black ] [ dark:text-white ]">
                    <b>
                        Click on one of the display mode and see how the I ❤️ DotNet responds.
                    </b>
                </p>
                <DisplayTheme></DisplayTheme>
            </DemoContent>
        </DemoSnippet>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Dark Theme and Light Theme";
    private string Description = "In this post I will teach you how to toggle dark mode and light mode in your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 1, 30, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 1, 30, 22, 30, 0);
    private string Slug = "blazor-wasm-dark-theme-and-light-theme";
    private List<string> Keywords = new(4) { "Dark Mode", "Light Mode", "Dark Theme", "Light Theme" };
}