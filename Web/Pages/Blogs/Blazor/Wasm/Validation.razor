@page "/blogs/blazor-wasm-forms-validation"
@using BlazorDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents>
    <ContentBody>
        <p>
            In this article, let's learn about how to validate the data collected using forms in Blazor WASM application.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on 
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-forms">Blazor Wasm Forms</NavLink>.
        </p>        

        @*https://blazor-university.com/forms/validation/*@
        @*https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation?view=aspnetcore-6.0*@

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>
        
        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why")" Match="NavLinkMatch.All">
                    Why Validation?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introducing-dataannotationsvalidator")" Match="NavLinkMatch.All">
                    Introducing DataAnnotationsValidator
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#displaying-error-messages")" Match="NavLinkMatch.All">
                    Displaying Error Messages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#fluent-validations")" Match="NavLinkMatch.All">
                    Fluent Validations
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#handling-form-submission")" Match="NavLinkMatch.All">
                    Handling Form Submission
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="why" class="[ font-semibold text-lg ]">Why Validation?</h3>

        <p>
            Validation is the act of checking the validity of data. It is a very important part of the form validation process. We should always validate the 
            user data before submitting it to the server. Validation can be from simple data format validation to complex business validations. Simple data 
            format validations like checking email format can be done in client side while checking email uniquness in system can be done in server side. 
            Processing the raw data can sometime allow an attacker to exploit our systems. Hence it is always recommended to validate the data before processing.
        </p>

        <h3 id="introducing-dataannotationsvalidator" class="[ font-semibold text-lg ]">Introducing DataAnnotationsValidator</h3>

        <p>
            The <ContentHighlight>DataAnnotationsValidator</ContentHighlight> is the standard validator type in Blazor. Adding this component within an 
            <ContentHighlight>EditForm</ContentHighlight> component will enable form validation based on .NET Data Annotation attributes
        </p>

        <GithubGistSnippet Title="EditForm With Model Demo" UserId="fingers10" FileName="3c1af0fb93f6e8a80e22985d739dbd05"></GithubGistSnippet>

        <DemoSnippet Title="EditForm With Model Demo">
            <p class="[ text-black ] [ dark:text-white ]">
                The following form accepts user input using:
            </p>
            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>The properties defined in the preceding Starship model.</li>
                <li>Several of Blazor's built-in form components.</li>
                <li>
                    The EditForm in the example creates an EditContext based on the assigned Starship instance 
                    <ContentHighlight>(Model="@@starship")</ContentHighlight> and handles a valid form.
                </li>
                <li>Message is printed on submit.</li>
            </ol>
            <br />
            <div>
                <ValidationDemo></ValidationDemo>
            </div>
        </DemoSnippet>
        
        <h3 id="displaying-error-messages" class="[ font-semibold text-lg ]">Displaying Error Messages</h3>

        <p>
            
        </p>
        
        <h3 id="fluent-validations" class="[ font-semibold text-lg ]">Fluent Validations</h3>
        
        <p>
            
        </p>

        <h3 id="handling-form-submission" class="[ font-semibold text-lg ]">Handling Form Submission</h3>

        <p>
            When the user submits the form, the EditForm component calls the <ContentHighlight>EditForm.OnSubmit</ContentHighlight> event handler.
            This event handler is passed the EditContext as a parameter. The EditContext provides access to the EditForm's model and the form's
            current state.
        </p>

        <p>
            The EditForm provides the following callbacks for handling form submission:
        </p>

        <ul class="[ list-decimal ] [ ml-4 ]">
            <li>Use <ContentHighlight>OnValidSubmit</ContentHighlight> to assign an event handler to run when a form with valid fields is submitted.</li>
            <li>Use <ContentHighlight>OnInvalidSubmit</ContentHighlight> to assign an event handler to run when a form with invalid fields is submitted.</li>
            <li>
                Use <ContentHighlight>OnSubmit</ContentHighlight> to assign an event handler to run regardless of the form fields' validation status. 
                The form is validated by calling <ContentHighlight>EditContext.Validate</ContentHighlight> in the event handler method. If Validate 
                returns true, the form is valid.
            </li>
        </ul>
        
        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learn't how to validate data collected using <ContentHighlight>Forms</ContentHighlight> in blazor application using various 
            techniques and how to display the error messages feedback to user.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Forms Validation";
    private string Description = "In this post I will teach how to validate data collected in forms in your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 6, 5, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 6, 5, 22, 30, 0);
    private string Slug = "blazor-wasm-forms-validation";
    private string PosterPath = "blogs/blazor/wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(2) { "Forms", "Validation" };
}