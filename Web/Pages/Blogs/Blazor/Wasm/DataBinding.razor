@page "/blogs/blazor-wasm-data-binding"
@using BlazorDemoComponents
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents>
    <ContentBody>
        <p>
            In previous article, we learnt what is components in blazor. if you are new to blazor, I strongly recommend you to check out my article on
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-introduction">Blazor Wasm Introduction</NavLink> and
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-components">Blazor Wasm Components</NavLink>. If you are familiar with blazor and components, 
            you can skip introdution and continue with this article.
        </p>

        <h3 class="[ font-semibold text-lg ]">Why Data Binding in blazor components?</h3>

        <p>
            Gone are the days we used to make an ajax post from UI and bind data in our code behind or in controllers. We also have used form submit 
            and get the data in code behind or in controllers by reading from form like <ContentHighlight>formName["inputName"]</ContentHighlight>. Now 
            <ContentHighlight>Data Binding</ContentHighlight> in blazor components helps us to bind data to an input element using Razor directive attribute 
            with field, property, or Razor expression value. 
        </p>

        <p>There are two ways of data binding,</p>
        
        <ul class="[ list-disc ] [ ml-4 ]">
            <li>One Way / Uni Directional Data Binding.</li>
            <li>Two Way / Bi Directional Data Binding.</li>
        </ul>

        <h3 class="[ font-semibold text-lg ]">One Way / Uni Directional Data Binding</h3>
        
        <p>
            One way / Uni Directional data binding is used to bind data to <ContentHighlight>field</ContentHighlight> or <ContentHighlight>property</ContentHighlight> 
            in uni directional flow. This means that user will not be able to directly modify the value. It can be done only as a result of user action or 
            event such as button click.
        </p>

        <p>
            This can be useful to set a label value dynamically or to set a css class value or to set a value to a hidden field.
        </p>

        <p>The razor syntax for that is <ContentHighlight>@@bind</ContentHighlight></p>

        <GithubGistSnippet Title="One Way Data Binding" UserId="fingers10" FileName="3b2638cb48b804b676e9a69da26de402"></GithubGistSnippet>

        <DemoSnippet Title="One Way Data Binding">
            <p class="[ text-black ] [ dark:text-white ]">
                This example binds an <ContentHighlight>Title</ContentHighlight> property value to the "I ❤️ .NET" and the value can be updated on button click by user.
            </p>
            <br />
            <OneWayDataBinding></OneWayDataBinding>
        </DemoSnippet>

        <h3 class="[ font-semibold text-lg ]">Two Way / Bi Directional Data Binding</h3>

        <p>
            Two way / Bi Directional data binding is used to bind data to <ContentHighlight>field</ContentHighlight> or <ContentHighlight>property</ContentHighlight> 
            in bi directional flow. Thus allowing values to be updated from both sides.
        </p>

        <p>
            This will be useful to bind data to a form inputs which you can use to collect data from user. You can also use <ContentHighlight>@@oninput</ContentHighlight> 
            bind event to bind data instantaneously. This can be used in search input to instantaneously search data and list to user.
        </p>

        <p>
            The razor syntax for that is,
            <ul class="[ list-disc ] [ ml-4 ]">
                <li><ContentHighlight>@@bind-value=Property</ContentHighlight></li>
                <li><ContentHighlight>@@bind-value=Property @@bind-value:event="onevent"</ContentHighlight></li>
            </ul>
        </p>

        <GithubGistSnippet Title="Two Way Data Binding" UserId="fingers10" FileName="fd96769774755f830a549ee57057bcb4"></GithubGistSnippet>

        <DemoSnippet Title="Two Way Data Binding">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>
                    The following demo binds:
                </b>
            </p>
            <ul class="[ list-disc ] [ ml-4 ]">
                <li>
                    An <ContentHighlight>&lt;input&gt;</ContentHighlight> element value to the C# <ContentHighlight>inputValue</ContentHighlight> field.
                    When an <ContentHighlight>&lt;input&gt;</ContentHighlight> element loses focus, its bound field or property is updated. This means by default 
                    value will be updated using <ContentHighlight>@@onchange</ContentHighlight> event.
                </li>
                <li>
                    A second <ContentHighlight>&lt;input&gt;</ContentHighlight> element value to the C# <ContentHighlight>InputValue</ContentHighlight> property.
                    When the use gives input value by typing for second <ContentHighlight>&lt;input&gt;</ContentHighlight> its bound field or property is updated 
                    instantaneously. This is because value will be updated using <ContentHighlight>@@oninput</ContentHighlight> event.
                </li>
            </ul>
            <p class="[ text-black ] [ dark:text-white ]">
                
            </p>
            <br />
            <TwoWayDataBinding></TwoWayDataBinding>
        </DemoSnippet>
        
        <h3 class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learn't about what is data binding (both one way and two way) in blazor components and experienced a live demo. In our next
            article let's learn about what is event callback and how to communicate between components.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Data Binding";
    private string Description = "In this post I will teach what is data binding and how to pass data to components in your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 4, 24, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 4, 24, 22, 30, 0);
    private string Slug = "blazor-wasm-data-binding";
    private string PosterPath = "blogs/blazor/wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(3) { "Data Binding", "One Way Binding", "Two Way Binding" };
}