@page "/blogs/blazor-wasm-app-settings"
@using BlazorDemoComponents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         TotalContents=@TotalContents>
    <ContentBody>
        <p>
            In this article, let's learn about how to read configuration from app settings in Blazor WASM application.
        </p>

        <h3 class="[ font-semibold text-lg ]">What is App Settings and Why it is needed?</h3>

        <p>
            App Settings / Configuration (<code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.json</code>) located
            inside <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">wwwroot</code> is used to store application related
            configuration in <abbr title="Java Script Object Notation">JSON</abbr> format and load them in runtime based on environment to read
            keys/id for consuming any external services or urls for external services or conditionally render UI or change code flow, etc.
        </p>

        <p>
            Blazor WebAssembly loads configuration from the following app settings files by default:
        </p>

        <ul class="[ list-disc ] [ ml-3.5 ]">
            <li><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">wwwroot/appsettings.json</code></li>
            <li><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">wwwroot/appsettings.{ENVIRONMENT}.json</code>, where the {ENVIRONMENT} placeholder is the app's runtime environment</li>
        </ul>

        <p>
            Please note that <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.json</code> in blazor wasm is
            located inside <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">wwwroot</code>. Which means it can be read by
            anyone on client side. Hence don't store any sensitive information in it.
        </p>

        <h3 class="[ font-semibold text-lg ]">How to read App Settings?</h3>

        <p>
            To read the settings / configuration from <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.json</code>
            you need to follow the below steps,
        </p>

        <ol class="[ list-decimal ] [ ml-3.5 ]">
            <li>Inject <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@@inject IConfiguration configuration</code></li>
            <li>Use injected configuration object to read settings</li>
            <li>
                <ul class="[ list-disc ] [ ml-4 ]">
                    <li>Use <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">configuration.GetValue&lt;string&gt;("{KEY}")</code> to read simple string value</li>
                    <li>Use <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">configuration.GetValue&lt;bool&gt;("{KEY}")</code> to read simple boolean value</li>
                    <li>Use <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">configuration.GetSection("{KEY}")</code> to read section as object</li>
                </ul>
            </li>
        </ol>

        <p>
            Configuration in app settings files are loaded by default. In I ❤️ .NET, a base url, authors value is stored in an app settings
            file and loaded by the Blazor framework automatically. The value is read by a component.
        </p>

        <GithubGistSnippet Title="Blazor WASM App Settings Configuration" UserId="fingers10" FileName="55930e92551a666355e743242671d185"></GithubGistSnippet>

        <DemoSnippet Title="Read Settings From Configuration">
            <DemoContent>
                <p class="[ text-black ] [ dark:text-white ]">
                    <b>
                        Scenario - Let's try reading configuration from I ❤️ .NET <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.json</code>
                    </b>
                </p>
                <AppSettingsConfiguration></AppSettingsConfiguration>
            </DemoContent>
        </DemoSnippet>

        <h3 class="[ font-semibold text-lg ]">App Settings in Release Configuration</h3>

        <p>
            Generally configuration from <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.json</code> will be used
            in production environment. We cannot have all same configuration in all environment. So we can override configuration for different environment
            using <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.{ENVIRONMENT}.json</code>, where the
            {ENVIRONMENT} placeholder is the app's runtime environment. For example, in I ❤️ .NET <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">baseUrl</code>
            in development environment will be different from production environment. So in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.development.json</code>
            will have different <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">"baseUrl": "https://localhost:7176/"</code> value.
        </p>

        <p>
            Other common use case would be, we have an API Key for consuming external service and that endpoint might have rate limiting mechanism in place. If
            we use the same production Key in development, then we might end up exhausting our consumption limit. To avoid this we can use dummy keys or
            different keys in development environment by overriding the key value in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.development.json</code>.
        </p>

        <p>
            Now that we have learn't how to use app settings in blazor wasm. We are still left with one more stuff. It is not necessary to bundle
            all <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">appsettings.{ENVIRONMENT}.json</code> to production. This can
            be safely removed in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Release</code> configuration using the below
            settings in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">.csproj</code> file.
        </p>

        <GithubGistSnippet Title="Blazor WASM Project File Configuration" UserId="fingers10" FileName="040e1c9ad3fb10fe1c962e0120e07ba6"></GithubGistSnippet>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM App Settings";
    private string Description = "In this post I will teach you how to read configuration from app settings in your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 2, 27, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 2, 27, 22, 30, 0);
    private string Slug = "blazor-wasm-app-settings";
    private string PosterPath = "blazor/wasm";
    private string Channel = "blazor";
    private ushort TotalContents = 7;
    private List<string> Keywords = new(2) { "App Settings", "App Configuration" };
}