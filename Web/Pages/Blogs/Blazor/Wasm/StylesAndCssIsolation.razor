@page "/blogs/blazor-wasm-styles-and-css-isolation"
@using BlazorDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(StylesAndCssIsolation)>
    <ContentBody>
        <p>
            In our previous article <NavLink class="[ underline ]" href="blogs/blazor-wasm-javascript-interop-and-isolation">Blazor WASM Javascript Interop and Isolation</NavLink>,
            we learn't how to use Javascript in blazor wasm and also understood that we should try to keep the Javascript usage to very minimal level. This needs to be considered when 
            choosing styling libraries. In this article let's learn about few factors to be considered when <ContentHighlight>styling</ContentHighlight> blazor apps and also learn about 
            what is <ContentHighlight>CSS Isolation</ContentHighlight>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#css-frameworks")" Match="NavLinkMatch.All">
                    CSS Frameworks
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#css-isolation")" Match="NavLinkMatch.All">
                    CSS Isolation
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="css-frameworks" class="[ font-semibold text-lg ]">Factors to be considered before choosing the styling framework</h3>

        <p>
            <a class="[ underline ]" href="https://getbootstrap.com/" target="_blank"><ContentHighlight>Bootstrap</ContentHighlight></a> has been widely accepted by many of the developers 
            across the globe. Even I have used bootstrap in most of my projects till now and also the default blazor wasm project template comes with bootstrap as the default styling toolkit. 
            That's because of it's built in responsive nature. But the major drawback of using bootstrap with blazor is the Javascript dependency. Almost all bootstrap components needs 
            Javascript for event handling and changing states of the component. But this doesn't work well with blazor component lifecycle. Hence you can only use few components from bootstrap 
            like alerts, badge, etc which can work without Javascript. I personally don't prefer styling my blazor apps with bootstrap because of the above drawbacks.
        </p>

        <p>
            With the new CSS features like <ContentHighlight>Flexbox</ContentHighlight> and <ContentHighlight>Grid</ContentHighlight>, I recommend to write your own CSS for your blazor apps
            as that will give you more control of your styles. This again depends on the team's CSS knowledge and timeline we have for the project that we work on. So the alernatives I suggest 
            would be to go for <ContentHighlight>Bulma</ContentHighlight> or <ContentHighlight>TailwindCSS</ContentHighlight>.
        </p>

        <p>
            <a class="[ underline ]" href="https://bulma.io/" target="_blank"><ContentHighlight>Bulma</ContentHighlight></a> is the only modern pure CSS framework which doesn't require any CSS 
            knowledge. This is 100% responsive and built on top of flexbox and it's modular. We can only import the component's that we need. This being a pure CSS framework we can use 
            <ContentHighlight>C#</ContentHighlight> logics in blazor to write our own event handling like <ContentHighlight>@@onclick, @@onfocus</ContentHighlight>, etc to bring interactivity 
            to components. But the drawback I see is that this doesn't have many components compared to bootstrap. I ❤️ .NET uses 
            <a class="[ underline ]" href="https://bulma.io/documentation/components/dropdown/" target="_blank"><ContentHighlight>Bulma Dropdown Component</ContentHighlight></a> for switching 
            between dark mode and light mode. To learn more about how to implement dark mode and light mode in blazor wasm app, refer 
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-dark-theme-and-light-theme">Blazor WASM Dark Theme and Light Theme</NavLink>.
        </p>

        <p>
            To start using bulma in your blazor wasm app, follow the below steps.
            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>Install <a class="[ underline ]" href="https://nodejs.org/en/download/"><ContentHighlight>Node JS</ContentHighlight></a> in your operating system.</li>
                <li>In your project directory, do an <ContentHighlight>npm init</ContentHighlight> and answer questions. This will create a <ContentHighlight>package.json</ContentHighlight> file in your root directory.</li>
                <li>Do a <ContentHighlight>npm install node-sass bulma</ContentHighlight></li>
                <li>Now add <ContentHighlight>Styles.css</ContentHighlight> file in your root directory and import the needed bulma components like follows <ContentHighlight CssClasses="[ break-all ]">@@import './node_modules/bulma/sass/components/dropdown.sass';</ContentHighlight></li>
                <li>Add <ContentHighlight>"buildbulma": "node-sass --omit-source-map-url styles.css wwwroot/css/app.css"</ContentHighlight> inside <ContentHighlight>scripts</ContentHighlight> section in <ContentHighlight>package.json</ContentHighlight></li>
                <li>Finally do <ContentHighlight>npm run buildbulma</ContentHighlight> from your project root directory. This will import and add necessary css and output it in <ContentHighlight>wwwroot/css/app.css</ContentHighlight></li>
                <li>Make sure to add a reference to <ContentHighlight>app.css</ContentHighlight> in your <ContentHighlight>index.html</ContentHighlight></li>
            </ol>
        </p>

        <GithubGistSnippet Title="Blazor WASM Bulma Setup" UserId="fingers10" FileName="f2143f9361d1cc2faa56395914691995"></GithubGistSnippet>

        <p>
            <a class="[ underline ]" href="https://tailwindcss.com/" target="_blank"><ContentHighlight>TailwindCSS</ContentHighlight></a> is a utility-first CSS framework with lots of 
            predefined utility classes that help us to speed up the CSS development directly from HTML markup. You don't need any separate CSS file for your components or you don't need to 
            pollute your global CSS. You can almost find any utility class from tailwindcss and it also has configuration available to customise and extend as per own needs. The only 
            limitation here is that you need to be aware of CSS. You need to know when to use which CSS property for your design. This will help you to choose right utility class from 
            tailwindcss. I ❤️ .NET extensively uses TailwindCSS to design and layout components and pages.
        </p>

        <p>
            To start using tailwindcss in your blazor wasm app, follow the below steps.
            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>Install <a class="[ underline ]" href="https://nodejs.org/en/download/"><ContentHighlight>Node JS</ContentHighlight></a> in your operating system.</li>
                <li>In your project directory, do an <ContentHighlight>npx tailwindcss init</ContentHighlight>. This will create a <ContentHighlight>package.json</ContentHighlight> and <ContentHighlight>tailwind.config.js</ContentHighlight> file in your root directory.</li>
                <li>Go to <ContentHighlight>tailwind.config.js</ContentHighlight> and add template files path as follows <ContentHighlight>content: ['../**/*.html', '../**/*.razor', '../**/*.cs']</ContentHighlight></li>
                <li>Go to <ContentHighlight>app.css</ContentHighlight> file and import tailwind components like <ContentHighlight>@@tailwind base;@@tailwind components;@@tailwind utilities;</ContentHighlight></li>
                <li>Add <ContentHighlight>"buildcss": "npx tailwindcss -i wwwroot/css/app.css -o wwwroot/css/app.min.css --watch"</ContentHighlight> inside <ContentHighlight>scripts</ContentHighlight> section in <ContentHighlight>package.json</ContentHighlight></li>
                <li>Finally do <ContentHighlight>npm run buildcss</ContentHighlight> from your project root directory. This will import and add necessary css and output it in <ContentHighlight>wwwroot/css/app.min.css</ContentHighlight></li>
                <li>Make sure to add a reference to <ContentHighlight>app.min.css</ContentHighlight> in your <ContentHighlight>index.html</ContentHighlight></li>
            </ol>
        </p>

        <GithubGistSnippet Title="Blazor WASM Tailwind CSS Setup" UserId="fingers10" FileName="6b03c327859cfe63c69ef4a391828dce"></GithubGistSnippet>

        <p>
            I ❤️ .NET uses both bulma and tailwindcss together. Here is the complete configuration.
        </p>

        <GithubGistSnippet Title="Blazor WASM Bulma & Tailwind CSS Setup" UserId="fingers10" FileName="ccf642b8e820aaec92845da7ac28ea59"></GithubGistSnippet>

        <GithubGistSnippet Title="Blazor WASM Tailwind Config JS" UserId="fingers10" FileName="dfdcf3ee04d2a75f02a7f712ab743b54"></GithubGistSnippet>

        <GithubGistSnippet Title="Blazor WASM Purge CSS Config JS" UserId="fingers10" FileName="e06955850ad94e40736471ecef642e8a"></GithubGistSnippet>

        <GithubGistSnippet Title="Blazor WASM Styles CSS" UserId="fingers10" FileName="c13e17882afcc04eb169f56b19bfff2b"></GithubGistSnippet>

        <p>
            In development environment, you can do <ContentHighlight>npm run buildcss:dev</ContentHighlight>
            and continue with <ContentHighlight>development</ContentHighlight> where as for
            <ContentHighlight>production</ContentHighlight> you can do
            <ContentHighlight>npm run buildcss</ContentHighlight>. This can be configured in
            <ContentHighlight>CI/CD Pipline</ContentHighlight> as well. Additionally you can
            <ContentHighlight>remove app.css</ContentHighlight> file in
            <ContentHighlight>Release</ContentHighlight> configuration and also configure
            <ContentHighlight>Compile</ContentHighlight> event for
            <ContentHighlight>Release</ContentHighlight> configuration as show below.
        </p>

        <GithubGistSnippet Title="Blazor WASM Project File Configuration" UserId="fingers10" FileName="4e97f3e771016500965d7271a2395bd0"></GithubGistSnippet>

        <p>
            If you don't prefer to use <ContentHighlight>TailwindCSS</ContentHighlight>, <ContentHighlight>Bulma</ContentHighlight>, <ContentHighlight>Bootstrap</ContentHighlight> or your
            <ContentHighlight>own CSS</ContentHighlight>, then you can still Get productive fast with <ContentHighlight>re-usable UI components</ContentHighlight> from top component vendors like
            <a class="[ underline ]" href="https://www.telerik.com/blazor-ui" target="_blank"><ContentHighlight>Telerik</ContentHighlight></a>,
            <a class="[ underline ]" href="https://www.devexpress.com/blazor/" target="_blank"><ContentHighlight>DevExpress</ContentHighlight></a>,
            <a class="[ underline ]" href="https://www.syncfusion.com/blazor-components" target="_blank"><ContentHighlight>Syncfusion</ContentHighlight></a>,
            <a class="[ underline ]" href="https://blazor.radzen.com/" target="_blank"><ContentHighlight>Radzen</ContentHighlight></a>,
            <a class="[ underline ]" href="https://www.infragistics.com/products/ignite-ui-blazor" target="_blank"><ContentHighlight>Infragistics</ContentHighlight></a>,
            <a class="[ underline ]" href="https://www.grapecity.com/componentone/blazor-ui-controls" target="_blank"><ContentHighlight>Grapecity</ContentHighlight></a>,
            <a class="[ underline ]" href="https://www.htmlelements.com/blazor/" target="_blank"><ContentHighlight>jQWidgets</ContentHighlight></a>,
            <a class="[ underline ]" href="https://www.fast.design/docs/integrations/blazor/" target="_blank"><ContentHighlight>Fast Blazor</ContentHighlight></a> and others.
            Or use one of the many
            <a class="[ underline ]" href="https://github.com/AdrienTorris/awesome-blazor?WT.mc_id=dotnet-35129-website#libraries--extensions" target="_blank"><ContentHighlight>open-source component libraries</ContentHighlight></a>
            from the Blazor community. The drawback I see when going for any of the components is that there is lack of modularity. For using a simple component you need to refer all packages. 
            This increases the overall app size. They also don't work well when assembly trimming is enabled or you need to do additional configurations to make this work perfectly.
        </p>

        <h3 id="css-isolation" class="[ font-semibold text-lg ]">CSS Isolation</h3>

        <p>
            CSS Isolation helps to add a CSS file specific to a component. This helps to avoid polluting global CSS file and all CSS related to component gets automatically 
            <ContentHighlight>scoped</ContentHighlight> for that particular component. We don't need to worry about one component CSS affecting other component CSS. Blazor WASM takes care of 
            handling these complexities behind the scenes.
        </p>

        <p>
            Let's say you have a component named <ContentHighlight>Chat.razor</ContentHighlight>. Then you need to add CSS file names <ContentHighlight>Chat.razor.css</ContentHighlight>. IDE 
            will automatically collapse the CSS file within component file. And for the CSS to reflect in your app, you need to add a stylesheet reference link to 
            <ContentHighlight>index.html</ContentHighlight> with your assembly name like <ContentHighlight CssClasses="[ break-all ]">&lt;link href="YourProjectAssemblyName.styles.css" rel="stylesheet" /&gt;</ContentHighlight>.
        </p>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            I'm happy that you have reached to the end of this article. Here we learnt about CSS frameworks available for blazor and we saw the factors to be considered before chossing a CSS 
            framework. We also saw how to isolate CSS in blazor apps. Feel free to check the source code of I Love Dotnet to see how styles are isolated.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Styles and CSS Isolation";
    private string Description = "In this post I will teach you what is CSS isolation and what factors to consider when styling your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 2, 13, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 10, 19, 22, 30, 0);
    private string Slug = "blazor-wasm-styles-and-css-isolation";
    private string PosterPath = "Blogs/Blazor/Wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(3) { "CSS", "Styles", "CSS Isolation" };
}