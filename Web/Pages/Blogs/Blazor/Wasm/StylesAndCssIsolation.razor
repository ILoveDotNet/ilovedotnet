@page "/blogs/blazor-wasm-styles-and-css-isolation"
@inherits FragmentNavigationBase
@using BlazorDemoComponents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         TotalContents=@TotalContents>
    <ContentBody>
        <p>
            In our previous article <NavLink class="[ underline ]" href="blogs/blazor-wasm-javascript-interop-and-isolation">Blazor WASM Javascript Interop and Isolation</NavLink>,
            we learn't how to use Javascript in blazor wasm and also understood that we should try to keep the Javascript usage to very minimal level.
            This needs to be considered when choosing styling libraries. In this article let's learn about few factors to be considered when
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">styling</code> blazor apps and also learn about what is
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">CSS Isolation</code>.
        </p>

        <ol class="[ list-decimal ] [ ml-3.5 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#css-frameworks")" Match="NavLinkMatch.All">
                    CSS Frameworks
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#css-isolation")" Match="NavLinkMatch.All">
                    CSS Isolation
                </NavLink>
            </li>
        </ol>

        <h3 id="css-frameworks" class="[ font-semibold text-lg ]">Factors to be considered before choosing the styling framework</h3>

        <p>
            <a class="[ underline ]" href="https://getbootstrap.com/" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Bootstrap</code></a>
            has been widely accepted by many of the developers across the globe. Even I have used bootstrap in most of my projects till now and
            also the default blazor wasm project template comes with bootstrap as the default styling toolkit. That's because of it's built in
            responsive nature. But the major drawback of using bootstrap with blazor is the Javascript dependency. Almost all bootstrap components needs
            Javascript for event handling and changing states of the component. But this doesn't work well with blazor component lifecycle. Hence you
            can only use few components from bootstrap like alerts, badge, etc which can work without Javascript. I personally don't prefer styling my
            blazor apps with bootstrap because of the above drawbacks.
        </p>

        <p>
            With the new CSS features like <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Flexbox</code> and
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Grid</code>, I recommend to write your own CSS for your blazor apps
            as that will give you more control of your styles. This again depends on the team's CSS knowledge and timeline we have for the project that
            we work on. So the alernatives I suggest would be to go for <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Bulma</code>
            or <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">TailwindCSS</code>.
        </p>

        <p>
            <a class="[ underline ]" href="https://bulma.io/" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Bulma</code></a>
            is the only modern pure CSS framework which doesn't require any CSS knowledge. This is 100% responsive and built on top of flexbox and it's modular.
            We can only import the component's that we need. This being a pure CSS framework we can use <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">C#</code>
            logics in blazor to write our own event handling like <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@@onclick, @@onfocus</code>, etc to
            bring interactivity to components. But the drawback I see is that this doesn't have many components compared to bootstrap. I ❤️ .NET uses
            <a class="[ underline ]" href="https://bulma.io/documentation/components/dropdown/" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Bulma Dropdown Component</code></a>
            for switching between dark mode and light mode. To learn more about how to implement dark mode and light mode in blazor wasm app, refer
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-dark-theme-and-light-theme">Blazor WASM Dark Theme and Light Theme</NavLink>.
        </p>

        <p>
            To start using bulma in your blazor wasm app, follow the below steps.
            <ol class="[ list-decimal ] [ ml-3.5 ]">
                <li>Install <a class="[ underline ]" href="https://nodejs.org/en/download/"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Node JS</code></a> in your operating system.</li>
                <li>In your project directory, do an <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">npm init</code> and answer questions. This will create a <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">package.json</code> file in your root directory.</li>
                <li>Do a <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">npm install node-sass bulma</code></li>
                <li>Now add <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Styles.css</code> file in your root directory and import the needed bulma components like follows <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@@import './node_modules/bulma/sass/components/dropdown.sass';</code></li>
                <li>Add <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">"buildbulma": "node-sass --omit-source-map-url styles.css wwwroot/css/app.css"</code> inside <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">scripts</code> section in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">package.json</code></li>
                <li>Finally do <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">npm run buildbulma</code> from your project root directory. This will import and add necessary css and output it in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">wwwroot/css/app.css</code></li>
                <li>Make sure to add a reference to <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">app.css</code> in your <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">index.html</code></li>
            </ol>
        </p>

        <GithubGistSnippet Title="Blazor WASM Bulma Setup" UserId="fingers10" FileName="f2143f9361d1cc2faa56395914691995"></GithubGistSnippet>

        <p>
            <a class="[ underline ]" href="https://tailwindcss.com/" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">TailwindCSS</code></a>
            is a utility-first CSS framework with lots of predefined utility classes that help us to speed up the CSS development directly from HTML markup.
            You don't need any separate CSS file for your components or you don't need to pollute your global CSS. You can almost find any utility class from
            tailwindcss and it also has configuration available to customise and extend as per own needs. The only limitation here is that you need to be aware
            of CSS. You need to know when to use which CSS property for your design. This will help you to choose right utility class from tailwindcss. I ❤️ .NET
            extensively uses TailwindCSS to design and layout components and pages.
        </p>

        <p>
            To start using tailwindcss in your blazor wasm app, follow the below steps.
            <ol class="[ list-decimal ] [ ml-3.5 ]">
                <li>Install <a class="[ underline ]" href="https://nodejs.org/en/download/"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Node JS</code></a> in your operating system.</li>
                <li>In your project directory, do an <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">npx tailwindcss init</code>. This will create a <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">package.json</code> and <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">tailwind.config.js</code> file in your root directory.</li>
                <li>Go to <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">tailwind.config.js</code> and add template files path as follows <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">content: ['../**/*.html', '../**/*.razor', '../**/*.cs']</code></li>
                <li>Go to <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">app.css</code> file and import tailwind components like <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@@tailwind base;@@tailwind components;@@tailwind utilities;</code></li>
                <li>Add <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">"buildcss": "npx tailwindcss -i wwwroot/css/app.css -o wwwroot/css/app.min.css --watch"</code> inside <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">scripts</code> section in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">package.json</code></li>
                <li>Finally do <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">npm run buildcss</code> from your project root directory. This will import and add necessary css and output it in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">wwwroot/css/app.min.css</code></li>
                <li>Make sure to add a reference to <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">app.min.css</code> in your <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">index.html</code></li>
            </ol>
        </p>

        <GithubGistSnippet Title="Blazor WASM Tailwind CSS Setup" UserId="fingers10" FileName="6b03c327859cfe63c69ef4a391828dce"></GithubGistSnippet>

        <p>
            I ❤️ .NET uses both bulma and tailwindcss together. Here is the complete configuration.
        </p>

        <GithubGistSnippet Title="Blazor WASM Bulma & Tailwind CSS Setup" UserId="fingers10" FileName="ccf642b8e820aaec92845da7ac28ea59"></GithubGistSnippet>

        <GithubGistSnippet Title="Blazor WASM Tailwind Config JS" UserId="fingers10" FileName="dfdcf3ee04d2a75f02a7f712ab743b54"></GithubGistSnippet>

        <GithubGistSnippet Title="Blazor WASM Purge CSS Config JS" UserId="fingers10" FileName="e06955850ad94e40736471ecef642e8a"></GithubGistSnippet>

        <GithubGistSnippet Title="Blazor WASM Styles CSS" UserId="fingers10" FileName="c13e17882afcc04eb169f56b19bfff2b"></GithubGistSnippet>

        <p>
            In development environment, you can do <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">npm run buildcss:dev</code>
            and continue with <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">development</code> where as for
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">production</code> you can do
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">npm run buildcss</code>. This can be configured in
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">CI/CD Pipline</code> as well. Additionally you can
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">remove app.css</code> file in
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Release</code> configuration and also configure
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Compile</code> event for
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Release</code> configuration as show below.
        </p>

        <GithubGistSnippet Title="Blazor WASM Project File Configuration" UserId="fingers10" FileName="4e97f3e771016500965d7271a2395bd0"></GithubGistSnippet>

        <p>
            If you don't prefer to use <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">TailwindCSS</code>,
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Bulma</code>,
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Bootstrap</code> or your
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">own CSS</code>, then you can still Get productive fast with
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">re-usable UI components</code> from top component vendors like
            <a class="[ underline ]" href="https://www.telerik.com/blazor-ui" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Telerik</code></a>,
            <a class="[ underline ]" href="https://www.devexpress.com/blazor/" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">DevExpress</code></a>,
            <a class="[ underline ]" href="https://www.syncfusion.com/blazor-components" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Syncfusion</code></a>,
            <a class="[ underline ]" href="https://blazor.radzen.com/" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Radzen</code></a>,
            <a class="[ underline ]" href="https://www.infragistics.com/products/ignite-ui-blazor" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Infragistics</code></a>,
            <a class="[ underline ]" href="https://www.grapecity.com/componentone/blazor-ui-controls" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Grapecity</code></a>,
            <a class="[ underline ]" href="https://www.htmlelements.com/blazor/" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">jQWidgets</code></a>,
            <a class="[ underline ]" href="https://www.fast.design/docs/integrations/blazor/" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Fast Blazor</code></a> and others.
            Or use one of the many
            <a class="[ underline ]" href="https://github.com/AdrienTorris/awesome-blazor?WT.mc_id=dotnet-35129-website#libraries--extensions" target="_blank"><code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">open-source component libraries</code></a>
            from the Blazor community. The drawback I see when going for any of the components is that there is lack of modularity. For using a
            simple component you need to refer all packages. This increases the overall app size. They also don't work well when assembly trimming
            is enabled or you need to do additional configurations to make this work perfectly.
        </p>

        <h3 id="css-isolation" class="[ font-semibold text-lg ]">CSS Isolation</h3>

        <p>
            CSS Isolation helps to add a CSS file specific to a component. This helps to avoid polluting global CSS file and all CSS related to
            component gets automatically <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">scoped</code> for that particular component. We don't need to worry about one component CSS affecting other component
            CSS. Blazor WASM takes care of handling these complexities behind the scenes.
        </p>

        <p>
            Let's say you have a component named <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Chat.razor</code>. Then
            you need to add CSS file names <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Chat.razor.css</code>. IDE will
            automatically collapse the CSS file within component file. And for the CSS to reflect in your app, you need to add a stylesheet
            reference link to <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">index.html</code> with your assembly name like
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">&lt;link href="YourProjectAssemblyName.styles.css" rel="stylesheet" /&gt;</code>.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Styles and CSS Isolation";
    private string Description = "In this post I will teach you what is CSS isolation and what factors to consider when styling your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 2, 13, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 2, 20, 22, 30, 0);
    private string Slug = "blazor-wasm-styles-and-css-isolation";
    private string PosterPath = "blazor/wasm";
    private string Channel = "blazor";
    private ushort TotalContents = 7;
    private List<string> Keywords = new(15) { "CSS", "Styles", "CSS Isolation", "Bootstrap", "Bulma", "TailwindCSS", "Telerik", "DevExpress", "Syncfusion", "Radzen", "Infragistics", "Grapecity", "jQWidgets", "Fast Blazor", "Awesome Blazor" };
}