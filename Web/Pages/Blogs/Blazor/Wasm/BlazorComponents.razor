@page "/blogs/blazor-wasm-components"
@using BlazorDemoComponents
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents>
    <ContentBody>
        <p>
            In previous article, let's learn what is components in blazor. if you are new to blazor, I strongly recommend you to check out my article on 
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-introduction">Blazor Wasm Introduction</NavLink>. If you are familiar with blazor, you 
            can skip introcution and continue with this article.
        </p>

        <h3 class="[ font-semibold text-lg ]">What is Components in blazor?</h3>

        <p>
            A <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Blazor Component</code> is a reusable piece of UI in a Blazor application. 
            This helps you to wrap html elements and their events into a reusable UI code blocks. You can nest components in a component. Let me show you a 
            simple example of a Blazor component.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/components/what is components.png" alt="what is components?" class="[ w-full ]" />
        </figure>

        <p>
            You can see <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Dialog.razor</code> component which contains a button and on click 
            of it <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">OnYes event</code> will be invoked. We can also nest component like how 
            we have <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Dialog.razor</code> component inside 
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Index.razor</code> component. In this case the 
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">nested component (Dialog.razor)</code> becomes the 
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Child Component</code> and the 
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">containing component (Index.razor)</code> becomes 
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Parent Component</code>.
        </p>

        <p>
            A Blazor application is full of components. The <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">App</code> is the root component 
            which contains Router Component which again contains <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Found</code> Component, etc.
            I ❤️ .NET has <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Header</code> component which contains 
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Search</code> Component, 
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Social</code> Component and 
            <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Theme</code> Component.
        </p>

        <p>
            To create a component you need to,
        </p>

        <ol class="[ list-decimal ] [ ml-3.5 ]">
            <li>Right click <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Pages</code> folder or any folder expcet <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">wwwroot</code> folder inside your project.</li>
            <li>Click on <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Add</code>.</li>
            <li>Click on <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Razor Component</code>.</li>
            <li>Name your Component.</li>
            <li>Now remove the template code inside your component and add your html.</li>
            <li>That's it you created your first component</li>
            <li>Now you can use your component just like any other html element by adding <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">&lt;YourComponent /&gt;</code></li>
        </ol>

        <GithubGistSnippet Title="Blazor WASM Logo Component" UserId="fingers10" FileName="48c87cfe808874bb8471dc4bceda2e4c"></GithubGistSnippet>

        <DemoSnippet Title="Creating a Component">
            <DemoContent>
                <p class="[ text-black ] [ dark:text-white ]">
                    <b>
                        Scenario - Let's try rendering the above logo component from I ❤️ .NET
                    </b>
                </p>
                <Logo></Logo>
            </DemoContent>
        </DemoSnippet>

        <h3 class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learn't about what is component in blazor and how to create your own component and experienced a live demo. In our next 
            article let's learn about how to pass data to child components from parent components.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Components";
    private string Description = "In this post I will teach what is components and how to use components in your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 4, 10, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 4, 10, 22, 30, 0);
    private string Slug = "blazor-wasm-components";
    private string PosterPath = "blogs/blazor/wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(1) { "Components" };
}