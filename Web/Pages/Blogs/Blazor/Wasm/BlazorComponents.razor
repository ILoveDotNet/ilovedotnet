@page "/blogs/blazor-wasm-components"
@using BlazorDemoComponents
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents>
    <ContentBody>
        <p>
            In previous article, we learnt what is blazor. if you are new to blazor, I strongly recommend you to check out my article on
            <NavLink class="[ underline ]" href="blogs/blazor-wasm-introduction">Blazor Wasm Introduction</NavLink>. If you are familiar with blazor, you
            can skip introdution and continue with this article.
        </p>

        <h3 class="[ font-semibold text-lg ]">What is Components in blazor?</h3>

        <p>
            A <ContentHighlight>Blazor Component</ContentHighlight> is a reusable piece of UI in a Blazor application.
            This helps you to wrap html elements and their events into a reusable UI code blocks. You can nest components in a component. Let me show you a
            simple example of a Blazor component.
        </p>

        <figure>
            <img src="./image/blogs/blazor/wasm/components/what is components.png" alt="what is components?" class="[ w-full ]" />
        </figure>

        <p>
            You can see <ContentHighlight>Dialog.razor</ContentHighlight> component which contains a button and on click
            of it <ContentHighlight>OnYes event</ContentHighlight> will be invoked. We can also nest component like how
            we have <ContentHighlight>Dialog.razor</ContentHighlight> component inside
            <ContentHighlight>Index.razor</ContentHighlight> component. In this case the
            <ContentHighlight>nested component (Dialog.razor)</ContentHighlight> becomes the
            <ContentHighlight>Child Component</ContentHighlight> and the
            <ContentHighlight>containing component (Index.razor)</ContentHighlight> becomes
            <ContentHighlight>Parent Component</ContentHighlight>.
        </p>

        <p>
            A Blazor application is full of components. The <ContentHighlight>App</ContentHighlight> is the root component
            which contains Router Component which again contains <ContentHighlight>Found</ContentHighlight> Component, etc.
            I ❤️ .NET has <ContentHighlight>Header</ContentHighlight> component which contains
            <ContentHighlight>Search</ContentHighlight> Component,
            <ContentHighlight>Social</ContentHighlight> Component and
            <ContentHighlight>Theme</ContentHighlight> Component.
        </p>

        <p>
            To create a component you need to,
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Right click <ContentHighlight>Pages</ContentHighlight> folder or any folder expcet <ContentHighlight>wwwroot</ContentHighlight> folder inside your project.</li>
            <li>Click on <ContentHighlight>Add</ContentHighlight>.</li>
            <li>Click on <ContentHighlight>Razor Component</ContentHighlight>.</li>
            <li>Name your Component.</li>
            <li>Now remove the template code inside your component and add your html.</li>
            <li>That's it you created your first component</li>
            <li>Now you can use your component just like any other html element by adding <ContentHighlight>&lt;YourComponent /&gt;</ContentHighlight></li>
        </ol>

        <GithubGistSnippet Title="Blazor WASM Logo Component" UserId="fingers10" FileName="48c87cfe808874bb8471dc4bceda2e4c"></GithubGistSnippet>

        <DemoSnippet Title="Creating a Component">
            <p class="[ text-black ] [ dark:text-white ]">
                <b>
                    Scenario - Let's try rendering the above logo component from I ❤️ .NET
                </b>
            </p>
            <Logo></Logo>
        </DemoSnippet>

        <h3 class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learn't about what is component in blazor and how to create your own component and experienced a live demo. In our next
            article let's learn about how to pass data to child components from parent components.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Components";
    private string Description = "In this post I will teach what is components and how to use components in your Blazor applications. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 4, 10, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 4, 10, 22, 30, 0);
    private string Slug = "blazor-wasm-components";
    private string PosterPath = "blogs/blazor/wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(1) { "Components" };
}