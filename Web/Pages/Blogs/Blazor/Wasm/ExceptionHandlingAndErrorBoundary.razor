@page "/blogs/blazor-wasm-exception-handling-and-error-boundary"
@inherits FragmentNavigationBase
@using Web.Pages.Blogs.Blazor.Wasm.Demo
@using Humanizer
@inject IConfiguration configuration
@inject TableOfContents tableOfContents

<PageTitle>@Title - I ❤️ DotNet</PageTitle>

<HeadContent>
    <meta name="description" content="@Description">
    <meta name="keywords" content=".NET, DotNet, I Love DotNet, I ❤️ DotNet, Blazor, Blazor (WebAssembly), Blazor Wasm, C#, Entity Framework Core, LINQ, ML.NET, Exception Handling, Error Boundary">
    <meta name="url" content="@($"{BaseUrl}blogs/{Slug}/")">
    <meta name="identifier-URL" content="@($"{BaseUrl}blogs/{Slug}/")">
    <meta property="og:site_name" content="I Love DotNet" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="@Title" />
    <meta property="og:description" content="@Description" />
    <meta property="og:url" content="@($"{BaseUrl}blogs/{Slug}/")" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="@Title" />
    <meta name="twitter:description" content="@Description" />
    <meta name="twitter:url" content="@($"{BaseUrl}blogs/{Slug}/")" />
    <meta property="article:published_time" content="@CreatedOn.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")" />
    <meta property="article:modified_time" content="@ModifiedOn.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")" />
    <meta property="article:tag" content=".NET" />
    <meta property="article:tag" content="DotNet" />
    <meta property="article:tag" content="I Love DotNet" />
    <meta property="article:tag" content="I ❤️ DotNet" />
    <meta property="article:tag" content="Blazor" />
    <meta property="article:tag" content="Blazor (WebAssembly)" />
    <meta property="article:tag" content="Blazor Wasm" />
    <meta property="article:tag" content="C#" />
    <meta property="article:tag" content="Entity Framework Core" />
    <meta property="article:tag" content="LINQ" />
    <meta property="article:tag" content="ML.NET" />
    <meta property="article:tag" content="Exception Handling" />
    <meta property="article:tag" content="Error Boundary" />
    <link rel="sitemap" type="application/xml" title="Sitemap" href="@($"{BaseUrl}sitemap.xml")" />
    <link rel="alternate" type="application/rss+xml" href="@($"{BaseUrl}atom.xml")">
    <link rel="alternate" href="@($"{BaseUrl}blogs/{Slug}/")" hreflang="en" />
    <link rel="alternate" href="@($"{BaseUrl}blogs/{Slug}/")" hreflang="x-default" />
    <link rel="canonical" href="@($"{BaseUrl}blogs/{Slug}/")" />
    <link rel="index" title="@Title - I ❤️ DotNet" href="@($"{BaseUrl}blogs/{Slug}/")" />
    @(new MarkupString(
    $@"<script type=""application/ld+json"">
    {{
        ""@context"": ""https://schema.org"",
        ""@type"": ""Article"",
        ""publisher"": {{
            ""@type"": ""Organization"",
            ""name"": ""I Love DotNet"",
            ""url"": ""{BaseUrl}"",
            ""logo"": {{
                ""@type"": ""ImageObject"",
                ""url"": ""{BaseUrl}favicon.ico"",
                ""width"": 16,
                ""height"": 16
            }}
        }},
        ""author"": {{
            ""@type"": ""Person"",
            ""name"": ""Abdul Rahman Shabeek Mohamed"",
            ""image"": {{
                ""@type"": ""ImageObject"",
                ""url"": ""//https://media-exp1.licdn.com/dms/image/C5603AQGIbBUf4NvSqA/profile-displayphoto-shrink_200_200/0/1588467007026?e=1648080000&v=beta&t=bbZe_QpTmS_g0w0DxVaJGLPgyXU1bu41QyppAIhZNss"",
                ""width"": 250,
                ""height"": 250
            }},
            ""url"": ""{BaseUrl}author/abdulrahman/"",
            ""sameAs"": [
                ""https://www.linkedin.com/in/fingers10"",
                ""https://github.com/fingers10"",
                ""https://stackoverflow.com/users/10851213/fingers10"",
                ""https://www.youtube.com/channel/UCOS3wCw7SVXjXXffMPqid7A""
            ]
        }},
        ""headline"": ""{Title}"",
        ""url"": ""{BaseUrl}blogs/{Slug}/"",
        ""datePublished"": ""{CreatedOn:yyyy-MM-ddTHH:mm:ss.fffZ}"",
        ""dateModified"": ""{ModifiedOn:yyyy-MM-ddTHH:mm:ss.fffZ}"",
        ""image"": {{
            ""@type"": ""ImageObject"",
            ""url"": ""{BaseUrl}image/blogs/blazor/wasm/{Slug}-1200w.svg"",
            ""width"": 1265,
            ""height"": 827
        }},
        ""keywords"": ""I Love DotNet, Blogs, Blazor, Blazor (WebAssembly), Exception Handling, Error Boundary"",
        ""description"": ""{Description}"",
        ""mainEntityOfPage"": {{
            ""@type"": ""WebPage"",
            ""@id"": ""{BaseUrl}""
        }}
    }}
    </script>"))
</HeadContent>

<section class="[ flex flex-col md:flex-row ] [ p-5 md:px-20 ] [ space-x-5 ]">
    <article class="[ md:basis-4/5 ] [ space-y-5 ]">
        <header class="[ space-y-2 ]">
            <figure>
                <img srcset="@($"image/blogs/blazor/wasm/{Slug}-400w.svg 400w,image/blogs/blazor/wasm/{Slug}-1200w.svg 1200w"))"
                     sizes="(max-width: 400px) 480px,1200px"
                     alt="@Title" class="[ w-full ]" loading="lazy" />
            </figure>
            <h2 class="[ dark:text-white ] [ font-semibold text-xl ]">@Title</h2>
            <section class="[ flex flex-col md:flex-row justify-between ] [ space-y-1 md:space-y-0 ] [ dark:text-white ] [ font-bold ]">
                <div>
                    <p>Authors - <a href="@(configuration.GetValue<string>("authors:Abdul Rahman"))" class="[ underline ]" target="_blank">Abdul Rahman (Content Writer)</a>, <a href="@(configuration.GetValue<string>("authors:Regina Sharon"))" class="[ underline ]" target="_blank">Regina Sharon (Graphic Designer)</a></p>
                    <time datetime="@ModifiedOn.ToString("yyyy-MM-dd HH:mm:ss")">Last updated @ModifiedOn.Humanize()</time>
                </div>
                <div>
                    <SocialShare Url="@($"{BaseUrl}blogs/{Slug}/")"></SocialShare>
                </div>
            </section>
        </header>
        <section class="[ dark:text-white ] [ space-y-2 ] [ leading-relaxed ]">
            <p>
                Exceptions are common in all apps. We can handle known exceptions which we expect using <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">try</code>
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">catch</code> blocks. But this cannot be the case always. Some times we might end up in unforeseen
                run time unhandled exceptions. There are different ways to handle exceptions. Luckily with <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">blazor</code>
                we have exception handling built in in two different ways.
            </p>

            <GithubGistSnippet Title="Chat component to simulate exception" UserId="fingers10" FileName="c2b5d43dcc0017bafcecd995772f3f69"></GithubGistSnippet>

            <ol class="[ list-decimal ] [ ml-3.5 ]">
                <li>
                    <NavLink class="[ underline ]" href="@($"blogs/{Slug}#global-exception-handling")" Match="NavLinkMatch.All">
                        <span class="oi oi-plus" aria-hidden="true"></span> Global Exception Handling
                    </NavLink>
                </li>
                <li>
                    <NavLink class="[ underline ]" href="@($"blogs/{Slug}#error-boundary")" Match="NavLinkMatch.All">
                        <span class="oi oi-plus" aria-hidden="true"></span> Error Boundary
                    </NavLink>
                </li>
                <li>
                    <NavLink class="[ underline ]" href="@($"blogs/{Slug}#alternative-global-exception-handling")" Match="NavLinkMatch.All">
                        <span class="oi oi-plus" aria-hidden="true"></span> Alternative Global Exception Handling
                    </NavLink>
                </li>
            </ol>

            <h3 id="global-exception-handling" class="[ font-semibold text-lg ]">Global Exception Handling</h3>

            <p>
                Blazor has global error handling element <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@(@"<div id=""blazor-error-ui"">")</code> in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">index.html</code>. This will act
                as an global error handler which will catch any unhanled exception across blazor app and display nice error UI codesent inside
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@(@"<div id=""blazor-error-ui"">")</code> at the bottom of the screen by default and logs the error stack trace to browser
                console. This will also have reload option to reload the app to restore the app to correct working state.
            </p>

            <GithubGistSnippet Title="Blazor Global Exception Handling" UserId="fingers10" FileName="57a183a3489acca5760391d728bf712c"></GithubGistSnippet>

            <DemoSnippet Title="Global Exception Handling">
                <DemoContent>
                    <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
                    <Chat></Chat>
                </DemoContent>
            </DemoSnippet>

            <h3 id="error-boundary" class="[ font-semibold text-lg ]">Error Boundary</h3>

            <p>
                Though <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@(@"<div id=""blazor-error-ui"">")</code> handles all unhandled exceptions it will be nice to restrict the error
                handling boundary and have better control of the error message and error UI. That said <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">.Net 6</code> introduced
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@("<ErrorBoundary>")</code> to serve this purpose. We can wrap any component inside <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@("<ErrorBoundary>")</code> and this
                will take care of showing error UI when an unhandled exception occurs inside the component.
            </p>

            <GithubGistSnippet Title="Blazor Error Boundary" UserId="fingers10" FileName="b26cd84ae5ee60c935050cc372c7d727"></GithubGistSnippet>

            <DemoSnippet Title="Error Boundary">
                <DemoContent>
                    <ErrorBoundary>
                        <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
                        <Chat></Chat>
                    </ErrorBoundary>
                </DemoContent>
            </DemoSnippet>

            <p>
                We can control the error message with our own custom error message and error UI using <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@("<ErrorContent>")</code>. From now incase of any
                unhandled exception, our custom error UI will be displayed.
            </p>

            <GithubGistSnippet Title="Blazor Error Boundary with custom Error UI" UserId="fingers10" FileName="de665e941c3efd35ec2115db3c4b1a98"></GithubGistSnippet>

            <DemoSnippet Title="Error Boundary with Custom Error UI">
                <DemoContent>
                    <ErrorBoundary>
                        <ChildContent>
                            <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
                            <Chat></Chat>
                        </ChildContent>
                        <ErrorContent>
                            <div class="[ bg-red-500 ]">
                                <p class="[ text-white ]">An error occured while establishing a connection. Please try again later.</p>
                            </div>
                        </ErrorContent>
                    </ErrorBoundary>
                </DemoContent>
            </DemoSnippet>

            <p>
                So far so good. But doesn't this leave a bad user experience? How will the user retry the action? One way is to reload the page.
                But there is an another easy option called Recovery in Error Boundary. All we need to do is to add a reference to Error Boundary
                and call <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">errorBoundary?.Recover()</code> method to retry the action.
            </p>

            <GithubGistSnippet Title="Blazor Error Boundary with custom Error UI and Recovery" UserId="fingers10" FileName="28dfa506cb0e53f4ce0469f735f89bfe"></GithubGistSnippet>

            <DemoSnippet Title="Error Boundary with Custom Error UI and Recovery">
                <DemoContent>
                    <ErrorBoundary @ref="@errorBoundary">
                        <ChildContent>
                            <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
                            <Chat></Chat>
                        </ChildContent>
                        <ErrorContent>
                            <div class="[ bg-red-500 ]">
                                <p class="[ text-white ]">An error occured while establishing a connection. Please try again later.</p>
                            </div>
                        </ErrorContent>
                    </ErrorBoundary>

                    <button type="button" class="[ bg-fuchsia-500 ] [ px-4 py-2 ] [ rounded-md ] [ text-white ]" @onclick="Recover">
                        Click to recover
                        <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-activity ] [ inline ]" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                            <path d="M3 12h4l3 8l4 -16l3 8h4"></path>
                        </svg>
                    </button>
                </DemoContent>
            </DemoSnippet>

            <h3 id="alternative-global-exception-handling" class="[ font-semibold text-lg ]">Alternative Global Exception Handling</h3>

            <p>
                An alternative to using <NavLink class="[ underline ]" href="@($"blogs/{Slug}#error-boundary")">Error boundaries (ErrorBoundary)</NavLink> 
                is to pass a custom <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Error</code> component as a 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">CascadingValue</code>to child components. An advantage of 
                using a component over using an injected service or a custom logger implementation is that a cascaded component can render content 
                and apply CSS styles when an error occurs.
            </p>

            <GithubGistSnippet Title="Error component" UserId="fingers10" FileName="15e50550370685d5c14334e2c057f19e"></GithubGistSnippet>

            <p>
                Now in the <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">App</code> component, wrap the 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Router</code> component with the 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Error</code> component. This permits the 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Error</code> component to cascade down to any component of 
                the app where the <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Error</code> component is received as a 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">CascadingParameter</code>. We can then call error processing 
                method <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">ProcessError</code> from 
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">Error</code> component to handle error. To learn more about this,
                head over to <NavLink class="[ underline ]" href="@($"{BaseUrl}blogs/blazor-wasm-error-logging/")">Blazor Wasm Error Logging</NavLink>
            </p>

            <GithubGistSnippet Title="Alternative Global Exception Handling" UserId="fingers10" FileName="7e50f51c0b1585d328e3ff804dcf583c"></GithubGistSnippet>

        </section>
    </article>
    <aside class="[ flex flex-col md:basis-1/5 ] [ space-y-2 ]">
        @foreach (var content in tableOfContents.Contents.Where(content => content.Title != Title))
        {
             <Thumbnail PosterUrl="@content.PosterUrl" 
                    ContentUrl="@content.ContentUrl"
                    Title="@content.Title"
                    AltText="@content.Title"
                    IconUrl="@content.IconUrl"
                    IconAlt="@content.Type"
                    CreatedOn="@content.CreatedOn"
                    Author="@content.Author"
                    Swap=true>
            </Thumbnail>           
        }
    </aside>
</section>

@code {
    private string Title = "Blazor WASM Exception Handling and Error Boundary";
    private string Description = "In this post I will teach you how exception handling works and how to use error boundary in your Blazor applications. All with live working demo.";
    private string BaseUrl => configuration.GetValue<string>("baseUrl");
    private DateTime CreatedOn = new DateTime(2022,1,16,22,30,0);
    private DateTime ModifiedOn = new DateTime(2022,1,23,22,30,0);
    private string Slug = "blazor-wasm-exception-handling-and-error-boundary";

    private ErrorBoundary errorBoundary = default!;

    private void Recover()
    {
        errorBoundary?.Recover();
    }
}