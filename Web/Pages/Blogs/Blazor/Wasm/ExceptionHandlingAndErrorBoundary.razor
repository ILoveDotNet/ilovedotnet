@page "/blogs/blazor-wasm-exception-handling-and-error-boundary"
@inherits ExceptionHandlingAndErrorBoundaryBase
@using Web.Pages.Blogs.Blazor.Wasm.Demo
@using Humanizer
@inject IConfiguration configuration

<PageTitle>Blazor WASM Exception Handling and Error Boundary - I ❤️ DotNet</PageTitle>

<HeadContent>
    <meta name="description" content="In this post I will teach you how exception handling works and how to use error boundary in your Blazor applications. All with live working demo.">
    <meta name="keywords" content=".NET, DotNet, I Love DotNet, I ❤️ DotNet, Blazor, Blazor (WebAssembly), Blazor Wasm, C#, Entity Framework Core, LINQ, Exception Handling, Error Boundary">
    <meta name="url" content="https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/">
    <meta name="identifier-URL" content="https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/">
    <meta property="og:site_name" content="I Love DotNet" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="Blazor WASM Exception Handling and Error Boundary" />
    <meta property="og:description" content="In this post I will teach you how exception handling works and how to use error boundary in your Blazor applications. All with live working demo." />
    <meta property="og:url" content="https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Blazor WASM Exception Handling and Error Boundary" />
    <meta name="twitter:description" content="In this post I will teach you how exception handling works and how to use error boundary in your Blazor applications. All with live working demo." />
    <meta name="twitter:url" content="https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/" />
    <meta property="article:published_time" content="2022-01-16T22:30:00.000Z" />
    <meta property="article:modified_time" content="2022-01-16T22:30:00.000Z" />
    <meta property="article:tag" content=".NET" />
    <meta property="article:tag" content="DotNet" />
    <meta property="article:tag" content="I Love DotNet" />
    <meta property="article:tag" content="I ❤️ DotNet" />
    <meta property="article:tag" content="Blazor" />
    <meta property="article:tag" content="Blazor (WebAssembly)" />
    <meta property="article:tag" content="Blazor Wasm" />
    <meta property="article:tag" content="C#" />
    <meta property="article:tag" content="Entity Framework Core" />
    <meta property="article:tag" content="LINQ" />
    <meta property="article:tag" content="Exception Handling" />
    <meta property="article:tag" content="Error Boundary" />
    <link rel="sitemap" type="application/xml" title="Sitemap" href="https://www.ilovedotnet.org/sitemap.xml" />
    <link rel="alternate" type="application/rss+xml" href="https://www.ilovedotnet.org/atom.xml">
    <link rel="alternate" href="https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/" hreflang="en" />
    <link rel="alternate" href="https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/" hreflang="x-default" />
    <link rel="canonical" href="https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/" />
    <link rel="index" title="Blazor WASM Exception Handling and Error Boundary - I ❤️ DotNet" href="https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/" />
    @(new MarkupString(
    $@"<script type=""application/ld+json"">
    {{
        ""@context"": ""https://schema.org"",
        ""@type"": ""Article"",
        ""publisher"": {{
            ""@type"": ""Organization"",
            ""name"": ""I Love DotNet"",
            ""url"": ""https://www.ilovedotnet.org/"",
            ""logo"": {{
                ""@type"": ""ImageObject"",
                ""url"": ""https://www.ilovedotnet.org/favicon.ico"",
                ""width"": 16,
                ""height"": 16
            }}
        }},
        ""author"": {{
            ""@type"": ""Person"",
            ""name"": ""Abdul Rahman Shabeek Mohamed"",
            ""image"": {{
                ""@type"": ""ImageObject"",
                ""url"": ""//https://media-exp1.licdn.com/dms/image/C5603AQGIbBUf4NvSqA/profile-displayphoto-shrink_200_200/0/1588467007026?e=1648080000&v=beta&t=bbZe_QpTmS_g0w0DxVaJGLPgyXU1bu41QyppAIhZNss"",
                ""width"": 250,
                ""height"": 250
            }},
            ""url"": ""https://www.ilovedotnet.org/author/abdulrahman/"",
            ""sameAs"": [
                ""https://www.linkedin.com/in/fingers10""
            ]
        }},
        ""headline"": ""Blazor WASM Exception Handling and Error Boundary"",
        ""url"": ""https://www.ilovedotnet.org/blogs/blazor-wasm-exception-handling-and-error-boundary/"",
        ""datePublished"": ""2022-01-16T22:30:00.000Z"",
        ""dateModified"": ""2022-01-16T22:30:00.000Z"",
        ""image"": {{
            ""@type"": ""ImageObject"",
            ""url"": ""https://www.ilovedotnet.org/image/blogs/blazor/wasm/blazor-wasm-exception-handling-and-error-boundary-1200w.png"",
            ""width"": 1265,
            ""height"": 827
        }},
        ""keywords"": ""I Love DotNet, Blogs, Blazor, Blazor (WebAssembly), Exception Handling, Error Boundary"",
        ""description"": ""In this post I will teach you how exception handling works and how to use error boundary in your Blazor applications. All with live working demo."",
        ""mainEntityOfPage"": {{
            ""@type"": ""WebPage"",
            ""@id"": ""https://www.ilovedotnet.org/""
        }}
    }}
    </script>"))
</HeadContent>

<section class="[ flex ] [ p-5 md:px-20 ] [ space-x-5 ]">
    <article class="[ space-y-5 ]">
        <header class="[ space-y-2 ]">
            <figure>
                <img srcset="image/blogs/blazor/wasm/blazor-wasm-exception-handling-and-error-boundary-400w.png 400w,
                             image/blogs/blazor/wasm/blazor-wasm-exception-handling-and-error-boundary-1200w.png 1200w"
                     sizes="(max-width: 400px) 480px,
                            1200px"
                     alt="Blazor wasm exception handling and error boundary" loading="lazy" />
            </figure>
            <h2 class="[ dark:text-white ] [ font-semibold text-xl ]">Blazor WASM Exception Handling and Error Boundary</h2>
            <section class="[ flex flex-col md:flex-row justify-between ] [ space-y-1 md:space-y-0 ] [ dark:text-white ] [ font-bold ]">
                <p>Authors - <a href="@(configuration.GetValue<string>("authors:Abdul Rahman"))" class="[ underline ]" target="_blank">Abdul Rahman (Content Writer)</a>, <a href="@(configuration.GetValue<string>("authors:Regina Sharon"))" class="[ underline ]" target="_blank">Regina Sharon (Graphic Designer)</a></p>
                <time datetime="2022-01-16 21:00:00">Last updated @(new DateTime(2022,1,16,22,30,0).Humanize())</time>
            </section>
        </header>
        <section class="[ dark:text-white ] [ space-y-2 ] [ leading-relaxed ]">
            <p>
                Exceptions are common in all apps. We can handle known exceptions which we expect using <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">try</code>
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">catch</code> blocks. But this cannot be the case always. Some times we might end up in unforeseen
                run time unhandled exceptions. There are different ways to handle exceptions. Luckily with <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">blazor</code>
                we have exception handling built in in two different ways.
            </p>

            <GithubGistSnippet Title="Chat component to simulate exception" UserId="fingers10" FileName="c2b5d43dcc0017bafcecd995772f3f69"></GithubGistSnippet>

            <ol class="[ list-decimal ] [ ml-3.5 ]">
                <li>Global Exception Handling</li>
                <li>Error Boundary</li>
            </ol>

            <h3 class="[ font-semibold text-lg ]">Global Exception Handling</h3>

            <p>
                Blazor has global error handling element <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@(@"<div id=""blazor-error-ui"">")</code> in <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">index.html</code>. This will act
                as an global error handler which will catch any unhanled exception across blazor app and display nice error UI codesent inside
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@(@"<div id=""blazor-error-ui"">")</code> at the bottom of the screen by default and logs the error stack trace to browser
                console. This will also have reload option to reload the app to restore the app to correct working state.
            </p>

            <GithubGistSnippet Title="Blazor Global Exception Handling" UserId="fingers10" FileName="57a183a3489acca5760391d728bf712c"></GithubGistSnippet>

            <DemoSnippet Title="Global Exception Handling">
                <DemoContent>
                    <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
                    <Chat></Chat>
                </DemoContent>
            </DemoSnippet>

            <h3 class="[ font-semibold text-lg ]">Error Boundary</h3>

            <p>
                Though <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@(@"<div id=""blazor-error-ui"">")</code> handles all unhandled exceptions it will be nice to restrict the error
                handling boundary and have better control of the error message and error UI. That said <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">.Net 6</code> introduced
                <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@("<ErrorBoundary>")</code> to serve this purpose. We can wrap any component inside <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@("<ErrorBoundary>")</code> and this
                will take care of showing error UI when an unhandled exception occurs inside the component.
            </p>

            <GithubGistSnippet Title="Blazor Error Boundary" UserId="fingers10" FileName="b26cd84ae5ee60c935050cc372c7d727"></GithubGistSnippet>

            <DemoSnippet Title="Error Boundary">
                <DemoContent>
                    <ErrorBoundary>
                        <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
                        <Chat></Chat>
                    </ErrorBoundary>
                </DemoContent>
            </DemoSnippet>

            <p>
                We can control the error message with our own custom error message and error UI using <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">@("<ErrorContent>")</code>. From now incase of any
                unhandled exception, our custom error UI will be displayed.
            </p>

            <GithubGistSnippet Title="Blazor Error Boundary with custom Error UI" UserId="fingers10" FileName="de665e941c3efd35ec2115db3c4b1a98"></GithubGistSnippet>

            <DemoSnippet Title="Error Boundary with Custom Error UI">
                <DemoContent>
                    <ErrorBoundary>
                        <ChildContent>
                            <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
                            <Chat></Chat>
                        </ChildContent>
                        <ErrorContent>
                            <div class="[ bg-red-500 ]">
                                <p class="[ text-white ]">An error occured while establishing a connection. Please try again later.</p>
                            </div>
                        </ErrorContent>
                    </ErrorBoundary>
                </DemoContent>
            </DemoSnippet>

            <p>
                So far so good. But doesn't this leave a bad user experience? How will the user retry the action? One way is to reload the page.
                But there is an another easy option called Recovery in Error Boundary. All we need to do is to add a reference to Error Boundary
                and call <code class="[ p-0.5 ] [ border border-black ] [ dark:border-white ]">errorBoundary?.Recover()</code> method to retry the action.
            </p>

            <GithubGistSnippet Title="Blazor Error Boundary with custom Error UI and Recovery" UserId="fingers10" FileName="28dfa506cb0e53f4ce0469f735f89bfe"></GithubGistSnippet>

            <DemoSnippet Title="Error Boundary with Custom Error UI and Recovery">
                <DemoContent>
                    <ErrorBoundary @ref="@errorBoundary">
                        <ChildContent>
                            <p class="[ text-black ] [ dark:text-white ]"><b>Scenario - Let's simulate an error connecting to chat agent</b></p>
                            <Chat></Chat>
                        </ChildContent>
                        <ErrorContent>
                            <div class="[ bg-red-500 ]">
                                <p class="[ text-white ]">An error occured while establishing a connection. Please try again later.</p>
                            </div>
                        </ErrorContent>
                    </ErrorBoundary>

                    <button type="button" class="[ bg-fuchsia-500 ] [ px-4 py-2 ] [ rounded-md ] [ text-white ]" @onclick="Recover">
                        Click to recover
                        <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-activity ] [ inline ]" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                            <path d="M3 12h4l3 8l4 -16l3 8h4"></path>
                        </svg>
                    </button>
                </DemoContent>
            </DemoSnippet>
        </section>
    </article>
</section>