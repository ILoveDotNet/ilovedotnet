@page "/blogs/blazor-wasm-publishing-to-github-pages"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Publishing</ContentHighlight> Blazor apps to GitHub Pages.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#publishing-to-github-pages")" Match="NavLinkMatch.All">
                    Publishing to GitHub Pages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            With ASP.NET Blazor WebAssembly (WASM) you can create .NET web applications that run completely inside of the browser sandbox. The publish 
            output of a Blazor WASM project are <strong>all static files</strong>. Now that you can run .NET web applications without server-side code, 
            you can deploy these applications to IIS or various static site hosts, such as Azure Static Web Apps and GitHub Pages.With the Blazor WebAssembly 
            hosting model:
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>The Blazor app, its dependencies, and the .NET runtime are downloaded to the browser in parallel.</li>
            <li>The app is executed directly on the browser UI thread.</li>
        </ul>

        <h3 id="publishing-to-github-pages" class="[ font-semibold text-lg ]">Publishing to GitHub Pages</h3>

        <p>
            For this, your application source code must be inside of a GitHub repository. First, you need to create a local Git repository and commit your 
            source code to the repository using these commands:
        </p>

        <h4 class="[ font-semibold text-base ]">Push Blaozr Project to GitHub</h4>

        <ol>

        </ol>

        <h4 class="[ font-semibold text-base ]">Create a GitHub Actions Workflow</h4>

        <ol>

        </ol>

        <h4 class="[ font-semibold text-base ]">GitHub Pages</h4>

        <ol>

        </ol>

        <h4 class="[ font-semibold text-base ]">Configure CNAME</h4>

        <ol>

        </ol>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>

        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Blazor WASM Publishing to GitHub Pages";
    private string Description = "In this post I will teach how to publish your Blazor applications to GitHub Pages. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 7, 17, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 7, 17, 22, 30, 0);
    private string Slug = "blazor-wasm-publishing-to-github-pages";
    private string PosterPath = "blogs/blazor/wasm";
    private string Channel = "blazor";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Blazor", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(2) { "Publishing", "GitHub Pages" };
}