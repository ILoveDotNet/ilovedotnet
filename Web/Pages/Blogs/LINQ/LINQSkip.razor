@page "/blogs/using-linq-skip-to-select-specific-data"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents
@using LINQDemoComponents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(LINQSkip)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Skip</ContentHighlight> and <ContentHighlight>SkipWhile</ContentHighlight> 
            in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-take-to-select-specific-data" Match="NavLinkMatch.All">Using LINQ Take to Select Specific Data in Collections</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#skip")" Match="NavLinkMatch.All">
                    Perform partition using Skip
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#skip-while")" Match="NavLinkMatch.All">
                    Perform partition using SkipWhile
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            We can perform skip and select specific piece of data from beginning of a collection using LINQ. We're going to use Skip() and SkipWhile() methods. Let's take a look at each of 
            these methods and how they work.
        </p>

        <h3 id="skip" class="[ font-semibold text-lg ]">Perform partition using Skip</h3>

        <p>
            When listing the items, its not always possible to list all the items. Sometimes we need to limit and partition the items from database or need a pagination in UI to display subset 
            of records for better UX (User Experience) as not all the datas are required everytime unless its a reporting task. So <ContentHighlight>Skip(n)</ContentHighlight> allows you to 
            skip specific items from beginning of collection. It skips number of items given as input and returns records after that number.
        </p>

        <GithubGistSnippet Title="LINQ Skip" UserId="fingers10" FileName="476855ddff7fdc14b08d788652d6ceb7"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Skip Clause Demo">
            <p>
                Let's try LINQ Skip
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight></li>
                <li>Enter the number of products you would like to list.</li>
                <li>Click on Skip Products</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <SkipDemo></SkipDemo>
        </DemoSnippet>

        <h3 id="skip-while" class="[ font-semibold text-lg ]">Perform conditional partition using SkipWhile</h3>

        <p>
            We can also extract data conditionally using <ContentHighlight>SkipWhile</ContentHighlight> while the condition evaluates to true. Note that Enumeration stops when the predicate
            function returns false for an element or when source contains no more elements.
        </p>

        <GithubGistSnippet Title="LINQ SkipWhile" UserId="fingers10" FileName="c621f54b1501a5bb5b5df105f28e2634"></GithubGistSnippet>

        <DemoSnippet Title="LINQ SkipWhile Clause Demo">
            <p>
                Let's try LINQ SkipWhile
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight></li>
                <li>Enter the condition based on which you like to select.</li>
                <li>Click on SkipWhile Products</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <SkipWhileDemo></SkipWhileDemo>
        </DemoSnippet>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to locate partition and extract specific data within collection using <ContentHighlight>Skip</ContentHighlight> and 
            <ContentHighlight>SkipWhile</ContentHighlight>. We also saw how we can pass an condition to partition data. Skip() can be used together with Take() to implement pagination. All 
            these can be used with any <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Using LINQ Skip to Select Specific Data";
    private string Description = "In this post I will teach you how to select specific data within collections using LINQ in .NET. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 10, 23, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 10, 23, 22, 30, 0);
    private string Slug = "using-linq-skip-to-select-specific-data";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(3) { "Skip", "SkipWhile", "Partition" };
}