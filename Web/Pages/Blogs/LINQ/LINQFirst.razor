@page "/blogs/using-linq-first-to-select-single-data"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents
@using LINQDemoComponents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(LINQFirst)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>First</ContentHighlight> and <ContentHighlight>FirstOrDefault</ContentHighlight> 
            in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-where-to-filter-data" Match="NavLinkMatch.All">Using LINQ Where to Filter Data in Collections</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#first")" Match="NavLinkMatch.All">
                    Search forward for an element using First
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#first-or-default")" Match="NavLinkMatch.All">
                    Search forward for an element using FirstOrDefault
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#when-to-use-which")" Match="NavLinkMatch.All">
                    When to use which?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            We can select single piece of data from a collection using LINQ. We're going to use First() and FirstOrDefault() methods. Let's take a look at each of these methods and how they 
            work.
        </p>

        <h3 id="first" class="[ font-semibold text-lg ]">Search forward for an element using First</h3>

        <p>
            When searching, some of the methods will actually throw an exception if you don't find anything based on the expression. So, for example, first, you pass in your lambda 
            expression of what you're looking for. It searches forward in the collection and finds that first one that matches the expression and returns that. If it doesn't find it, it 
            throws an exception.
        </p>

        <GithubGistSnippet Title="LINQ First" UserId="fingers10" FileName="6d95a082016723df56fc4d4db260681a"></GithubGistSnippet>

        <DemoSnippet Title="LINQ First Clause Demo">
            <p>
                Let's try LINQ First
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight></li>
                <li>Enter the column names you would like to select.</li>
                <li>Click on Get First product</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <FirstDemo></FirstDemo>
        </DemoSnippet>

        <h3 id="first-or-default" class="[ font-semibold text-lg ]">Search forward for an element using FirstOrDefault</h3>

        <p>
            The FirstOrDefault(), you pass in a lambda expression of what you're looking for and optionally a default value. What it does is it searches forward in the collection, and it 
            returns null if no value is found, or if you supply a default value, it will return that value instead of null.
        </p>

        <GithubGistSnippet Title="LINQ FirstOrDefault" UserId="fingers10" FileName="ad3410e56c152211562f923a3f1547cf"></GithubGistSnippet>

        <DemoSnippet Title="LINQ FirstOrDefault Clause Demo">
            <p>
                Let's try LINQ FirstOrDefault
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight></li>
                <li>Enter the column names you would like to select.</li>
                <li>Click on First Or Default product</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <FirstOrDefaultDemo></FirstOrDefaultDemo>
        </DemoSnippet>

        <h3 id="when-to-use-which" class="[ font-semibold text-lg ]">When to use which?</h3>
        
        <p>
            So now I've shown you all these LINQ queries, but which ones do you use and when do you use them? So I'm going to do a comparison between the First() versus the FirstOrDefault() 
            methods. If you expect the element to be present in the collection, you can use First(). But if you're not sure if that element is present, then use FirstOrDefault(), and that has 
            to do with exceptions, right? Because the First() is going to throw an exception if something is not found. So if you want to handle that or maybe rethrow an exception if something's not found, you could use First() or Last(). Me, I'd rather not deal with exceptions, so I 
            really prefer FirstOrDefault(). Also, this gives us back a null or some other default value, and I find it easier to check for null than actually check for an exception.
        </p>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to locate single data within collection using <ContentHighlight>First</ContentHighlight> and <ContentHighlight>FirstOrDefault</ContentHighlight>. We 
            saw that there's an option to supply your own default value, that sometimes you need to catch exceptions or sometimes you need to check for null or that default value, depending on 
            the method that you're calling. Now I always like using all the <ContentHighlight>OrDefault()</ContentHighlight> methods so that I can avoid anybody throwing exceptions. To me, 
            throwing exceptions are not something that you want to use as a regular way of programming. Those should be exceptions. All these can be used with any 
            <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Using LINQ First to Select Single Data";
    private string Description = "In this post I will teach you how to select single data within collections using LINQ in .NET. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2022, 9, 25, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2022, 9, 25, 22, 30, 0);
    private string Slug = "using-linq-first-to-select-single-data";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(2) { "First", "FirstOrDefault", "Search forward" };
}