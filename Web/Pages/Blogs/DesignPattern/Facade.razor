@page "/blogs/structural-design-pattern-facade"
@using DesignPatternDemoComponents.Facade
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(Facade)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Facade Design Pattern</ContentHighlight> in .NET.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>
        
        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#structure")" Match="NavLinkMatch.All">
                    Structure
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#use-cases")" Match="NavLinkMatch.All">
                    Use Cases
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#advantages")" Match="NavLinkMatch.All">
                    Advantages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#disadvantages")" Match="NavLinkMatch.All">
                    Disadvantages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#related-patterns")" Match="NavLinkMatch.All">
                    Related Patterns
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>
        
        <p>
            The <ContentHighlight>Facade</ContentHighlight> pattern, a stalwart from the Gang of Four design patterns, serves as a 
            <ContentHighlight>unified interface</ContentHighlight> to a <ContentHighlight>subsystem</ContentHighlight>, simplifying its usage. Imagine a world 
            where operating an entertainment system involves intricate steps—enter the Facade pattern. In this blog, we'll explore its real-life application 
            through a entertainment service, delve into its structure, uncover its use cases, weigh its advantages and disadvantages, touch upon related patterns, 
            and conclude with a concise summary.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="structure" class="[ font-semibold text-lg ]">Structure</h3>
        
        <p>
            The Facade pattern, <ContentHighlight>encapsulated</ContentHighlight> in a facade (like our "entertainment facade"), orchestrates subsystem 
            classes <ContentHighlight>DvdPlayer</ContentHighlight>, <ContentHighlight>Sound System</ContentHighlight>, and 
            <ContentHighlight>Projector</ContentHighlight> service. The facade shields clients from the complexities, acting as a gateway to the subsystem, 
            promoting an <ContentHighlight>organized and manageable</ContentHighlight> structure.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <GithubGistSnippet Title="Code Sample - Facade Pattern" UserId="fingers10" FileName="17e37fa5e5ad6f0dbe533dd67453539e"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            In the above code snippet, Subsystem Classes <ContentHighlight>DvdPlayer</ContentHighlight>, <ContentHighlight>SoundSystem</ContentHighlight>, and 
            <ContentHighlight>Projector</ContentHighlight> represent individual components of the home entertainment system. Facade Class 
            <ContentHighlight>EntertainmentFacade class</ContentHighlight> acts as a facade, providing simplified methods 
            <ContentHighlight>TurnOnEntertainmentSystem</ContentHighlight> and <ContentHighlight>TurnOffEntertainmentSystem</ContentHighlight>. These methods 
            internally manage the individual components, <ContentHighlight>abstracting</ContentHighlight> away their complexities. Client Code 
            <ContentHighlight>Program</ContentHighlight> creates an instance of <ContentHighlight>EntertainmentFacade</ContentHighlight> and uses its methods to 
            turn on and off the entire entertainment system. The client is shielded from the details of interacting with each subsystem separately. This example 
            demonstrates how the Facade pattern can simplify the usage of a complex system, making it easy for clients to perform common tasks without dealing 
            with the intricacies of individual components.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Facade Pattern Demo">
            <p>
                Let's try <ContentHighlight>Facade</ContentHighlight> Demo, Click on the <ContentHighlight>Use Entertainment System via Facade</ContentHighlight> 
                Button to see the demo on the screen. Click the button starts the Entertainment system and streams the movie and shuts down the system after 
                the movie is over. For demo purpose the Result is shown in the screen.
            </p>
            <GithubGistSnippet Title="Facade Pattern Demo" UserId="fingers10" FileName="d048fce4a5c0f880dca19070257f2911"></GithubGistSnippet>
            <FacadeDemo></FacadeDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="use-cases" class="[ font-semibold text-lg ]">Use Cases</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>
                <ContentHighlight>Simplifying Complexity</ContentHighlight> - When dealing with intricate subsystems, the Facade pattern offers a clean, 
                high-level <ContentHighlight>interface</ContentHighlight>, shielding clients from the nitty-gritty details.
            </li>
            <li>
                <ContentHighlight>Decoupling Dependencies</ContentHighlight> - In scenarios with numerous dependencies between clients and implementation classes, 
                introducing a facade <ContentHighlight>breaks the tight coupling</ContentHighlight>, fostering a more flexible design.
            </li>
            <li>
                <ContentHighlight>Integration with Legacy Systems</ContentHighlight> - Facades prove invaluable when bridging new and legacy systems, 
                <ContentHighlight>abstracting</ContentHighlight> away the intricacies of dealing with legacy code.
            </li>
            <li>
                <ContentHighlight>Content Management Systems</ContentHighlight> - Streamlining operations in systems handling diverse content types, such as 
                articles, images, and videos.
            </li>
            <li>
                <ContentHighlight>Multimedia Playback</ContentHighlight> - <ContentHighlight>Abstracting</ContentHighlight> the complexities of supporting various 
                media formats and providing a unified playback control <ContentHighlight>interface</ContentHighlight>.
            </li>
            <li>
                <ContentHighlight>Payment Processing in E-commerce</ContentHighlight> - Facilitating a unified <ContentHighlight>interface</ContentHighlight> for 
                processing payments, irrespective of the underlying payment gateways.
            </li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="advantages" class="[ font-semibold text-lg ]">Advantages</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>
                <ContentHighlight>Reduced Client Complexity</ContentHighlight> - Clients interact with a simplified facade, oblivious to the intricate workings of 
                the subsystem.
            </li>
            <li>
                <ContentHighlight>Weak Coupling</ContentHighlight> - Facades promote loose coupling between clients and subsystems, allowing subsystem components 
                to evolve independently.
            </li>
            <li>
                <ContentHighlight>Open-Closed Principle</ContentHighlight> - Clients can easily adapt to changes in subsystem components without modification, 
                adhering to the open-closed principle.
            </li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="disadvantages" class="[ font-semibold text-lg ]">Disadvantages</h3>

        <p>
            <ContentHighlight>Potential Overhead</ContentHighlight> - Introducing facades might add a layer, potentially introducing overhead, especially in 
            simpler systems.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="related-patterns" class="[ font-semibold text-lg ]">Related Patterns</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li><ContentHighlight>Abstract Factory</ContentHighlight> pattern</li>
            <li><ContentHighlight>Mediator</ContentHighlight> pattern</li>
            <li><ContentHighlight>Adapter</ContentHighlight> pattern</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In essence, the <ContentHighlight>Facade</ContentHighlight> pattern <ContentHighlight>simplifies</ContentHighlight> the usage of complex subsystems, 
            providing a clean and <ContentHighlight>unified interface</ContentHighlight>. It excels in scenarios where <ContentHighlight>reducing client 
            complexity</ContentHighlight>, <ContentHighlight>decoupling dependencies</ContentHighlight>, and 
            <ContentHighlight>integrating with legacy systems</ContentHighlight> are paramount. As we wrap up this exploration, keep in mind that the Facade 
            pattern, while powerful, finds its strength in its judicious application alongside other complementary design patterns.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p class="[ font-bold ] [ p-5 ] [ flex items-center justify-center ]">
            <a href="https://whatsapp.com/channel/0029VaAGMV2LtOj5S5MHd23h" target="_blank">
                <span>To learn more interesting things about .NET in a simple way, 👉🏼 Click here to Join I ❤️ .NET </span>
                <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-brand-whatsapp ] [ fill-green-500 ] [ inline ]" width="30" height="30" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                    <path d="M3 21l1.65 -3.8a9 9 0 1 1 3.4 2.9l-5.05 .9"></path>
                    <path d="M9 10a.5 .5 0 0 0 1 0v-1a.5 .5 0 0 0 -1 0v1a5 5 0 0 0 5 5h1a.5 .5 0 0 0 0 -1h-1a.5 .5 0 0 0 0 1"></path>
                </svg>
                <span>WhatsApp Channel for free to get 🔔 notified about new articles and other updates.</span>
            </a>
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Structural Design Pattern - Facade";
    private string Description = "In this post I will teach you Structural Facade Design Pattern in .NET. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2024, 1, 21, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2024, 1, 21, 22, 30, 0);
    private string Slug = "structural-design-pattern-facade";
    private string PosterPath = "Blogs/Design-Pattern";
    private string Channel = "design-pattern";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Design-Pattern", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(2) { "Structural", "Facade" };
}