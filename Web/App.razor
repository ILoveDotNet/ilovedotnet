@implements IAsyncDisposable

<CascadingValue Value="SmallDevice">
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p class="[ dark:text-white ]" role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingValue>

@code {
    const ushort SMALLDEVICEWIDTH = 640;

    private ushort viewPortWidth;
    private IJSObjectReference? module;
    private bool SmallDevice;

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/viewport.js");

        viewPortWidth = await module.InvokeAsync<ushort>("getViewPortWidth");

        SmallDevice = viewPortWidth < SMALLDEVICEWIDTH;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}