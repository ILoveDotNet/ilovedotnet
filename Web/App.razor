@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@using Microsoft.AspNetCore.Components.WebAssembly.Services;
@using System.Reflection;
@implements IAsyncDisposable;
@inject IWebAssemblyHostEnvironment Environment;
@inject LazyLoaderService LazyLoader;

<CascadingValue Value="SmallDevice">
    <Router AppAssembly="@typeof(Program).Assembly" 
            AdditionalAssemblies="@LazyLoader.AdditionalAssemblies" 
            OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        @* <Navigating>
            Some text to show during navigaitng to lazy loaded assembly if it takes more time like an progress bar or indicator.
            https://learn.microsoft.com/en-us/aspnet/core/blazor/webassembly-lazy-load-assemblies?view=aspnetcore-9.0#user-interaction-with-navigating-content
        </Navigating> *@
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <div class="[ fixed ] [ top-12 ] [ w-full ] [ h-full ] [ flex flex-col items-center justify-center ] [ space-y-4 ]">
                    <img src="/image/error/error-404.webp" />
                    <section class="[ text-4xl md:text-9xl ]">
                        <span class="[ dark:text-white ]">I</span>
                        <span class="animate-pulse">💔</span>
                        <span class="[ text-indigo-600 ] [ dark:text-white ]">.NET</span>
                    </section>
                    <p class="[ dark:text-white ] [ text-2xl ] [ text-center ]" role="alert">Sorry, there's nothing at this address.</p>
                </div>
            </LayoutView>
        </NotFound>
    </Router>
    @if (Environment.IsProduction())
    {    
        <Blazor.Analytics.Components.NavigationTracker />
    }
</CascadingValue>

@code {
    const ushort SMALLDEVICEWIDTH = 640;

    private ushort viewPortWidth;
    private IJSObjectReference? module;
    private bool SmallDevice = true;

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private AppState AppState { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/viewport.js");

            viewPortWidth = await module.InvokeAsync<ushort>("getViewPortWidth");

            SmallDevice = viewPortWidth < SMALLDEVICEWIDTH;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnNavigateAsync(NavigationContext args)
    {
        @* if (args.Path.Contains("blogs", StringComparison.OrdinalIgnoreCase) || args.Path.Contains("talks", StringComparison.OrdinalIgnoreCase))
        {
            HideNavigationMenu();
        } *@

        await LazyLoader.OnNavigateAsync(args);
    }

    private void HideNavigationMenu()
    {
        if (!SmallDevice) 
        {
            AppState.HideNavigationMenu();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}