@page "/blogs/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi"
@inherits BasePage

<Content FileName=@nameof(PerformanceTestingInASPNET) UseNewTableOfContentsMenu=true>
    <ContentBody>
        <What>
            <p>
                Performance testing helps you understand how your application behaves under heavy load, such as when
                <ContentHighlight>10, 100, or 10,000 users</ContentHighlight> access it simultaneously. This involves
                using <ContentHighlight>performance, load, and stress tests</ContentHighlight> to identify bottlenecks
                and ensure your application performs reliably. Focus on <ContentHighlight>high-usage features (hot
                paths)</ContentHighlight>, as they are most likely to slow down under load. Begin with simple tests,
                particularly those targeting <ContentHighlight>shared resources like databases</ContentHighlight>, to
                establish a foundation for optimization.
            </p>
            <p>
                When conducting these tests, avoid running them in <ContentHighlight>production environments
                </ContentHighlight> unless it's carefully planned, as they can strain resources and disrupt users.
                Leverage <ContentHighlight>metrics and telemetry</ContentHighlight> to identify performance issues and
                prioritize fixes. Keep in mind that addressing one bottleneck can shift the issue elsewhere, which is a
                natural part of performance testing. To perform these tests, use tools like <ContentHighlight>NBomber
                for .NET</ContentHighlight>, which allows you to write tests in C#. For more advanced needs,
                consider <ContentHighlight>JMeter</ContentHighlight>, a standard load-testing framework.
            </p>
            <p>
                It's best to test <ContentHighlight>APIs</ContentHighlight> rather than UIs, as the backend typically
                contains <ContentHighlight>shared resources</ContentHighlight> that need optimization. Run your tests in
                <ContentHighlight>release mode</ContentHighlight> to obtain the most accurate results. Always compare
                the <ContentHighlight>performance of new code versions</ContentHighlight> against previous ones to
                identify potential regressions or improvements. These comparisons will help you refine your
                application's performance iteratively.
            </p>
        </What>

        <Why>
            <p>
                Performance testing revolves around answering key questions about your application's behavior. Monitor
                metrics like <ContentHighlight>throughput and response times</ContentHighlight> to ensure consistent
                performance after an initial <ContentHighlight>warm-up period</ContentHighlight>. Pay close attention to
                <ContentHighlight>memory usage</ContentHighlight>, as uncontrolled growth could indicate
                <ContentHighlight>leaks</ContentHighlight> that eventually lead to crashes. Stabilizing memory under
                load is critical to maintaining application reliability.
            </p>
            <p>
                Another key focus is identifying the <ContentHighlight>breaking point</ContentHighlight> of your
                application. Use varying <ContentHighlight>load levels and durations</ContentHighlight> to pinpoint when
                performance starts to degrade. This analysis helps determine whether <ContentHighlight>scaling
                </ContentHighlight>, such as adding API instances or increasing persistence layer resources, is
                necessary. If you've released a <ContentHighlight>new version</ContentHighlight> of your application,
                compare its performance to <ContentHighlight>previous versions</ContentHighlight>. Look for differences
                in <ContentHighlight>response times</ContentHighlight> or <ContentHighlight>throughput
                </ContentHighlight> and evaluate whether the changes are acceptable.
            </p>
            <p>
                Performance testing is an <ContentHighlight>iterative process</ContentHighlight>. Refine your
                <ContentHighlight>test code and parameters</ContentHighlight> based on the results to continuously
                improve. Analyzing <ContentHighlight>metrics</ContentHighlight> and acting on the data will help you
                ensure your application performs reliably under different load conditions.
            </p>
        </Why>

        <How>
            <p>
                To perform performance testing in ASP.NET Web API,
            </p>

            <ol>
                <li>
                    <p>
                        <ContentHighlight>Create a Console App:</ContentHighlight> Create a new console app using the
                        built-in template. Place the project in a separate <ContentHighlight>subfolder
                        </ContentHighlight>, such as `perf`, within your main code repository to keep it independent of
                        your main application code.
                    </p>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/solution-structure.png"
                            alt="solution-structure" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Install NBomber:</ContentHighlight> Check the NBomber documentation for
                        guidance. Add the <ContentHighlight>NBomber NuGet package</ContentHighlight> to your console
                        app. NBomber is free for personal use and offers simple setup instructions, including a Hello
                        World tutorial.
                    </p>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Define a Scenario:</ContentHighlight> Create a <ContentHighlight>scenario
                        </ContentHighlight> using NBomber. Write logic to perform a specific task (e.g., hitting an API
                        endpoint). Return a status (`Ok` or `Fail`) based on the response. Use a <ContentHighlight>
                            shared HttpClient</ContentHighlight> to avoid excessive resource consumption.
                    </p>

                    <GithubGistSnippet Title="Define Scenario" UserId="fingers10"
                        FileName="e840796b838e18a07b88a6fe888c908d"></GithubGistSnippet>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Configure Load Generation:</ContentHighlight> Set up <ContentHighlight>load
                            generation logic</ContentHighlight>. For example, inject 100 requests per second for 30
                        seconds. Register the scenario with the NBomber runner and configure it to run.
                    </p>

                    <GithubGistSnippet Title="Configure Load Generation" UserId="fingers10"
                        FileName="dde357664daece22e970b0d5b262698b"></GithubGistSnippet>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Build and Run the App:</ContentHighlight> Build the app to ensure everything
                        is set up correctly. Run your API in <ContentHighlight>release mode</ContentHighlight> using
                        `dotnet run --configuration Release` to ensure optimized performance during testing.
                    </p>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/api-project-running-in-release-mode.png"
                            alt="api-project-running-in-release-mode" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/weather-forecast-response.png"
                            alt="weather-forecast-response" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Execute the Test:</ContentHighlight> Run the test from the terminal using
                        <ContentHighlight>dotnet run</ContentHighlight>. Monitor the displayed information, including 
                        <ContentHighlight>injection rates</ContentHighlight> and response times. Adjust parameters as needed for further runs.
                    </p>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/performance-test-run-logs.png"
                            alt="performance-test-run-logs" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Review the Reports:</ContentHighlight> After the test, review the
                        <ContentHighlight>HTML reports</ContentHighlight> generated by NBomber. Analyze key metrics like
                        throughput, latency, response times, and CPU/memory usage. Watch for patterns such as
                        continually climbing CPU/memory, which might indicate issues.
                    </p>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/performance-report-generated.png"
                            alt="performance-report-generated" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/performance-report-dashboard.png"
                            alt="performance-report-dashboard" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/dotnet-process-metrics.png"
                            alt="dotnet-process-metrics" class="[ w-full ]" />
                    </figure>
                </li>
            </ol>

            <h4>Measuring Http Metrics</h4>

            <p>
                The <ContentHighlight>NBomber.Http library</ContentHighlight> enhances load testing for
                <ContentHighlight>HTTP-based APIs</ContentHighlight>, offering simplified code and additional metrics.
                By using the <ContentHighlight>HTTP object</ContentHighlight> and enabling the <ContentHighlight>
                HttpMetricsPlugin</ContentHighlight>, developers gain insights into their API's performance, such as
                connection and queue duration trends. This process, coupled with iterative refinement, ensures
                comprehensive performance testing and improved application resilience.
            </p>

            <GithubGistSnippet Title="Measuring Http Metrics" UserId="fingers10"
                FileName="39047b61d02bd4cc94d938147d18a962"></GithubGistSnippet>

            <figure>
                <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/performance-report-dashboard-with-http-metrics.png"
                    alt="performance-report-dashboard-with-http-metrics" class="[ w-full ]" />
            </figure>

            <h4>Flat and Ramping Inject</h4>

            <p>
                You can find a lot of load simulation types available <a href="https://nbomber.com/docs/nbomber/load-simulation/" target="_blank">here</a>. 
                In this section lets focus on flat and ramping inject.
            </p>

            <ol>
                <li>
                    <p>
                        <ContentHighlight>Experiment with Load Values:</ContentHighlight> Gradually increase the
                        injection rate to observe system behavior under higher loads. For example, ramp up from 100 to
                        800 new requests per second and analyze the latency, queue duration, and connection metrics.
                    </p>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Handle Test Completion:</ContentHighlight> Note that when the test ends,
                        NBomber waits for any pending requests to complete before finalizing reports. This ensures all
                        data is captured accurately.
                    </p>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Explore Load Simulations:</ContentHighlight> Review the <ContentHighlight>
                        NBomber documentation</ContentHighlight> on load simulation. Understand different methods
                        like <ContentHighlight>RampingInject</ContentHighlight>, which gradually transitions from a
                        starting point to a target load over a specified duration.
                    </p>

                    <GithubGistSnippet Title="Changing Load to Ramping Inject" UserId="fingers10"
                        FileName="90fbce8672000afb78694177c2494aea"></GithubGistSnippet>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Analyze Results:</ContentHighlight> Run the test and evaluate the metrics.
                        Check for trends such as increasing latency or operation timeouts as the load changes. Examine
                        the <ContentHighlight>HTML report</ContentHighlight> for a detailed breakdown of the scenario
                        chart and request performance.
                    </p>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/latency-increase.png"
                            alt="latency-increase" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/increase-in-connection-and-queuing.png"
                            alt="increase-in-connection-and-queuing" class="[ w-full ]" />
                    </figure>
                </li>
            </ol>

            <h4>Running Multiple Scenarios and Authentication</h4>

            <ol>
                <li>
                    <p>
                        We can also run multiple scenario's in parallel. In this example, we have two scenarios: one for
                        reading the Weather forecast with different query parameters. Note that I have used
                        <ContentHighlight>NBomber.Data</ContentHighlight> nuget package to use <ContentHighlight>IDataFeed</ContentHighlight>
                        to pass query parameters from pre defined set. In the another scenario, I have used
                        <ContentHighlight>WithInit()</ContentHighlight> to obtain bearer token and store it in a variable and use it
                        in request header with the help of <ContentHighlight>IdentityModel</ContentHighlight> nuget
                        package. Finally we need to resgiter the scenarios in the test run as shown below.
                    </p>

                    <GithubGistSnippet Title="Multiple Scenarios with Authentication" UserId="fingers10"
                        FileName="76cda9f142dab56056bed630f265e9b4"></GithubGistSnippet>
                </li>
            </ol>

            <h4>Grafana Dashboard and InfluxDB Integration</h4>

            <ol>
                <li>
                    <p>
                        <ContentHighlight>Why Use InfluxDB and Grafana:</ContentHighlight> For longer-running load tests
                        or advanced analysis, leverage <ContentHighlight>InfluxDB</ContentHighlight>, a time-series
                        database, and <ContentHighlight>Grafana</ContentHighlight>, a visualization tool. These tools
                        enable detailed reporting and real-time exploration of test data.
                    </p>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Add the InfluxDBSink NuGet Package:</ContentHighlight> Integrate
                        <ContentHighlight>NBomber.InfluxDBSink</ContentHighlight> by adding its NuGet package to your
                        project. Configure the connection details using a JSON file to link to your InfluxDB instance.
                    </p>

                    <GithubGistSnippet Title="Infra Configuration JSON" UserId="fingers10"
                        FileName="5d5e1651a55b9a563fd92df6c2882f6b"></GithubGistSnippet>

                    <GithubGistSnippet Title="Link Infra Configuration with NBomber Performance Test" UserId="fingers10"
                        FileName="f4140cad8cf838653673013ed4ddc843"></GithubGistSnippet>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Set Up InfluxDB and Grafana Locally:</ContentHighlight> Use <ContentHighlight>
                        Docker Compose</ContentHighlight> for a quick setup. Obtain the sample <ContentHighlight>
                        docker-compose.yaml</ContentHighlight> file, which includes configurations for running
                        <ContentHighlight>InfluxDB (v1.8.1)</ContentHighlight> and <ContentHighlight>Grafana (v8.5.2)</ContentHighlight> containers. 
                        Update ports if needed to avoid conflicts with other services.
                    </p>

                    <GithubGistSnippet Title="Docker Compose YML" UserId="fingers10"
                        FileName="d67234b5ab4d9817c8730ca465a63f6f"></GithubGistSnippet>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Run Containers:</ContentHighlight> Pull the required Docker images and run the
                        containers using <ContentHighlight>docker compose up --detach</ContentHighlight>. This will run
                        InfluxDB and Grafana in the background while keeping your terminal available. Stop the
                        containers later with <ContentHighlight>docker compose down</ContentHighlight>.
                    </p>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Configure InfluxDB as a Data Source in Grafana:</ContentHighlight> Access
                        Grafana (e.g., on <ContentHighlight>http://localhost:3010</ContentHighlight>) and log in with
                        the default credentials (<ContentHighlight>admin/admin</ContentHighlight>). Add a new data
                        source for InfluxDB and use the Docker Compose service name (<ContentHighlight>InfluxDB
                        </ContentHighlight>) and port <ContentHighlight>8086</ContentHighlight>. Specify the database
                        name as <ContentHighlight>NBomber</ContentHighlight>.
                    </p>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/grafana-login.png"
                            alt="grafana-login" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/add-data-source.png"
                            alt="add-data-source" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/select-influx-db.png"
                            alt="select-influx-db" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/setup-url.png"
                            alt="setup-url" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/setup-database.png"
                            alt="setup-database" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/save-setup.png"
                            alt="save-setup" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Import Dashboards:</ContentHighlight> Import preconfigured dashboards from
                        JSON files provided in the NBomber repository. Use the <ContentHighlight>nbomber_sessions
                        </ContentHighlight> JSON for session data and the <ContentHighlight>NBomber</ContentHighlight>
                        JSON for detailed test metrics. Link the imported dashboards to your InfluxDB data source.
                    </p>

                    <p>
                        <strong>Note:</strong> Find the JSON files to import dashboards inside the 
                        <ContentHighlight><a href="https://github.com/fingers10/PerformanceLoadStressTesting" target="_blank">PerformanceLoadStressTesting repo</a></ContentHighlight>
                    </p>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/import-dashboards.png"
                            alt="import-dashboards" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/nbomber-dashboard-in-grafana-with-influx-db.png"
                            alt="nbomber-dashboard-in-grafana-with-influx-db" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/nbomber-dashboards-inside-grafana.png"
                            alt="nbomber-dashboards-inside-grafana" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Run and Monitor Tests:</ContentHighlight> Start your NBomber load tests.
                        During test execution, the <ContentHighlight>NBomber Sessions</ContentHighlight> dashboard
                        displays real-time metrics such as CPU usage, throughput, latency, and data movement. Switch to
                        the <ContentHighlight>NBomber</ContentHighlight> dashboard for scenario-specific details.
                    </p>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/performance-test-run-sessions.png"
                            alt="performance-test-run-sessions" class="[ w-full ]" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/webapi/using-nbomber-for-performance-load-and-stress-testing-in-asp-net-webapi/nbomber-performance-run-visualisation-dashboard.png"
                            alt="NBomber Performance Run Visualisation Dashboard" class="[ w-full ]" />
                    </figure>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Benefits of Aggregated Reporting:</ContentHighlight> While overkill for
                        single-instance tests, this setup is highly beneficial for aggregating results across multiple
                        machines in a cluster, enabling more comprehensive performance analysis.
                    </p>
                </li>
            </ol>
        </How>

        <Summary>
            <p>
                In this article, we learned about <ContentHighlight>NBomber</ContentHighlight>, a performance testing
                framework for .NET applications, We learned how to run a simple performance test and then with
                <ContentHighlight>HttpMetricsPlugin</ContentHighlight> for capturing HTTP-specific metrics, and then
                using <ContentHighlight>NBomber.Data</ContentHighlight> for customizing query string parameters using
                <ContentHighlight>IDataFeed</ContentHighlight>, and advanced load simulations like <ContentHighlight>
                RampingInject</ContentHighlight> along with how to use bearer token in <ContentHighlight>WithInit
                </ContentHighlight> setup.
            </p>

            <p>
                Additionally, we explored integrating <ContentHighlight>InfluxDB</ContentHighlight> and
                <ContentHighlight>Grafana</ContentHighlight> to enhance test reporting and visualization
                by leveraging <ContentHighlight>Docker Compose</ContentHighlight> for setup, configuring
                <ContentHighlight>InfluxDBSink</ContentHighlight>, and <ContentHighlight>importing prebuilt dashboards
                </ContentHighlight> for monitoring test metrics.
            </p>
        </Summary>
    </ContentBody>
</Content>