@page "/blogs/global-exception-handling-in-asp-net-webapi"
@inherits BasePage

<Content FileName=@nameof(GlobalExceptionHandlingInASPNET) UseNewTableOfContentsMenu=true>
    <ContentBody>
        <What>
            <p>
                In this article, let's learn about <ContentHighlight>Global Exception Handling</ContentHighlight> in
                <ContentHighlight>Web API</ContentHighlight> in ASP.NET Core.
            </p>
        </What>

        <Why>
            <p>
                <ContentHighlight>Global Exception Handling</ContentHighlight> allows us to handle exceptions globally
                in <ContentHighlight>one single place</ContentHighlight> inside the application rather than scattering
                try-catch blocks everywhere in the code base. This is a <ContentHighlight>good and clean practice
                </ContentHighlight> that simplifies code maintenance and improves readability.
            </p>

            <p>
                Errors are inevitable in APIs. To standardize error responses, ASP.NET Core supports the Problem Details
                payload as defined by <ContentHighlight>RFC 7807</ContentHighlight>. By enabling the default
                implementation of <ContentHighlight>IProblemDetailsService</ContentHighlight> through <ContentHighlight>
                    AddProblemDetails</ContentHighlight>, we can automatically generate structured error responses. This
                approach integrates seamlessly with middlewares like the exception handler and developer exception page,
                providing clean and consistent error details in both production and development environments. This
                simplifies debugging and enhances the API's usability.
            </p>
        </Why>

        <How>
            <p>
                To implement Global Exception Handling, follow these steps:
            </p>

            <ol>
                <li>
                    <p>
                        Starting .NET 8, We can achieve this using the AddProblemDetails to Get structured error
                        response defined in RFC 7807 standard.
                    </p>

                    <CodeSnippet CssClass="language-csharp">
var builder = WebApplication.CreateBuilder(args);

builder.Services
.AddProblemDetails(options =>
    options.CustomizeProblemDetails = (ctx) =>
    {
        var hostEnv = ctx.HttpContext.RequestServices.GetRequiredService&lt;IHostEnvironment&gt;();
        var logger = ctx.HttpContext.RequestServices.GetRequiredService&lt;ILogger&lt;ProblemDetails&gt;&gt;();

        // exception will hold the thrown exception
        var exception = ctx.HttpContext.Features.Get&lt;IExceptionHandlerFeature&gt;()?.Error;
        
        if (ctx.ProblemDetails.Status == 500)
        {
            logger.LogCritical(exception, exception!.Message);
            
            if (exception is DomainException domainException)
            {
                ctx.ProblemDetails.Title = "An error occurred in our API. Use the trace id when contacting us.";
                ctx.ProblemDetails.Detail = domainException.Message;
            }
            else if (exception is Exception ex)
            {
                ctx.ProblemDetails.Title = "An unexpected fault happened. Try again later.";
                ctx.ProblemDetails.Detail = hostEnv.IsProduction() ? "An unexpected fault happened. Try again later." : ex.Message;
            }
        }
    }
)
                    </CodeSnippet>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Register</ContentHighlight> the middleware as the first middleware in the
                        pipeline:
                    </p>

                    <CodeSnippet CssClass="language-csharp">
var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.UseExceptionHandler() // Use this to handle exceptions globally with problem details support. If this is enabled below line can be commented.
   .UseRouting()
   .UseEndpoints(endpoints =>
   {
       endpoints.MapControllers();
   });;
   
app.Run();
                    </CodeSnippet>
                </li>
                <li>
                    <p>
                        The alternative is to <ContentHighlight>Create</ContentHighlight> a Global Exception Middleware
                        as shown below if you want a custom response format implementation:
                    </p>
                    
                    <CodeSnippet CssClass="language-csharp">
using System.Net;

namespace ILoveDotNet.Middlewares;

public sealed class ExceptionHandlerMiddleware : IMiddleware
{
    private readonly IWebHostEnvironment _env;
    private readonly ILogger&lt;ExceptionHandlerMiddleware&gt; _logger;

    public ExceptionHandlerMiddleware(IWebHostEnvironment env, ILogger&lt;ExceptionHandlerMiddleware&gt; logger)
    {
        _env = env;
        _logger = logger;
    }

    public async Task InvokeAsync(HttpContext context, RequestDelegate next)
    {
        try
        {
            await next(context);
        }
        catch (DomainException ex)
 		{
 			await HandleDomainExceptionAsync(context, ex);
 		}
        catch (Exception ex)
        {
            await HandleExceptionAsync(context, ex);
        }
    }

    private Task HandleDomainExceptionAsync(HttpContext context, DomainException exception)
	{
		logger.LogCritical(exception, exception.Message);
		string result = exception.Message;
		context.Response.ContentType = MediaTypeNames.Application.Json;
		context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
		return context.Response.WriteAsync(result);
	}

    private Task HandleExceptionAsync(HttpContext context, Exception exception)
    {
        _logger.LogCritical(exception, exception.Message);
        var result = _env.IsProduction() ? "An unexpected fault happened. Try again later." : exception.Message;
        context.Response.ContentType = MediaTypeNames.Application.Json;
        context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
        return context.Response.WriteAsync(result);
    }
}

public static class ExceptionHandlerMiddlewareExtensions
{
    public static IApplicationBuilder UseGlobalExceptionHandler(this IApplicationBuilder builder)
    {
        return builder.UseMiddleware&lt;ExceptionHandlerMiddleware&gt;();
    }
}
                    </CodeSnippet>

                    <p>
                        This middleware inherits from <ContentHighlight>IMiddleware</ContentHighlight> and catches
                        exceptions thrown from the application. It writes a <ContentHighlight>general error message
                        </ContentHighlight> in production and the <ContentHighlight>actual error message
                        </ContentHighlight> in non-production environments.
                    </p>
                </li>
                <li>
                    <p>
                        <ContentHighlight>Register</ContentHighlight> the middleware as the first middleware in the
                        pipeline:
                    </p>
                    
                    <CodeSnippet CssClass="language-csharp">
var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.UseGlobalExceptionHandler()
   .UseRouting()
   .UseEndpoints(endpoints =>
   {
       endpoints.MapControllers();
   });;
   
app.Run();
                    </CodeSnippet>
                    
                    <p>
                        Registering it first ensures that all exceptions are caught. If registered later, some
                        exceptions might be missed.
                    </p>
                </li>
            </ol>
        </How>

        <Summary>
            <p>
                In this article, we explored the <ContentHighlight>simplest and easiest</ContentHighlight> way to handle
                exceptions globally in ASP.NET Web API using a <ContentHighlight>custom middleware</ContentHighlight>.
                This approach centralizes exception handling, reduces code duplication, and improves maintainability.
            </p>
        </Summary>
    </ContentBody>
</Content>