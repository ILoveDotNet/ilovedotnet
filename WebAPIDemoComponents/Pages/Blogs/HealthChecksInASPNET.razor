@page "/blogs/implementing-health-checks-in-asp-net-webapi"
@inherits BasePage

<Content FileName=@nameof(HealthChecksInASPNET)>
    <ContentBody>
        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what")" Match="NavLinkMatch.All">
                    What we gonna do?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why")" Match="NavLinkMatch.All">
                    Why we gonna do?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#how")" Match="NavLinkMatch.All">
                    How we gonna do?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="what" class="[ font-semibold text-lg ]">What we gonna do?</h3>

        <p>
            In this article, let's learn about how to implement <ContentHighlight>Health Checks</ContentHighlight> 
            in <ContentHighlight>Web API</ContentHighlight> in ASP.NET Core.
        </p>

        <p>
            I'll introduce you to the features that ASP.NET Core offers for health checks, including how to create, register, and customize them. Lets 
            discusses ASP.NET Core health checks, including how to configure and add health checks, create a UI to work with health checks, and secure 
            your health check endpoints.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="why" class="[ font-semibold text-lg ]">Why we gonna do?</h3>

        <p>
            Health checks are like how we humans check our health. We go to the doctor for a regular checkup to make sure everything is fine. 
            Similarly, health checks in ASP.NET Core are used to check the <ContentHighlight>health of the application</ContentHighlight>. It is used to check 
            the status of the application and its dependencies at <ContentHighlight>regular intervals</ContentHighlight>.
        </p>

        <p>
            Health checks serve as endpoints that provide snapshot of application's health. They help to monitor the state of the application and its dependencies 
            such as <ContentHighlight>database, cache, external services</ContentHighlight> etc.
        </p>

        <p>
            With health checks you can easily achieve,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Proactive Monitoring</li>
            <li>Automated Recovery</li>
            <li>Improved Reliability</li>
        </ul>

        <p>
            The app is considered <ContentHighlight>healthy</ContentHighlight> if it can respond at the health endpoint URL.
        </p>

        <p>
            Health checks in ASP.NET Core are vital for enterprise and commercial development. You need to understand what's happening on your site in order to 
            find where problems have occurred so that in case of any failures we can be notified and take necessary actions.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="how" class="[ font-semibold text-lg ]">How we gonna do?</h3>

        <h4 class="[ font-semibold text-md ]">Configuring Health Check Services</h4>

        <p>
            Configuring health checks involves two main steps in <ContentHighlight>Program.cs</ContentHighlight> file:

            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>
                    <ContentHighlight>Registering Health Check Services</ContentHighlight>. This will setup Health Check Middleware.
                </li>
                <li>
                    <ContentHighlight>Configuring Health Check Endpoints</ContentHighlight>. This will setup Health Check Endpoints.
                </li>
            </ol>
        </p>

        <GithubGistSnippet Title="Configuring Health Check Services" UserId="fingers10" FileName="dc3b6aaba815367a921e7d9ed3f1e55a"></GithubGistSnippet>

        <p>
            Thats the very simple and minimal configuration. Now when you run you web api and navigate to https://localhost:5001/health, you will see the 
            <ContentHighlight>health check status</ContentHighlight> as shown below.
        </p>

        <figure>
            <img src="./image/blogs/webapi/implementing-health-checks-in-asp-net-webapi/Simple Health Check Response.png" alt="Simple Health Check Response" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-md ]">Using IHealthCheck Interface</h4>

        <p>
            The above setup looks neat and simple. But how do we know which part of the system is failing when we see a unhealthy status? To identify the 
            <ContentHighlight>failing part</ContentHighlight>, we need to add health checks for each part of the system. We can add health check to any part 
            of the system using <ContentHighlight>IHealthCheck interface</ContentHighlight>.
        </p>

        <p>
            For example, let's add a custom health check logic to check the health of the system as shown below and register the same in the services.
        </p>

        <GithubGistSnippet Title="Custom Health Check" UserId="fingers10" FileName="feb67c9a49153329e7c6fe6b1fb844bc"></GithubGistSnippet>

        <p>
            We can now add health check for any part of the system like database, cache, external services, etc. and register them in the services. But does this 
            seems like a lot of code? If so then you can use battle tested Health Check Library like 
            <NavLink class="[ underline ]" href="https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks" target="_blank"><ContentHighlight CssClasses="[ break-all ]">AspNetCore.Diagnostics.HealthChecks</ContentHighlight></NavLink>.
        </p>

        <p>
            This Library provides a lot of built-in health checks for various services like 
            <ContentHighlight>SQL Server, Redis, Azure Blob Storage, Postgres, MongoDB, AWS S3</ContentHighlight> etc. 
            You can also create ui and dashboard for health checks using this library.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-md ]">Adding Health Checks</h4>

        <p>
            To add health check to <ContentHighlight>postgres database</ContentHighlight> using above library, you need to install the 
            package <ContentHighlight CssClasses="[ break-all ]">AspNetCore.HealthChecks.Npgsql</ContentHighlight> and configure the same in the services as 
            shown below.
        </p>

        <GithubGistSnippet Title="Database Health Check" UserId="fingers10" FileName="f55877a1fb0cd69d7135a228364741a8"></GithubGistSnippet>

        <p>
            Now when you run you web api and navigate to https://localhost:5001/health, you will see the health check status as shown below.
        </p>

        <figure>
            <img src="./image/blogs/webapi/implementing-health-checks-in-asp-net-webapi/Degraded Health Check Response.png" alt="Degraded Health Check Response" class="[ w-full ]" />
        </figure>

        <p>
            Now that said, you can <ContentHighlight>chain as many as health checks</ContentHighlight> you want and configure them in the services as shown below.
        </p>

        <GithubGistSnippet Title="Multiple Health Check" UserId="fingers10" FileName="68da53715c273e7930d86b771b11316f"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-md ]">Creating UI and Dashboard</h4>

        <p>
            Having a simple string response doesn't help much. We need a UI to visualize the health check status for multiple parts of the system. 
            To create a <ContentHighlight>UI</ContentHighlight> and <ContentHighlight>dashboard</ContentHighlight> for health checks we need to install 
            <ContentHighlight CssClasses="[ break-all ]">AspNetCore.HealthChecks.UI</ContentHighlight> package and 
            install <ContentHighlight CssClasses="[ break-all ]">AspNetCore.HealthChecks.UI.Client</ContentHighlight> package as well.
        </p>

        <p>
            We need to <ContentHighlight>store the data in a storage</ContentHighlight> to show them in UI. However, for demo purpose we can use 
            <ContentHighlight>in-memory storage</ContentHighlight>. To configure the same, we need to 
            install <ContentHighlight CssClasses="[ break-all ]">AspNetCore.HealthChecks.UI.InMemory.Storage</ContentHighlight> package and configure the 
            same in the services as shown below.
        </p>

        <GithubGistSnippet Title="Adding Health Check UI" UserId="fingers10" FileName="c8f0376c5f74dc0e70b5903edc80f380"></GithubGistSnippet>

        <figure>
            <img src="./image/blogs/webapi/implementing-health-checks-in-asp-net-webapi/Health UI Response.png" alt="Health UI Response" class="[ w-full ]" />
        </figure>

        <p>
            So far so good. But what about <ContentHighlight>Dashboard</ContentHighlight>? Its already added. All you need to do is to navigate to https://localhost:5001/healthchecks-ui and you will 
            see the dashboard as shown below.
        </p>

        <figure>
            <img src="./image/blogs/webapi/implementing-health-checks-in-asp-net-webapi/Health Check Dashboard.png" alt="Health Check Dashboard" class="[ w-full ]" />
        </figure>

        <p>
            If you are looking for options to <ContentHighlight>customize the UI</ContentHighlight>, you can do so by configuring the same with 
            <ContentHighlight>custom css</ContentHighlight> shown below.
        </p>

        <GithubGistSnippet Title="Health Check Dashboard Custom CSS and Registration" UserId="fingers10" FileName="07a532f24a685d6d442fa05cb43b86e4"></GithubGistSnippet>

        <figure>
            <img src="./image/blogs/webapi/implementing-health-checks-in-asp-net-webapi/Health Check Dashboard Custom UI.png" alt="Health Check Dashboard Custom UI" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 class="[ font-semibold text-md ]">Securing Health Check Endpoints</h4>

        <p>
            By default, the health check endpoints are <ContentHighlight>not secured</ContentHighlight>. Anyone can access the health check endpoints. 
            To secure the health check endpoints, you can use <ContentHighlight>RequireHost</ContentHighlight>, <ContentHighlight>RequireCORS</ContentHighlight> 
            and <ContentHighlight>RequireAuthorization</ContentHighlight> <ContentHighlight>middleware</ContentHighlight> as shown below.
        </p>

        <GithubGistSnippet Title="Securing Health Checks" UserId="fingers10" FileName="3c53aea520592109d46e46469b2ad8a9"></GithubGistSnippet>

        <p>
            That's it. You have now secured the health check endpoints.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this we learnt about what is health check and why it is important. We also learnt how to configure health checks in ASP.NET Core Web API. 
            We also learnt how to add custom health checks using IHealthCheck and use library to add health checks for various services. We also learnt 
            how to create UI and dashboard for health checks and how to customise the UI and secure the health check endpoints. Now you are ready to 
            implement health checks in your ASP.NET Core Web API.
        </p>
    </ContentBody>
</Content>