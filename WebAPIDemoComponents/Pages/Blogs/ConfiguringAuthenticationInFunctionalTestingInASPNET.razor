@page "/blogs/configuring-authentication-in-functional-testing-in-asp-net-webapi"
@inherits BasePage

<Content FileName=@nameof(ConfiguringAuthenticationInFunctionalTestingInASPNET)>
    <ContentBody>
        <p>
            In this article, let's learn about how to setup <ContentHighlight>Authentication</ContentHighlight> in 
            <ContentHighlight>Functional Test</ContentHighlight> in <ContentHighlight>WebAPI</ContentHighlight> in ASP.NET Core.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink href="blogs/using-wiremock-net-in-functional-testing-in-asp-net-webapi" Match="NavLinkMatch.All">Using WireMock.NET in Functional testing in ASP.NET WEB API</NavLink>.
        </p>

        <h3>Table of Contents</h3>

        <ol>
            <li>
                <NavLink href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#setup-authentication")" Match="NavLinkMatch.All">
                    Setup Authentication
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#setup-authorization")" Match="NavLinkMatch.All">
                    Setup Authorization
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction">Introduction</h3>

        <p>
            In our previous article we saw how to use <ContentHighlight>WireMock.NET</ContentHighlight> in functional test to validate HTTP calls. In this article,
            we will see how to setup <ContentHighlight>Authentication</ContentHighlight> and <ContentHighlight>Authorization</ContentHighlight> in functional test in 
            <ContentHighlight>WebAPI</ContentHighlight> in ASP.NET Core step by step. We will be using the same project that we used in our previous article.
        </p>

        <p>
            The straight forward way to enable <ContentHighlight>Authentication</ContentHighlight> and <ContentHighlight>Authorization</ContentHighlight> in 
            Web API is to add <ContentHighlight CssClasses="[ break-all ]">UseAuthentication()</ContentHighlight> middleware and decorate necessary endpoints 
            with <ContentHighlight>[Authorize]</ContentHighlight> attribute.
        </p>

        <GithubGistSnippet Title="Configure Authentication in Web API" UserId="fingers10" FileName="c2990ce7edadccdcd05b4c239a07710b"></GithubGistSnippet>

        <p>
            Now we need to decorate the endpoints with <ContentHighlight>[Authorize]</ContentHighlight> attribute as shown below.
        </p>

        <figure>
            <caption>Decorating Endpoints with Authorize Attribute</caption>
            <img src="./image/blogs/webapi/configuring-authentication-in-functional-testing-in-asp-net-webapi/decorating-with-authorize.png" alt="decorating-with-authorize" class="[ w-full ]" />
        </figure>

        <p>
            Now if we run our tests, all our tests will fail with <ContentHighlight>401 UnAuthorized</ContentHighlight> as shown below.
        </p>

        <figure>
            <caption>Failing Tests after enabling Authentication</caption>
            <img src="./image/blogs/webapi/configuring-authentication-in-functional-testing-in-asp-net-webapi/failed-test.png" alt="failed-test" class="[ w-full ]" />
        </figure>

        <p>
            Lets quickly verify if we are getting <ContentHighlight>401 UnAuthorized</ContentHighlight> from swagger. Here is the swagger response from the 
            <ContentHighlight>WeatherForecast</ContentHighlight> endpoint.
        </p>

        <figure>
            <caption>Swagger output from Endpoint to return values from API</caption>
            <img src="./image/blogs/webapi/configuring-authentication-in-functional-testing-in-asp-net-webapi/swagger-response.png" alt="swagger-response" class="[ w-full ]" />
        </figure>

        <h3 id="setup-authentication">Setup Authentication</h3>

        <p>
            Setting up <ContentHighlight>Authentication</ContentHighlight> in <ContentHighlight>Functional Test</ContentHighlight> is a bit tricky as it cannot be 
            mocked like unit tests. But here is plan as per <NavLink href="https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-8.0#mock-authentication" class="[ underline ]" target="_blank">official documentation</NavLink>. 
        </p>

        <ol>
            <li>
                <p>
                    Let's start with Empty <ContentHighlight>AuthClaimsProvider</ContentHighlight>.
                </p>

                <GithubGistSnippet Title="Empty Auth Claims Provider to be used in Functional Test Authentication" UserId="fingers10" FileName="df72e5ae9e3dd1b1c6bb70e3286d27d4"></GithubGistSnippet>

            </li>
            <li>
                <p>
                    Next, we need to add <ContentHighlight>AuthenticationHandler</ContentHighlight>.
                </p>

                <GithubGistSnippet Title="Configure Test Auth Handler for ASP.NET WEB API Functional Test" UserId="fingers10" FileName="d85385b1a82bf0337ce8fc04661114c2"></GithubGistSnippet>

            </li>
            <li>
                <p>
                    When application is started in test host add new authentication scheme (let's call it <ContentHighlight>Test</ContentHighlight>).
                </p>

                <GithubGistSnippet Title="Register Test Authentication Scheme in Custom Web Application Factory" UserId="fingers10" FileName="259d4ae672e4e28a882561f0f5e380bc"></GithubGistSnippet>

            </li>
            <li>
                <p>
                    Configure authentication scheme to use custom authentication handler (<ContentHighlight>TestAuthHandler</ContentHighlight>) that creates 
                    fake identity for integration tests. This handler creates fake user when <ContentHighlight>HandleAuthenticateAsync()</ContentHighlight> is 
                    called. We don't need any additional hacks to make ASP.NET Core application use this fake identity. Our integration test needs also some 
                    changes because of authentication handler.
                </p>
            </li>
        </ol>

        <p>
            That's it now if we run our tests, it should pass. Here is the output of the test after adding the above code.
        </p>

        <figure>
            <caption>Authorize Passing Test</caption>
            <img src="./image/blogs/webapi/configuring-authentication-in-functional-testing-in-asp-net-webapi/authorize-passing-test.png" alt="authorize-passing-test" class="[ w-full ]" />
        </figure>

        <h3 id="setup-authorization">Setup Authorization</h3>

        <p>
            So far so good. Now the problem with the above <ContentHighlight>TestHandler</ContentHighlight> is that it provides static set of claims for all the 
            tests. This will not be the case in real world applications. The handler provides web application with static set of claims. No matter what is the 
            request claims are always the same. This way it is not possible to test application with different users and roles. We need to validate 
            <ContentHighlight>Authorization</ContentHighlight> for endpoints which require different set of claims. So we need to configure claims for each test. Here is the plan.
        </p>

        <ol>
            <li>
                <p>
                    To make test authentication handler support different user accounts I extended claims provider. This is the <ContentHighlight>class</ContentHighlight> 
                    that carries given set of <ContentHighlight>claims</ContentHighlight> to test authentication provider. I added also some static methods to 
                    return already initialized provider with set of claims specific for role like <ContentHighlight>Guest</ContentHighlight> and 
                    <ContentHighlight>Admin</ContentHighlight>.
                </p>

                <GithubGistSnippet Title="Configuring Claims in ASP.NET WEB API Functional Test" UserId="fingers10" FileName="56e8df43e30282657e6ba7dde2c7a44e"></GithubGistSnippet>

            </li>
            <li>
                <p>
                    Now we need to add extension method to create <ContentHighlight>HttpClient</ContentHighlight> with required <ContentHighlight>Claims</ContentHighlight>. 
                    This method will be used in tests to create <ContentHighlight>HttpClient</ContentHighlight> with required claims. The code for that is shown below.
                </p>

                <GithubGistSnippet Title="Extension Method to create HttpClient with Claims" UserId="fingers10" FileName="65bfda2357027941469410a5f2edb4a6"></GithubGistSnippet>

            </li>
        </ol>

        <p>
            That's it. Now we can use the above code to configure <ContentHighlight>claims</ContentHighlight> and <ContentHighlight>roles</ContentHighlight> for 
            each test. Let's try to test both <ContentHighlight>Guest</ContentHighlight> and <ContentHighlight>Admin</ContentHighlight> role.
        </p>

        <p>
            Now lets try to test the <ContentHighlight>Admin</ContentHighlight> role on <ContentHighlight CssClasses="[ break-all ]">GetWeatherForecastFromDatabase</ContentHighlight> 
            endpoint. For this we need to use the extension method to create <ContentHighlight>HttpClient</ContentHighlight> with <ContentHighlight>Admin</ContentHighlight> claims.
        </p>

        <GithubGistSnippet Title="Running WEB API Functional Test with Admin Role" UserId="fingers10" FileName="83bc66386f47212e2a0b13f805055e0c"></GithubGistSnippet>

        <p>
            Thats it. We are done with setup. Now the tests will run in the following flow.
        </p>

        <ol>
            <li>Start Test Method.</li>
            <li>Create WebApplicationFactory.</li>
            <li>Run Program.cs.</li>
            <li>Add Default Authentication.</li>
            <li>Service Registration.</li>
            <li>Build Web Application.</li>
            <li>Create HTTP Client with required Claims.</li>
            <li>Test Code Execution.</li>
        </ol>

        <p>
            Now lets run the test and see the result.
        </p>

        <figure>
            <img src="./image/blogs/webapi/configuring-authentication-in-functional-testing-in-asp-net-webapi/all-passing-test.png" alt="all-passing-test" class="[ w-full ]" />
        </figure>

        <p>We can do the same for <ContentHighlight>Guest Claims</ContentHighlight> for another test.</p>

        <h3 id="summary">Summary</h3>

        <p>
            In this article, we learnt about how to setup <ContentHighlight>Authentication</ContentHighlight> and <ContentHighlight>Authorization</ContentHighlight> 
            in <ContentHighlight>Functional Test</ContentHighlight> in <ContentHighlight>WebAPI</ContentHighlight> in ASP.NET Core. We learnt how to setup 
            <ContentHighlight>Test Authentication Handler</ContentHighlight> and <ContentHighlight>Test Scheme</ContentHighlight> and also learnt how to inject 
            different users and claims in runtime. The complete source code for this article can be found <NavLink href="https://github.com/fingers10/ILoveDotNetFunctionalTest" class="[ underline ]" target="_blank">here</NavLink>. 
            With this we are completing the series on <ContentHighlight>Functional Testing in ASP.NET WebAPI</ContentHighlight>. I'm happy to share my knowledge 
            on functional testing. Hope you enjoyed reading it.
        </p>
    </ContentBody>
</Content>