@page "/blogs/unit-testing-hosted-services-in-asp-net-webapi"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(UnitTestingHostedServicesInASPNET)>
    <ContentBody>
        <p>
            In this article, let's learn about how to unit test <ContentHighlight>Hosted Services</ContentHighlight> in <ContentHighlight>WebAPI</ContentHighlight> in ASP.NET Core.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/perform-background-workloads-in-hosted-service-using-channels-in-asp-net-webapi" Match="NavLinkMatch.All">Perform Background Workloads in Hosted Service using Channels in ASP.NET Web API</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-unit-testing")" Match="NavLinkMatch.All">
                    Why Unit Testing?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what-is-a-hosted-service")" Match="NavLinkMatch.All">
                    What is a Hosted Service?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#unit-testing-hosted-service")" Match="NavLinkMatch.All">
                    Unit Testing Hosted Service
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            In ASP.NET Core, <ContentHighlight>hosted services</ContentHighlight> plays a vital role in simplifying background jobs which needs to run periodically 
            to perform operations. Most common use cases include:
        </p>

        <ul class="[ ml-4 ] [ list-disc ]">
            <li><ContentHighlight>Processing uploaded excel in background</ContentHighlight></li>
            <li><ContentHighlight>Sending emails in background</ContentHighlight></li>
            <li><ContentHighlight>Other long running operations</ContentHighlight>, etc</li>
        </ul>

        <p>
            If you are aware of <ContentHighlight>Hosted Service</ContentHighlight> and <ContentHighlight>Unit Testing</ContentHighlight> then you can skip the 
            next two sections and jump to the section on <ContentHighlight><NavLink class="[ underline ]" href="@($"blogs/{Slug}#unit-testing-hosted-service")" Match="NavLinkMatch.All">Unit Testing Hosted Service</NavLink></ContentHighlight>.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="why-unit-testing" class="[ font-semibold text-lg ]">Why Unit Testing ?</h3>

        <p>
            When writing software, we want to ensure that the code is covered by tests, which verify the required behavior and catch any regressions. 
            <ContentHighlight>Unit testing</ContentHighlight> is a crucial practice in software development as it helps identify issues early in the development 
            process. When it comes to service registration, unit testing offers the following benefits:
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li><ContentHighlight>Validation</ContentHighlight>: Unit tests verify that the necessary services are registered correctly, avoiding runtime errors caused by missing or misconfigured dependencies.</li>
            <li><ContentHighlight>Refactoring</ContentHighlight>: Unit tests provide a safety net when refactoring code by ensuring that service registration remains intact during code changes.</li>
            <li><ContentHighlight>Documentation</ContentHighlight>: Well-written unit tests serve as living documentation, illustrating how services should be registered and ensuring consistency across the application.</li>
        </ul>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/implementing-tdd-in-csharp-dotnet" Match="NavLinkMatch.All">Implementing TDD in C# .Net</NavLink>.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="what-is-a-hosted-service" class="[ font-semibold text-lg ]">What is a Hosted Service ?</h3>

        <p>
            <ContentHighlight>Hosted services</ContentHighlight> in ASP.NET Core have been available since <ContentHighlight>version 2.1</ContentHighlight>, and 
            they support <ContentHighlight>performing background tasks outside of the main requests flow</ContentHighlight>. The best way to understand when and 
            where hosted services can be applied is to begin using them. Hosted services are based on the <ContentHighlight>abstract</ContentHighlight> concept 
            of a <ContentHighlight>background service</ContentHighlight>. The terms <ContentHighlight>hosted service</ContentHighlight> and 
            <ContentHighlight>background service</ContentHighlight> are often used interchangeably. I'll refer to them by both names throughout this article. Hosted services are available under 
            <ContentHighlight CssClasses="[ break-all ]">Microsoft.Extensions.Hosting</ContentHighlight> namespace.
        </p>

        <p>
            To know more about <ContentHighlight>Hosted Service</ContentHighlight> or <ContentHighlight>Background Service</ContentHighlight> is outside the scope 
            of this article. I'll write a separate article on Background Services in ASP.NET Core. For now lets understand walkthrough how to use Hosted Service.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="unit-testing-hosted-service" class="[ font-semibold text-lg ]">Unit Testing Hosted Service</h3>

        <p>
            We are going to write unit tests for the <ContentHighlight>Data Migration Hosted Service</ContentHighlight> which we used in our previous article on 
            <ContentHighlight><NavLink class="[ underline ]" href="blogs/perform-background-workloads-in-hosted-service-using-channels-in-asp-net-webapi" Match="NavLinkMatch.All">Perform Background Workloads in Hosted Service using Channels in ASP.NET Web API</NavLink></ContentHighlight>. 
            Here is the quick reference of the hosted service used in that article.
        </p>

        <GithubGistSnippet Title="Data Migration Hosted Service" UserId="fingers10" FileName="f066589f4d0439c6d02eade7ed08f537"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            To unit test the <ContentHighlight>DataMigrationService Hosted Service</ContentHighlight>, follow these steps:
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                Create a new test <ContentHighlight>class</ContentHighlight>, let's call it <ContentHighlight>HostedSrviceTests</ContentHighlight>, and add a test method 
                using the <ContentHighlight>[Fact]</ContentHighlight> attribute.
            </li>
            <li>
                In the test method, instantiate a <ContentHighlight>DataMigrationChannel</ContentHighlight> which we used in previous article and 
                <ContentHighlight>ServiceCollection</ContentHighlight> from the 
                <ContentHighlight CssClasses="[ break-all ]">Microsoft.Extensions.DependencyInjection</ContentHighlight> 
                <ContentHighlight>namespace</ContentHighlight>. This collection will act as the container for our services.
            </li>
            <li>
                Use <ContentHighlight>Moq</ContentHighlight> to Mock the <ContentHighlight>IUnitOfWork</ContentHighlight> and add it to the 
                <ContentHighlight>ServiceCollection</ContentHighlight> and call <ContentHighlight>BuildServiceProvider()</ContentHighlight> to build the 
                <ContentHighlight>ServiceProvider</ContentHighlight> instance.
            </li>
            <li>
                Finally let's use <ContentHighlight CssClasses="[ break-all ]">NullLogger&lt;DataMigrationService&gt;.Instance</ContentHighlight> from 
                <ContentHighlight CssClasses="[ break-all ]">Microsoft.Extensions.Logging.Abstractions</ContentHighlight> 
                <ContentHighlight>namespace</ContentHighlight> instead of Mocking it as we are not going to test the logger. Moreover mocking Logger is a 
                complex step.
            </li>
            <li>
                Next Call the <ContentHighlight>MigrateData</ContentHighlight> method in the <ContentHighlight>DataMigrationChannel</ContentHighlight> object 
                to add message to the channel.
            </li>
            <li>
                Then, instantiate the <ContentHighlight>DataMigrationService class</ContentHighlight> with the above instantiated parameters and call the 
                <ContentHighlight>StartAsync</ContentHighlight> method with <ContentHighlight>default CancellationToken</ContentHighlight> to start the service.
            </li>
            <li>
                Now call <ContentHighlight>ExecuteTask</ContentHighlight> from the <ContentHighlight>DataMigrationService</ContentHighlight> class to 
                execute the task. This will make the <ContentHighlight>ExecuteAsync</ContentHighlight> of actual background service to run.
            </li>
            <li>
                Perform <ContentHighlight>assertions</ContentHighlight> using the <ContentHighlight>IsCompletedSuccessfully</ContentHighlight> result on the 
                <ContentHighlight>ExecuteTask</ContentHighlight> of <ContentHighlight>DataMigrationService</ContentHighlight>. Check for its success.
            </li>
            <li>Additionally, verify <ContentHighlight>IUnitOfWork</ContentHighlight> using <ContentHighlight>Moq Verify</ContentHighlight> methods.</li>
        </ol>

        <GithubGistSnippet Title="Unit Testing Hosted Service in ASP.NET Web API" UserId="fingers10" FileName="78f22f4ba74f2655dc61e0440baca55b"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            By executing above test we can validate background services in ASP.NET Core apps. The same can be used to validate worker services in dotnet.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            Unit testing hosted services in ASP.NET Core is a crucial step to ensure that they are working as expected. By writing unit tests, you can 
            <ContentHighlight>validate behavior, identify issues early on</ContentHighlight>, and maintain a reliable and robust application. The examples and 
            techniques covered in this article provide a solid foundation for performing unit tests on hosted services, promoting software quality and 
            maintainability in ASP.NET Core applications.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "unit-testing-hosted-services-in-asp-net-webapi";
    private string PosterPath = "Blogs/WebAPI";
    private string Channel = "webapi";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("WebAPI", StringComparison.CurrentCultureIgnoreCase));
}