@page "/blogs/functional-testing-your-asp-net-webapi"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="WebAPI"
         FileName=@nameof(FunctionalTestingInASPNET)>
    <ContentBody>
        <p>
            In this article, let's learn about how to do <ContentHighlight>Functional Test</ContentHighlight> in 
            <ContentHighlight>WebAPI</ContentHighlight> in ASP.NET Core.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-functional-testing")" Match="NavLinkMatch.All">
                    Why Functional Testing?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#prerequisite")" Match="NavLinkMatch.All">
                    Prerequisite
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#steps-to-do-functional-testing")" Match="NavLinkMatch.All">
                    Steps to do Functional Testing
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            <ContentHighlight>Functional Testing</ContentHighlight> ensure that an app's components function correctly at a level that includes the app's 
            supporting <ContentHighlight>infrastructure</ContentHighlight>, such as the <ContentHighlight>database, file system, and network</ContentHighlight>. 
            The main difference between functional testing and unit testing is that application's infrastructure components like database, file system, etc are 
            <ContentHighlight>mocked with unit tests</ContentHighlight>. But with functional testing, we want to ensure that the whole app is working as expected 
            with all of these components combined together. ASP.NET Core supports functional tests using a unit test framework with a test web host and an 
            in-memory test server.        
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="why-functional-testing" class="[ font-semibold text-lg ]">Why Functional Testing ?</h3>

        <p>
            Functional tests evaluate an app's components on a <ContentHighlight>broader level</ContentHighlight> than unit tests. Unit tests are used to test 
            isolated software components, such as individual class methods. Functional tests confirm that <ContentHighlight>two or more app components work</ContentHighlight> 
            together to produce an expected result, possibly including every component required to <ContentHighlight>fully process a request</ContentHighlight>.
        </p>

        <p>
            The characteristics of functional tests include:
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Use the <ContentHighlight>actual components</ContentHighlight> that the app uses in production.</li>
            <li>Require <ContentHighlight>more code and data</ContentHighlight> processing.</li>
            <li>Take <ContentHighlight>longer</ContentHighlight> to run.</li>
        </ul>

        <p>
            Therefore, <ContentHighlight>limit the use of functional tests to the most important infrastructure</ContentHighlight> scenarios. If a behavior can 
            be tested using either a unit test or an functional test, choose the unit test.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>
        
        <h3 id="prerequisite" class="[ font-semibold text-lg ]">Prerequisite</h3>

        <p>
            You need to have an <ContentHighlight>ASP.NET Core WebAPI</ContentHighlight> project. If you don't have one, you can create one from Visual Studio.
        </p>

        <figure>
            <img src="./image/blogs/webapi/functional-testing-your-asp-net-webapi/Configure new project.png" alt="Configure new project" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            We are going to learn this with <ContentHighlight>.NET 7</ContentHighlight> Web API project. 
        </p>

        <figure>
            <img src="./image/blogs/webapi/functional-testing-your-asp-net-webapi/New project.png" alt="New project" class="[ w-1/2 ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            The default project template contains a <ContentHighlight>WeatherForecastController</ContentHighlight>. We are going to use this controller for our 
            functional testing. Here is the API response when we run the project.
        </p>

        <figure>
            <img src="./image/blogs/webapi/functional-testing-your-asp-net-webapi/API response.png" alt="API response" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="steps-to-do-functional-testing" class="[ font-semibold text-lg ]">Steps to do Functional Testing</h3>

        <p>
            Let's see the steps to do functional testing in ASP.NET Core Web API.
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <p>Create a <ContentHighlight>XUnit</ContentHighlight> Test Project.</p>

                <figure>
                    <img src="./image/blogs/webapi/functional-testing-your-asp-net-webapi/Create XUnit Project.png" alt="Create XUnit Project" class="[ w-1/2 ]" />
                </figure>
            </li>
            <li>Add Package Reference to <ContentHighlight>Nuget</ContentHighlight> Package <ContentHighlight CssClasses="[ break-all ]">Microsoft.AspNetCore.Mvc.Testing</ContentHighlight>.</li>
            <li>Optionally make sure you have <ContentHighlight>all Nuget Packages updated</ContentHighlight> to latest version in all your projects.</li>
            <li>
                <p>Add <ContentHighlight>Project Reference to your API project</ContentHighlight> in your test project.</p>

                <figure>
                    <img src="./image/blogs/webapi/functional-testing-your-asp-net-webapi/Test project with Nuget and Project Reference.png" alt="Test project with Nuget and Project Reference" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <p>
                    Now we need to expose the implicitly defined <ContentHighlight>Program class</ContentHighlight> to the test project by adding 
                    <ContentHighlight>public partial class Program { }</ContentHighlight> to the end of <ContentHighlight>Program.cs</ContentHighlight> in 
                    Web API.
                </p>

                <figure>
                    <img src="./image/blogs/webapi/functional-testing-your-asp-net-webapi/Add partial modifier to Program.png" alt="Add partial modifier to Program" class="[ w-full ]" />
                </figure>
            </li>
            <li>
                <ContentHighlight CssClasses="[ break-all ]">WebApplicationFactory&lt;TEntryPoint&gt;</ContentHighlight> is used to create a 
                <ContentHighlight>TestServer</ContentHighlight> for the functional tests. <ContentHighlight>TEntryPoint</ContentHighlight> is the entry point 
                class of the <abbr title="System Under Test">SUT</abbr>, usually <ContentHighlight>Program.cs</ContentHighlight>.
            </li>
            <li>
                <p>
                    We can add <ContentHighlight CssClasses="[ break-all ]">CustomeWebApplicationFactory.cs</ContentHighlight> in our test project to create a custom 
                    <ContentHighlight CssClasses="[ break-all ]">WebApplicationFactory&lt;TEntryPoint&gt;</ContentHighlight>. We can then add a 
                    <ContentHighlight>static RunTest</ContentHighlight> helper method with <ContentHighlight CssClasses="[ break-all ]">Func&lt;HttpClient, Task&gt; delegate</ContentHighlight> 
                    to run the test. This method will create a <ContentHighlight>TestServer</ContentHighlight> and <ContentHighlight>HttpClient</ContentHighlight> 
                    instance and then call the <ContentHighlight>delegate</ContentHighlight> with the <ContentHighlight>HttpClient</ContentHighlight> instance. The 
                    <ContentHighlight>TestServer</ContentHighlight> and <ContentHighlight>HttpClient</ContentHighlight> instances are 
                    <ContentHighlight>disposed</ContentHighlight> after the <ContentHighlight>delegate</ContentHighlight> completes. This is shown in the below code.
                </p>

                <GithubGistSnippet Title="Custom Web Application Factory" UserId="fingers10" FileName="038aa1b474470229842bc772af07bcd2"></GithubGistSnippet>
            </li>
        </ol>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
             That's it we are all set. Now its time to write our first functional test. Let's write a test to check if the API returns the expected response.
        </p>

        <p>
            We can add a new class WeatherForecastControllerTests.cs in our test project and add the following code.
        </p>

        <GithubGistSnippet Title="First Functional Test" UserId="fingers10" FileName="c38b05c8e47b89690d2cc3fd366648cb"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            In the above code, we are inheriting from <ContentHighlight CssClasses="[ break-all ]">CustomeWebApplicationFactory</ContentHighlight> and the call 
            <ContentHighlight>RunTest</ContentHighlight> helper method from within our test passing http client instance. This will make a HTTP GET call to
            <ContentHighlight>weatherforecast</ContentHighlight> endpoint and deserialize the response to <ContentHighlight CssClasses="[ break-all ]">List&lt;WeatherForecast&gt;</ContentHighlight>. 
            We are then <ContentHighlight>asserting</ContentHighlight> the status code and count of our response. We can also assert the values of the response 
            in the same way.
        </p>

        <p>The tests will run in the following flow.</p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Start Test Method.</li>
            <li>Create HTTP Client.</li>
            <li>Create WebApplicationFactory.</li>
            <li>Run Program.cs.</li>
            <li>Service Registration.</li>
            <li>Build Web Application.</li>
            <li>Test Code Execution.</li>
        </ol>

        <p>
            Now lets run the test and see the result.
        </p>

        <figure>
            <img src="./image/blogs/webapi/functional-testing-your-asp-net-webapi/Passing Functional Test.png" alt="Passing Functional Test" class="[ w-full ]" />
        </figure>

        <p>
            The tests are <ContentHighlight>passing</ContentHighlight>. We can also write tests to check if the API returns the expected response for different 
            HTTP methods like POST, PUT, DELETE, etc. in the same way.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learnt about what is funtional test and how to write functional test in ASP.NET Web API. Functional test help us to test 
            <ContentHighlight>end to end functionality of our application without mocking any infrastructure dependencies</ContentHighlight>. This is very useful 
            to test the application in real world scenario. In our next article we will learn about how to do functional testing in ASP.NET Web API with database.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Functional testing your ASP.NET WEB API";
    private string Description = "In this post I will teach how to do functional testing in ASP.NET web api. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2023, 7, 16, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2023, 7, 16, 22, 30, 0);
    private string Slug = "functional-testing-your-asp-net-webapi";
    private string PosterPath = "Blogs/WebAPI";
    private string Channel = "webapi";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("WebAPI", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(2) { "Functional Test", "Integration Test" };
}