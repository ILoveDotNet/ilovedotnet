@page "/analytics"
@using Humanizer
@using Toolbelt.Blazor.HeadElement
@inject IConfiguration configuration
@inject Sitemaps sitemap
@inject Achievements achievements

<Title>@Title</Title>
<Meta Property="description" Content="@Description" />
<Meta Property="keywords" Content=".NET, DotNet, I Love DotNet, I ❤️ DotNet, Blazor, Blazor (WebAssembly), Blazor Wasm, C#, Entity Framework, LINQ, ML.NET, Web API, TDD, OOPS, Middleware, JWT, Dependency Injection, Report, Design Pattern, SOLID, HTTP Client, OWASP, SignalR, MSBuild, Regex, MAUI, Testing, AI, Security" />
<Meta Property="url" Content="@BaseUrl" />
<Meta Property="identifier-URL" Content="@BaseUrl" />
<Meta Property="og:site_name" Content="@Title" />
<Meta Property="og:type" Content="website" />
<Meta Property="og:title" Content="@Title" />
<Meta Property="og:image" Content="@($"{BaseUrl}image/brand/mini-logo.png")" />
<Meta Property="og:image:alt" Content="DotNet bot with heart and DotNet brand" />
<Meta Property="og:description" Content="@Description" />
<Meta Property="og:url" Content="@BaseUrl" />
<Meta Property="twitter:card" Content="summary" />
<Meta Property="twitter:title" Content="@Title" />
<Meta Property="twitter:image" Content="@($"{BaseUrl}image/brand/mini-logo.png")" />
<Meta Property="twitter:image:alt" Content="DotNet bot with heart and DotNet brand" />
<Meta Property="twitter:description" Content="@Description" />
<Meta Property="twitter:url" Content="@BaseUrl" />
@foreach (var sitemap in sitemap.Files)
{
    <Link Rel="sitemap" Href="@($"{BaseUrl}{sitemap}")" type="application/xml" title="Sitemap" />
}
<Link Rel="alternate" Href="@($"{BaseUrl}atom.xml")" type="application/rss+xml" />
<Link Rel="alternate" Href="@BaseUrl" hreflang="en" />
<Link Rel="alternate" Href="@BaseUrl" hreflang="x-default" />
<Link Rel="canonical" Href="@BaseUrl" />
<Link Rel="index" Href="@BaseUrl" title="@Title" />
<HeadContent>
    @(new MarkupString(
    $$""""
        <script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "WebSite",
            "publisher": {
                "@type": "Organization",
                "name": "{{Title}}",
                "url": "{{BaseUrl}}",
                "logo": {
                    "@type": "ImageObject",
                    "url": "{{BaseUrl}}favicon.ico",
                    "width": 16,
                    "height": 16
                }
            },
            "url": "{{BaseUrl}}",
            "mainEntityOfPage": {
                "@type": "WebPage",
                "@id": "{{BaseUrl}}"
            },
            "description": "{{Description}}"
        }
        </script>
        """"
        ))

    <style type="text/css">
        
    </style>
</HeadContent>

<section class="[ dark:bg-stone-900 ] [ flex flex-col ] [ space-y-5 ] [ p-5 ]">

    <StarAndShareRequest></StarAndShareRequest>

    <h2 class="[ dark:text-white ] [ font-semibold text-xl ]">Analytics</h2>

    <p>
        This page is for analytics purpose only. Here you can see the progress we are making in terms of page views and visitors. This is because of the support from community. 
        Thank you for your support.
    </p>

    <h3 class="[ dark:text-white ] [ font-semibold text-lg ]">Achievements</h3>

    <div class="[ w-full ]">
        <table class="[ charts-css bar show-heading show-labels show-data-axes show-primary-axis data-spacing-5 datasets-spacing-4 multiple ]">
            <caption> Google Search Impact </caption>
            <thead>
                <tr>
                    <th scope="col"> Achieved On </th>
                    <th scope="col"> Clicks </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var groupedGoogleSearchImpact in GroupedImpacts)
                {
                    <tr>
                        <th scope="row"> @($"{groupedGoogleSearchImpact.Key:MMM yy}") </th>
                        @foreach(var googleSearchImpact in groupedGoogleSearchImpact )
                        {
                            var clicks = googleSearchImpact.Clicks;
                            <td style="--size: calc( @clicks / @CurrentImpact )" class="[ bg-gradient-to-b from-indigo-500 via-purple-500 to-pink-500 ]"> 
                                <span class="data"> @clicks.ToMetric() </span> 
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="[ w-full ]">
        <table class="[ charts-css bar show-heading show-labels show-data-axes show-primary-axis data-spacing-5 ]">
            <caption> Google Search Impression </caption>
            <thead>
                <tr>
                    <th scope="col"> Achieved On </th>
                    <th scope="col"> Impressions </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var groupedGoogleSearchImpression in GroupedImpressions)
                {
                    <tr>
                        <th scope="row"> @($"{groupedGoogleSearchImpression.Key:MMM yy}") </th>
                        @foreach(var googleSearchImpression in groupedGoogleSearchImpression )
                        {
                            var impressions = googleSearchImpression.Impressions;
                            <td style="--size: calc( @impressions / @CurrentImpression )" class="[ bg-gradient-to-b from-indigo-500 via-purple-500 to-pink-500 ]"> 
                                <span class="data"> @impressions.ToMetric() </span> 
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

</section>

@code {
    private string Title = "Analytics - I ❤️ DotNet";
    private string Description = "This is a .NET knowledge sharing platform with live demos crafted by developers for developers with love.";
    private string BaseUrl => configuration.GetValue<string>("baseUrl")!;
    private IEnumerable<IGrouping<DateOnly, GoogleSearchImpact>> GroupedImpacts => achievements.GoogleSearchImpacts.GroupBy(x => new DateOnly(x.Date.Year, x.Date.Month, 1));
    private long CurrentImpact => GroupedImpacts.Max(x => x.Max(y => y.Clicks));

    private IEnumerable<IGrouping<DateOnly, GoogleSearchImpression>> GroupedImpressions => achievements.GoogleSearchImpressions.GroupBy(x => new DateOnly(x.Date.Year, x.Date.Month, 1));
    private long CurrentImpression => GroupedImpressions.Max(x => x.Max(y => y.Impressions));
}
