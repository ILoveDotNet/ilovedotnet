@page "/learningpath"
@using Humanizer
@using Toolbelt.Blazor.HeadElement
@inject IConfiguration configuration
@inject TableOfContents tableOfContents
@inject Sitemaps sitemap

<Title>@Title</Title>
<Meta Property="description" Content="@Description" />
<Meta Property="keywords" Content=".NET, DotNet, I Love DotNet, I ❤️ DotNet, Blazor, Blazor (WebAssembly), Blazor Wasm, C#, Entity Framework, LINQ, ML.NET, Web API, TDD, OOPS, Middleware, JWT, Dependency Injection, Report, Design Pattern, SOLID, HTTP Client, OWASP, SignalR, MSBuild, Regex, MAUI" />
<Meta Property="url" Content="@BaseUrl" />
<Meta Property="identifier-URL" Content="@BaseUrl" />
<Meta Property="og:site_name" Content="@Title" />
<Meta Property="og:type" Content="website" />
<Meta Property="og:title" Content="@Title" />
<Meta Property="og:image" Content="@($"{BaseUrl}image/brand/mini-logo.png")" />
<Meta Property="og:image:alt" Content="DotNet bot with heart and DotNet brand" />
<Meta Property="og:description" Content="@Description" />
<Meta Property="og:url" Content="@BaseUrl" />
<Meta Property="twitter:card" Content="summary" />
<Meta Property="twitter:title" Content="@Title" />
<Meta Property="twitter:image" Content="@($"{BaseUrl}image/brand/mini-logo.png")" />
<Meta Property="twitter:image:alt" Content="DotNet bot with heart and DotNet brand" />
<Meta Property="twitter:description" Content="@Description" />
<Meta Property="twitter:url" Content="@BaseUrl" />
@foreach(var sitemap in sitemap.Files)
{
    <Link Rel="sitemap" Href="@($"{BaseUrl}{sitemap}")" type="application/xml" title="Sitemap" />   
}
<Link Rel="alternate" Href="@($"{BaseUrl}atom.xml")" type="application/rss+xml" />
<Link Rel="alternate" Href="@BaseUrl" hreflang="en" />
<Link Rel="alternate" Href="@BaseUrl" hreflang="x-default" />
<Link Rel="canonical" Href="@BaseUrl" />
<Link Rel="index" Href="@BaseUrl" title="@Title" />
<HeadContent>
    @(new MarkupString(
        $$""""
        <script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "WebSite",
            "publisher": {
                "@type": "Organization",
                "name": "{{Title}}",
                "url": "{{BaseUrl}}",
                "logo": {
                    "@type": "ImageObject",
                    "url": "{{BaseUrl}}favicon.ico",
                    "width": 16,
                    "height": 16
                }
            },
            "url": "{{BaseUrl}}",
            "mainEntityOfPage": {
                "@type": "WebPage",
                "@id": "{{BaseUrl}}"
            },
            "description": "{{Description}}"
        }
        </script>
        """"
    ))
</HeadContent>

<section class="[ dark:bg-stone-900 ] [ flex flex-col ] [ space-y-5 ] [ p-5 ]">
    
   @foreach (var channel in tableOfContents.AllContents.GroupBy(content => content.Channel).OrderBy(channel => channel.Key))
   {
        <article class="[ flex flex-col ] [ space-y-4 ]">
            <header class="[ flex items-center ] [ space-x-2 ]">
                <NavLink href="@($"channels/{channel.Key.ToLower().ApplyHyphen()}")">
                    <figure>
                        <img src="@channel.First().IconUrl" alt="@channel.Key" loading="lazy" height="48" width="48" class="[ rounded-full ]" />
                    </figure>
                </NavLink>
                <h2 class="[ text-3xl ] [ text-center ] [ text-gray-900 dark:text-white ] [ font-bold ]">@channel.Key</h2>
            </header>
            <div class="[ grid gap-4 grid-flow-col auto-cols-[calc(75%_-_4rem)] md:auto-cols-[calc(25%_-_4rem)] ] [ overflow-x-auto ]">
                @foreach (var content in channel.OrderBy(content => content.Order))
                {
                    <NavLink href="@content.ContentUrl" Match="NavLinkMatch.All">
                        <figure>
                            <img src="@content.ThumbnailUrl" alt="@content.Title" loading="lazy" class="[ rounded-md ]">
                        </figure>
                        <figcaption class="[ text-gray-900 dark:text-white ] [ font-bold ]">@content.Title</figcaption>
                        <time datetime="@content.ModifiedOn.ToString("yyyy-MM-dd HH:mm:ss")" class="[ text-sm ]">Released @content.ModifiedOn.Humanize()</time>
                    </NavLink>
                }
            </div>
        </article>
        <section class="[ text-center ]">
            <GoogleAdSense Type="GoogleAdSenseAdType.Multiplex" Format="GoogleAdSenseAdFormat.AutoRelaxed" Slot="7445263294"></GoogleAdSense>
        </section>
   }
</section>

@code {
    private string Title = "Learning Path - I ❤️ DotNet";
    private string Description = "This is a .NET knowledge sharing platform with live demos crafted by developers for developers with love.";
    private string BaseUrl => configuration.GetValue<string>("baseUrl")!;
}