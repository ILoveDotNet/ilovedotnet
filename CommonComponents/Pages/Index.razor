@page "/"
@using Toolbelt.Blazor.HeadElement
@inject AdSpaceService adSpaceService
@inject IConfiguration configuration
@inject Sitemaps sitemap
@inject TableOfContents tableOfContents

<Meta Property="description" Content="@Description" />
<Meta Property="keywords" Content=".NET, DotNet, I Love DotNet, I ❤️ DotNet, Blazor, Blazor (WebAssembly), Blazor Wasm, C#, Entity Framework, LINQ, ML.NET, Web API, TDD, OOPS, Middleware, JWT, Dependency Injection, Report, Design Pattern, SOLID, HTTP Client, OWASP, SignalR, MSBuild" />
<Meta Property="url" Content="@BaseUrl" />
<Meta Property="identifier-URL" Content="@BaseUrl" />
<Meta Property="og:site_name" Content="@Title" />
<Meta Property="og:type" Content="website" />
<Meta Property="og:title" Content="@Title" />
<Meta Property="og:image" Content="@($"{BaseUrl}image/brand/mini-logo.png")" />
<Meta Property="og:image:alt" Content="DotNet bot with heart and DotNet brand" />
<Meta Property="og:description" Content="@Description" />
<Meta Property="og:url" Content="@BaseUrl" />
<Meta Property="twitter:card" Content="summary" />
<Meta Property="twitter:title" Content="@Title" />
<Meta Property="twitter:image" Content="@($"{BaseUrl}image/brand/mini-logo.png")" />
<Meta Property="twitter:image:alt" Content="DotNet bot with heart and DotNet brand" />
<Meta Property="twitter:description" Content="@Description" />
<Meta Property="twitter:url" Content="@BaseUrl" />
@foreach(var sitemap in sitemap.Files)
{
    <Link Rel="sitemap" Href="@($"{BaseUrl}{sitemap}")" type="application/xml" title="Sitemap" />   
}
<Link Rel="alternate" Href="@($"{BaseUrl}atom.xml")" type="application/rss+xml" />
<Link Rel="alternate" Href="@BaseUrl" hreflang="en" />
<Link Rel="alternate" Href="@BaseUrl" hreflang="x-default" />
<Link Rel="canonical" Href="@BaseUrl" />
<Link Rel="index" Href="@BaseUrl" title="@Title" />
<HeadContent>
    @(new MarkupString(
        $$""""
        <script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "WebSite",
            "publisher": {
                "@type": "Organization",
                "name": "{{Title}}",
                "url": "{{BaseUrl}}",
                "logo": {
                    "@type": "ImageObject",
                    "url": "{{BaseUrl}}favicon.ico",
                    "width": 16,
                    "height": 16
                }
            },
            "url": "{{BaseUrl}}",
            "mainEntityOfPage": {
                "@type": "WebPage",
                "@id": "{{BaseUrl}}"
            },
            "description": "{{Description}}"
        }
        </script>
        """"
    ))
</HeadContent>

<section class="[ dark:bg-stone-900 ] [ flex flex-col ] [ space-y-5 ] [ p-5 ] [ border-b-2 ] [ dark:border-gray-800 ]">
    <ContentTypes OnSelectedContentType="FilterContent"></ContentTypes>
    <div class="[ grid grid-cols-1 md:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4 ]">
        <GoogleAdSense Type="GoogleAdSenseAdType.InFeed" Format="GoogleAdSenseAdFormat.Fluid" LayoutKey="-7m+de+1z+n+3" Slot="2741354693"></GoogleAdSense>
        @foreach (var (content, index) in Contents.SelectWithIndex())
        {
            @if (adSpaceService.CanDisplayAd(index + 1))
            {
                <GoogleAdSense Type="GoogleAdSenseAdType.InFeed" Format="GoogleAdSenseAdFormat.Fluid" LayoutKey="-7m+de+1z+n+3" Slot="2741354693"></GoogleAdSense>
            }

            <Thumbnail @key="@index" PosterUrl="@content.ThumbnailUrl" 
                    ContentUrl="@content.ContentUrl"
                    Title="@content.Title"
                    AltText="@content.Title"
                    IconUrl="@content.IconUrl"
                    IconAlt="@content.Channel"
                    CreatedOn="@content.ModifiedOn"
                    Author="@content.Author">
            </Thumbnail>           
        }
        <GoogleAdSense Type="GoogleAdSenseAdType.InFeed" Format="GoogleAdSenseAdFormat.Fluid" LayoutKey="-7m+de+1z+n+3" Slot="2741354693"></GoogleAdSense>
    </div>
    <div class="[ flex items-center justify-center ]">
        <button type="button" 
                class="[ cursor-pointer ] [ px-3 py-1 ] [ rounded-md ] [ whitespace-nowrap ] [ flex items-center justify-center ] [ disabled:opacity-75 disabled:cursor-not-allowed ]"
                @onclick="ShowMoreContents"
                disabled="@(Take >= tableOfContents.SelectedContentTypeTotalCount(SelectedContentType))">
            <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-caret-down ]" width="30" height="30" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M6 10l6 6l6 -6h-12"></path>
            </svg>
            <p>Show more</p>
        </button>
    </div>
</section>

<section class="[ dark:bg-stone-900 ] [ flex flex-col ] [ space-y-5 ] [ p-5 ] [ border-b-2 ] [ dark:border-gray-800 ]">
    <header class="[ flex ] [ space-x-2 ]">
        <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-track ] [ text-red-600 ]" width="30" height="30" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M4 15l11 -11m5 5l-11 11m-4 -8l7 7m-3.5 -10.5l7 7m-3.5 -10.5l7 7"></path>
        </svg>
        <h2 class="[ text-2xl font-bold ] [ dark:text-gray-200 ]">Channels</h2>
    </header>
    <div class="[ max-w-full ]">
        <ul class="[ list-none ] [ flex items-center justify-start ] [ space-x-3 ] [ overflow-hidden overflow-x-auto ]">
            @foreach (var contentType in tableOfContents.AvailableContentTypes)
            {
                <li @key="@(contentType)" class="[ flex flex-col items-center justify-center ] [ bg-gradient-to-b from-pink-500 to-yellow-500 ]
                           [ h-[250px] md:h-[500px] ] [ px-[100px] ] [ rounded-md ] [ text-white text-center ] [ font-bold ]">
                    <NavLink href="@($"/channels/{contentType.ToLower().ApplyHyphen()}")" class="[ break-words ]">@contentType</NavLink>
                </li>
            }
        </ul>
    </div>
</section>

<section class="[ dark:bg-stone-900 ] [ flex flex-col ] [ space-y-5 ] [ p-5 ] [ border-b-2 ] [ dark:border-gray-800 ]">
    <header class="[ flex ] [ space-x-2 ]">
        <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-writing-sign ] [ text-fuchsia-600 ]" width="30" height="30" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M3 19c3.333 -2 5 -4 5 -6c0 -3 -1 -3 -2 -3s-2.032 1.085 -2 3c.034 2.048 1.658 2.877 2.5 4c1.5 2 2.5 2.5 3.5 1c.667 -1 1.167 -1.833 1.5 -2.5c1 2.333 2.333 3.5 4 3.5h2.5"></path>
            <path d="M20 17v-12c0 -1.121 -.879 -2 -2 -2s-2 .879 -2 2v12l2 2l2 -2z"></path>
            <path d="M16 7h4"></path>
        </svg>
        <h2 class="[ text-2xl font-bold ] [ dark:text-gray-200 ]">Authors</h2>
    </header>
    <div class="[ max-w-full ]">
        <ul class="[ list-none ] [ flex items-center justify-start ] [ space-x-3 ] [ overflow-hidden overflow-x-auto ]">
            @foreach (var author in tableOfContents.Authors)
            {
                <li @key="@(author.Name)" class="[ flex flex-col items-center justify-center ] [ bg-gradient-to-b from-pink-500 to-yellow-500 ]
                           [ h-[250px] md:h-[500px] ] [ px-[100px] ] [ rounded-md ] [ text-white text-center ] [ font-bold ]">
                    <NavLink href="@($"/authors/{author.Name.ToLower().ApplyHyphen()}")" class="[ break-words ]">@author.Name</NavLink>
                </li>
            }
        </ul>
    </div>
</section>

<section class="[ dark:bg-stone-900 ] [ flex flex-col ] [ space-y-5 ] [ p-5 ] [ border-b-2 ] [ dark:border-gray-800 ]">
    <header class="[ flex ] [ space-x-2 ]">
        <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-speakerphone ] [ text-green-600 ]" width="30" height="30" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M18 8a3 3 0 0 1 0 6"></path>
            <path d="M10 8v11a1 1 0 0 1 -1 1h-1a1 1 0 0 1 -1 -1v-5"></path>
            <path d="M12 8h0l4.524 -3.77a.9 .9 0 0 1 1.476 .692v12.156a.9 .9 0 0 1 -1.476 .692l-4.524 -3.77h-8a1 1 0 0 1 -1 -1v-4a1 1 0 0 1 1 -1h8"></path>
        </svg>
        <h2 class="[ text-2xl font-bold ] [ dark:text-gray-200 ]">Announcements</h2>
    </header>
</section>

@code {
    private string Title = "I ❤️ DotNet";
    private string Description = "This is a .NET knowledge sharing platform with live demos crafted by developers for developers with love.";
    private string BaseUrl => configuration.GetValue<string>("baseUrl")!;
    private IEnumerable<ContentMetaData> Contents = Enumerable.Empty<ContentMetaData>();
    private string? SelectedContentType;
    private int Count = 1;
    private int Take => TableOfContents.PageSize * Count;

    protected override void OnInitialized()
    {
        Contents = tableOfContents.FilteredAndPagedContents();
    }

    private void FilterContent(string? selectedContentType)
    {
        SelectedContentType = selectedContentType;
        Count = 1;

        Contents = tableOfContents.FilteredAndPagedContents(selectedContentType);
    }

    private void ShowMoreContents()
    {
        Count++;
        Contents = tableOfContents.FilteredAndPagedContents(SelectedContentType, 0, Take);
    }
}