@page "/blogs/interface-segregation-principle-in-solid"
@inherits BasePage

<Content FileName=@nameof(InterfaceSegregation) UseNewTableOfContentsMenu=true>
  <ContentBody>
    <What>
        <p>
            In this article, let's learn about <ContentHighlight>Interface Segregation Principle</ContentHighlight>
            in <ContentHighlight>SOLID</ContentHighlight> Principles in .NET.
        </p>
        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink href="blogs/liskov-substitution-principle-in-solid" Match="NavLinkMatch.All">Liskov
                Substitution Principle in SOLID</NavLink>.
        </p>
    </What>
    <Why>
        <p>
            The <ContentHighlight>Interface Segregation Principle (ISP)</ContentHighlight> is essential for creating software that is easy to maintain and scale. It ensures that clients are <ContentHighlight>only exposed to the methods they require, and not to methods that are unnecessary</ContentHighlight>. By doing so, it keeps <ContentHighlight>interfaces</ContentHighlight> lean and reduces the complexity of the codebase.
        </p>
        <p>
          Without ISP, interfaces can become bloated, and it can be challenging to maintain them. If an interface has too many methods, it can become a barrier to change. Any modification to the interface requires clients to update their implementation, which can be a time-consuming and error-prone process.
        </p>
        <p>
            The Interface Segregation Principle states that clients <ContentHighlight>should not be forced to implement interfaces they don't use</ContentHighlight>. Instead, interfaces should be designed to be specific to the needs of the clients that use them.
        </p>
         <p>
           To put it simply, this principle suggests that you should break large interfaces into smaller, more specific ones that are easier to manage and maintain. Clients should only depend on the methods that they need, and not on the methods that are irrelevant to them.
        </p>
    </Why>

    <How>
      <p>
        Let's look at a real-world example where the <ContentHighlight>Interface Segregation Principle (ISP)</ContentHighlight> can make your codebase more maintainable and flexible. Imagine you have a generic repository interface that handles both read and write operations for your entities. Over time, this interface can become very large, and not all consumers need all the methods. For example, some services may only need to read data, while others need full CRUD operations.
      </p>
      <p>
        Here is an example of a large repository interface that violates ISP:
      </p>
      <CodeSnippet CssClass="language-csharp">
public interface IAsyncRepository&lt;T&gt; where T : class
{
    Task&lt;int&gt; CountAsync(CancellationToken cancellationToken = default);
    Task&lt;int&gt; CountAsync(ISpecification&lt;T&gt; spec, string? cacheKey, CancellationToken cancellationToken = default);
    Task&lt;Maybe&lt;T&gt;&gt; FindAsync(Guid id, CancellationToken cancellationToken = default);
    Task&lt;Maybe&lt;T&gt;&gt; FirstOrDefaultAsync(ISpecification&lt;T&gt; spec, CancellationToken cancellationToken = default);
    Task&lt;Maybe&lt;TResult&gt;&gt; FirstOrDefaultAsync&lt;TResult&gt;(ISpecification&lt;T, TResult&gt; spec, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; FromSqlQueryAsync(FormattableString sql, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; FromSqlRawAsync(string sql, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; ListAsync(CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; ListAsync(Specification&lt;T&gt; spec, string? cacheKey, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; ListAsync(ISpecification&lt;T&gt; spec, string? cacheKey, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;TResult&gt;&gt; ListAsync&lt;TResult&gt;(ISpecification&lt;T, TResult&gt; spec, CancellationToken cancellationToken = default);
    
    Task&lt;T&gt; AddAsync(T entity, CancellationToken cancellationToken = default);
    Task&lt;IEnumerable&lt;T&gt;&gt; AddRangeAsync(IEnumerable&lt;T&gt; entity, CancellationToken cancellationToken = default);
    Task&lt;IDbContextTransaction&gt; BeginTransactionAsync(CancellationToken cancellationToken = default);
    void CommitTransaction();
    Task&lt;int&gt; ExecuteSqlRawAsync(string sql, CancellationToken cancellationToken = default);
    Task&lt;T&gt; FirstAsync(ISpecification&lt;T&gt; spec, CancellationToken cancellationToken = default);
    void Remove(T entity);
    void RemoveRange(IEnumerable&lt;T&gt; entity);
    void RollbackTransaction();
    Task&lt;Result&gt; SaveChangesAsync(CancellationToken cancellationToken = default);
    T Update(T entity);
    void UpdateRange(IEnumerable&lt;T&gt; entity);
}
      </CodeSnippet>
      <p>
        This interface has too many responsibilities. If a consumer only needs to read data, it is still forced to depend on all the write and transaction methods. This makes the code harder to maintain and violates the Interface Segregation Principle.
      </p>
      <p>
        To follow ISP, you can split this large interface into smaller, more focused interfaces. For example, you can create a <ContentHighlight>IAsyncReadRepository&lt;T&gt;</ContentHighlight> for read operations and let <ContentHighlight>IAsyncRepository&lt;T&gt;</ContentHighlight> inherit from it for write operations:
      </p>
      <CodeSnippet CssClass="language-csharp">
public interface IAsyncReadRepository&lt;T&gt; where T : class
{
    Task&lt;int&gt; CountAsync(CancellationToken cancellationToken = default);
    Task&lt;int&gt; CountAsync(ISpecification&lt;T&gt; spec, string? cacheKey, CancellationToken cancellationToken = default);
    Task&lt;Maybe&lt;T&gt;&gt; FindAsync(Guid id, CancellationToken cancellationToken = default);
    Task&lt;Maybe&lt;T&gt;&gt; FirstOrDefaultAsync(ISpecification&lt;T&gt; spec, CancellationToken cancellationToken = default);
    Task&lt;Maybe&lt;TResult&gt;&gt; FirstOrDefaultAsync&lt;TResult&gt;(ISpecification&lt;T, TResult&gt; spec, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; FromSqlQueryAsync(FormattableString sql, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; FromSqlRawAsync(string sql, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; ListAsync(CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; ListAsync(Specification&lt;T&gt; spec, string? cacheKey, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;T&gt;&gt; ListAsync(ISpecification&lt;T&gt; spec, string? cacheKey, CancellationToken cancellationToken = default);
    Task&lt;IReadOnlyList&lt;TResult&gt;&gt; ListAsync&lt;TResult&gt;(ISpecification&lt;T, TResult&gt; spec, CancellationToken cancellationToken = default);
}

public interface IAsyncRepository&lt;T&gt; : IAsyncReadRepository&lt;T&gt; where T : class
{
    Task&lt;T&gt; AddAsync(T entity, CancellationToken cancellationToken = default);
    Task&lt;IEnumerable&lt;T&gt;&gt; AddRangeAsync(IEnumerable&lt;T&gt; entity, CancellationToken cancellationToken = default);
    Task&lt;IDbContextTransaction&gt; BeginTransactionAsync(CancellationToken cancellationToken = default);
    void CommitTransaction();
    Task&lt;int&gt; ExecuteSqlRawAsync(string sql, CancellationToken cancellationToken = default);
    Task&lt;T&gt; FirstAsync(ISpecification&lt;T&gt; spec, CancellationToken cancellationToken = default);
    void Remove(T entity);
    void RemoveRange(IEnumerable&lt;T&gt; entity);
    void RollbackTransaction();
    Task&lt;Result&gt; SaveChangesAsync(CancellationToken cancellationToken = default);
    T Update(T entity);
    void UpdateRange(IEnumerable&lt;T&gt; entity);
}
      </CodeSnippet>
      <p>
        Now, if a service only needs to read data, it can depend on <ContentHighlight>IAsyncReadRepository&lt;T&gt;</ContentHighlight> and ignore all the write and transaction methods. This makes your code more modular, easier to test, and easier to maintain. If you need full CRUD operations, you can use <ContentHighlight>IAsyncRepository&lt;T&gt;</ContentHighlight> which includes both read and write methods.
      </p>
    </How>
    <Summary>
      <p>
        <strong>Advantages of Interface Segregation Principle:</strong>
      </p>
      <ul>
        <li><ContentHighlight>Encourages Modularity and Extensibility</ContentHighlight>: By segregating interfaces, each interface becomes smaller and focused on a specific functionality. This encourages modularization of code and makes it easy to extend the application by adding new functionality through new interfaces.</li>
        <li><ContentHighlight>Improves Code Readability and Maintainability</ContentHighlight>: Interfaces that are not cluttered with unnecessary methods are easier to read and maintain. This makes the code more understandable and less prone to errors, leading to better quality software.</li>
        <li><ContentHighlight>Reduces coupling and Improves testability</ContentHighlight>: By separating interfaces into smaller, more focused interfaces, we can reduce the coupling between classes. This makes the code more modular and easier to test. We can test each interface in isolation, which helps to identify any issues in the interface early in the development process.</li>
        <li><ContentHighlight>Increases Code Reusability</ContentHighlight>: Interfaces that are designed with the ISP in mind can be reused in multiple projects. This saves time and effort by reducing the need to write new code for each project.</li>
      </ul>
      <p>
        The <ContentHighlight>Interface Segregation Principle</ContentHighlight> is an essential part of the SOLID principles in object-oriented design. It states that a <ContentHighlight>client should not be forced to depend on methods it does not use</ContentHighlight>. By separating <ContentHighlight>interfaces</ContentHighlight> into smaller, more focused <ContentHighlight>interfaces</ContentHighlight>, we can <ContentHighlight>reduce coupling</ContentHighlight> between classes, improve <ContentHighlight>code readability</ContentHighlight> and <ContentHighlight>maintainability</ContentHighlight>, and increase <ContentHighlight>code reusability</ContentHighlight>.
      </p>
    </Summary>
  </ContentBody>
</Content>