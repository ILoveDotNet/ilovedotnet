@inject IConfiguration configuration
@inject NavigationManager navigationManager
@inject Sitemaps sitemap
@inject TableOfContents tableOfContents

<Title>@contentMetaData!.Title - I ❤️ DotNet</Title>

<Meta Property="description" Content="@contentMetaData!.Description" />
<Meta Property="keywords" Content="@($".NET, DotNet, I Love DotNet, I ❤️ DotNet, Blazor, Blazor (WebAssembly), Blazor Wasm, C#, Entity Framework, LINQ, ML.NET, Web API, TDD, OOPS, Middleware, JWT, Dependency Injection, Report, Design Pattern, SOLID, HTTP Client, OWASP, SignalR, {string.Join(", ", contentMetaData.Keywords)}")" />
<Meta Property="url" Content="@($"{BaseUrl}{contentMetaData.Type}/{slug}/")" />
<Meta Property="identifier-URL" Content="@($"{BaseUrl}{contentMetaData.Type}/{slug}/")" />
<Meta Property="og:site_name" Content="I Love DotNet" />
<Meta Property="og:type" Content="article" />
<Meta Property="og:title" Content="@contentMetaData.Title" />
<Meta Property="og:image" Content="@($"{BaseUrl}image/brand/mini-logo.png")" />
<Meta Property="og:image" Content="@($"{BaseUrl}{normalizedPosterPath.Replace("webp", "png")}")" />
<Meta Property="og:image:alt" Content="DotNet bot with heart and DotNet brand" />
<Meta Property="og:description" Content="@contentMetaData.Description" />
<Meta Property="og:url" Content="@($"{BaseUrl}{contentMetaData.Type}/{slug}/")" />
<Meta Property="twitter:card" Content="summary_large_image" />
<Meta Property="twitter:title" Content="@contentMetaData.Title" />
<Meta Property="twitter:image" Content="@($"{BaseUrl}image/brand/mini-logo.png")" />
<Meta Property="twitter:image" Content="@($"{BaseUrl}{normalizedPosterPath.Replace("webp", "png")}")" />
<Meta Property="twitter:image:alt" Content="DotNet bot with heart and DotNet brand" />
<Meta Property="twitter:description" Content="@contentMetaData.Description" />
<Meta Property="twitter:url" Content="@($"{BaseUrl}{contentMetaData.Type}/{slug}/")" />
<Meta Property="article:published_time" Content="@contentMetaData.CreatedOn.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")" />
<Meta Property="article:modified_time" Content="@contentMetaData.ModifiedOn.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")" />
<Meta Property="article:tag" Content=".NET" />
<Meta Property="article:tag" Content="DotNet" />
<Meta Property="article:tag" Content="I Love DotNet" />
<Meta Property="article:tag" Content="I ❤️ DotNet" />
<Meta Property="article:tag" Content="Blazor" />
<Meta Property="article:tag" Content="Blazor (WebAssembly)" />
<Meta Property="article:tag" Content="Blazor Wasm" />
<Meta Property="article:tag" Content="C#" />
<Meta Property="article:tag" Content="Entity Framework" />
<Meta Property="article:tag" Content="LINQ" />
<Meta Property="article:tag" Content="ML.NET" />
@foreach(var keyword in contentMetaData.Keywords)
{
    <Meta Property="article:tag" Content="@keyword" />
}
@foreach(var sitemap in sitemap.Files)
{
    <Link Rel="sitemap" Href="@($"{BaseUrl}{sitemap}")" type="application/xml" title="Sitemap" />   
}
<Link Rel="alternate" Href="@($"{BaseUrl}atom.xml")" type="application/rss+xml" />
<Link Rel="alternate" Href="@($"{BaseUrl}{contentMetaData.Type}/{slug}/")" hreflang="en" />
<Link Rel="alternate" Href="@($"{BaseUrl}{contentMetaData.Type}/{slug}/")" hreflang="x-default" />
<Link Rel="canonical" Href="@($"{BaseUrl}{contentMetaData.Type}/{slug}/")" />
<Link Rel="index" Href="@($"{BaseUrl}{contentMetaData.Type}/{slug}/")" title="@($"{contentMetaData.Title} - I ❤️ DotNet")" />
<HeadContent>
    @(new MarkupString(
        $$""""
        <script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "Article",
            "publisher": {
                "@type": "Organization",
                "name": "I Love DotNet",
                "url": "{{BaseUrl}}",
                "logo": {
                    "@type": "ImageObject",
                    "url": "{{BaseUrl}}favicon.ico",
                    "width": 16,
                    "height": 16
                }
            },
            "author": {
                "@type": "Person",
                "name": "Abdul Rahman Shabeek Mohamed",
                "image": {
                    "@type": "ImageObject",
                    "url": "//https://www.gravatar.com/avatar/6f221209a03c1800679fc684dea24bf2?s=250&d=mm&r=x",
                    "width": 250,
                    "height": 250
                },
                "url": "{{BaseUrl}}author/abdulrahman/",
                "sameAs": [
                    "https://www.linkedin.com/in/fingers10",
                    "https://github.com/fingers10",
                    "https://stackoverflow.com/users/10851213/fingers10",
                    "https://www.youtube.com/channel/UCOS3wCw7SVXjXXffMPqid7A"
                ]
            },
            "headline": "{{contentMetaData.Title}}",
            "url": "{{BaseUrl}}{{contentMetaData.Type}}/{{slug}}/",
            "datePublished": "{{contentMetaData.CreatedOn:yyyy-MM-ddTHH:mm:ss.fffZ}}",
            "dateModified": "{{contentMetaData.ModifiedOn:yyyy-MM-ddTHH:mm:ss.fffZ}}",
            "image": {
                "@type": "ImageObject",
                "url": "{{BaseUrl}}{{normalizedPosterPath.Replace("webp", "png")}}",
                "width": 1265,
                "height": 827
            },
            "keywords": ".NET, DotNet, I Love DotNet, I ❤️ DotNet, Blazor, Blazor (WebAssembly), Blazor Wasm, C#, Entity Framework, LINQ, ML.NET, Web API, TDD, OOPS, Middleware, JWT, Dependency Injection, Report, Design Pattern, SOLID, HTTP Client, OWASP, SignalR, {{string.Join(", ", contentMetaData.Keywords)}}",
            "description": "{{contentMetaData.Description}}",
            "mainEntityOfPage": {
                "@type": "WebPage",
                "@id": "{{BaseUrl}}"
            }
        }
        </script>
        """"
    ))
</HeadContent>

@code {
    private string? slug;
    private ContentMetaData? contentMetaData = default!;
    private string BaseUrl => configuration.GetValue<string>("baseUrl")!;
    private string normalizedPosterPath => contentMetaData!.PosterUrl.ToLower();

    override protected void OnInitialized()
    {
        slug = navigationManager.Uri.ToString().Split('/').Last();
        ArgumentException.ThrowIfNullOrWhiteSpace(slug, nameof(slug));
        contentMetaData = tableOfContents.GetContentBySlug(slug);
    }
}
