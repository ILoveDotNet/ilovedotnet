@using System.Globalization;
@inject TableOfContents tableOfContents

<ContentHead Title=@Title
             Description=@Description
             CreatedOn=@CreatedOn
             ModifiedOn=@ModifiedOn
             Slug=@Slug
             PosterPath=@PosterPath
             ContentType=@ContentType
             Keywords=@Keywords>
</ContentHead>

<section class="[ flex flex-col md:flex-row ] [ p-5 md:px-20 ] [ md:space-x-5 space-y-5 md:space-y-0 ]">
    <article class="[ md:basis-3/4 ] [ space-y-5 ]">
        <ContentHeader Title=@Title
                       ModifiedOn=@ModifiedOn
                       Slug=@Slug
                       PosterPath=@PosterPath
                       ChannelIconName="@Channel"
                       TotalContents=@TotalContents
                       VideoUrl=@VideoUrl
                       FileName=@FileName
                       Type=@Type>
        </ContentHeader>
        <section class="[ dark:text-white ] [ space-y-2 ] [ leading-relaxed ]">
            @ContentBody
            <WhatsAppChannelAlert />
            <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>
        </section>
        <footer class="[ max-w-full ]">
            <ul class="[ list-none ] [ flex items-center justify-start md:justify-center ] [ space-x-3 ] [ overflow-hidden overflow-x-auto ]">
                <li class="[ px-3 py-1 ] [ rounded-md ] [ bg-black text-white dark:bg-white dark:text-black ]">@(CultureInfo.CurrentUICulture.TextInfo.ToTitleCase(Channel.Replace("-", " ")))</li>
                @foreach(var keyword in Keywords)
                {
                    <li class="[ px-3 py-1 ] [ rounded-md ] [ bg-black text-white dark:bg-white dark:text-black ] [ whitespace-nowrap ]">@keyword</li>
                }
            </ul>
        </footer>
        <hr class="[ dark:text-white my-1.5 ]" />
    </article>
    <ContentRecommendation Title=@Title></ContentRecommendation>
</section>

@code {
    [Parameter, EditorRequired] public string Title { get; set; } = default!;
    [Parameter, EditorRequired] public string Description { get; set; } = default!;
    [Parameter, EditorRequired] public DateTime CreatedOn { get; set; } = default!;
    [Parameter, EditorRequired] public DateTime ModifiedOn { get; set; } = default!;
    [Parameter, EditorRequired] public string Slug { get; set; } = default!;
    [Parameter, EditorRequired] public string PosterPath { get; set; } = default!;
    [Parameter, EditorRequired] public List<string> Keywords { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment ContentBody { get; set; } = default!;
    [Parameter, EditorRequired] public string Channel { get; set; } = default!;
    [Parameter, EditorRequired] public string ContentType { get; set; } = default!;
    [Parameter, EditorRequired] public ushort TotalContents { get; set; } = default!;
    [Parameter, EditorRequired] public string FileName { get; set; } = default!;
    [Parameter, EditorRequired] public string Type { get; set; } = default!;
    [Parameter] public string? VideoUrl { get; set; } = default!;

    override protected void OnInitialized()
    {
        var contentMetaData = tableOfContents.GetContentBySlug(Slug);
        Title = contentMetaData.Title;
        CreatedOn = contentMetaData.CreatedOn;
        ModifiedOn = contentMetaData.ModifiedOn;
        Keywords = contentMetaData.Keywords;
        Type = contentMetaData.Type.Replace("-", string.Empty);
        VideoUrl = contentMetaData.VideoUrl;
    }
}