<div class="[ max-w-full ]">
    <ul class="[ list-none ] [ flex items-center justify-start ] [ space-x-3 ] [ overflow-hidden overflow-x-auto ]">
        <li class="@($"[ cursor-pointer ] [ px-3 py-1 ] [ rounded-full ] [ whitespace-nowrap ] [ {(selectedContentType == null ? activeClass : inActiveClass)} ]")"
            onclick="@(() => FilterContent(null))">All</li>
        @foreach (var contentType in TableOfContents.Contents.Select(content => content.Type).Distinct())
        {
            <li class="@($"[ cursor-pointer ] [ px-3 py-1 ] [ rounded-full ] [ whitespace-nowrap ] [ {(selectedContentType is not null && selectedContentType.Equals(contentType, StringComparison.OrdinalIgnoreCase) ? activeClass : inActiveClass)} ]")"
            @onclick="@(() => FilterContent(@contentType))">@contentType.Replace("-", " ")</li>
        }
    </ul>
</div>

@code {
    private List<ContentMetaData> Contents = new(0);
    private string? selectedContentType = null;
    private string activeClass = "bg-black text-white dark:bg-white dark:text-black";
    private string inActiveClass = "bg-gray-200 text-black dark:bg-gray-600 dark:text-white";

    [Inject] private TableOfContents TableOfContents { get; set; } = default!;

    [Parameter, EditorRequired] public EventCallback<List<ContentMetaData>> OnFilterContents { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await FilterContent(null);
    }

    private async Task FilterContent(string? contentType)
    {
        selectedContentType = contentType;

        foreach (var content in TableOfContents.Contents)
        {
            Console.WriteLine(content.Title);
        }

        if (selectedContentType is null)
        {
            Contents = TableOfContents.Contents.OrderByDescending(content => content.CreatedOn).ToList();
            await OnFilterContents.InvokeAsync(Contents);
            return;
        }   

        Contents = TableOfContents.Contents
                                  .Where(content => content.Type.Equals(selectedContentType, StringComparison.OrdinalIgnoreCase))
                                  .OrderByDescending(content => content.CreatedOn)
                                  .ToList();

        await OnFilterContents.InvokeAsync(Contents);
    }
}