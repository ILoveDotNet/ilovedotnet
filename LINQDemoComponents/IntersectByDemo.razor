<section class="[ flex flex-col ] [ space-y-1 ]">
    <IntegerSequenceDemo Numbers="productIds"></IntegerSequenceDemo>
    <table class="[ table-fixed border-collapse ] [ bg-white ] [ border-2 ] [ dark:bg-black dark:border-slate-500 ] [ mt-2 ] [ w-full ]">
        <thead>
            <tr class="[ bg-gray-100 ] [ dark:bg-slate-500 ]">
                <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">Id</th>
                <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                    <tr>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">@product.Id</td>
                        <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">@product.Name</td>
                    </tr>
            }
        </tbody>
    </table>
</section>

<p>Common Product Ids : @string.Join(", ", common.Select(product => product.Id))</p>

<button type="button" class="[ bg-cyan-500 ] [ text-white ] [ px-4 py-2 ] [ inline-block ] [ rounded-md ] [ inline-flex ] [ space-x-1 ]" @onclick="HandleIntersectBy">
    Check Intersect By Common
</button>

<button type="button" class="[ bg-fuchsia-500 ] [ text-white ] [ px-4 py-2 ] [ inline-block ] [ rounded-md ] [ inline-flex ] [ space-x-1 ]" @onclick="Reset">
    Reset
</button>

@code
{
    private List<int> productIds = new(3);
    private IEnumerable<Product> products = new ProductSource().Products;
    private List<Product> common = new();

    private void HandleIntersectBy()
    {
        common = products.IntersectBy(productIds, product => product.Id).ToList();
    }

    private void Reset()
    {
        productIds = new(3);
        products = new ProductSource().Products;
        common = new();
    }
}