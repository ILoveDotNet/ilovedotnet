<section class="[ flex flex-col ] [ space-y-1 ]">
    <IntegerSequenceDemo Numbers="numbers"></IntegerSequenceDemo>
    <IntegerSequenceDemo Numbers="anotherNumbers"></IntegerSequenceDemo>
</section>

<p>Combined with duplicates : @string.Join(", ", combine)</p>

<button type="button" class="[ bg-cyan-500 ] [ text-white ] [ px-4 py-2 ] [ inline-block ] [ rounded-md ] [ inline-flex ] [ space-x-1 ]" @onclick="HandleConcat">
    Concat
</button>

<button type="button" class="[ bg-fuchsia-500 ] [ text-white ] [ px-4 py-2 ] [ inline-block ] [ rounded-md ] [ inline-flex ] [ space-x-1 ]" @onclick="ResetSequence">
    Reset
</button>

@code
{
    private List<int> numbers = new(3);
    private List<int> anotherNumbers = new(3);
    private List<int> combine = new();

    private void HandleConcat()
    {
        combine = numbers.Concat(anotherNumbers).ToList();
    }

    private void ResetSequence()
    {
        numbers = new(3);
        anotherNumbers = new(3);
        combine = new();
    }
}