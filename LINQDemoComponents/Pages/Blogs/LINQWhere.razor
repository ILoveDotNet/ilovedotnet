@page "/blogs/using-linq-where-to-filter-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(LINQWhere)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Where</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-orderby-to-sort-data" Match="NavLinkMatch.All">Using LINQ OrderBy to Sort Data in collections</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#tldr")" Match="NavLinkMatch.All">
                    TLDR
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#single-property")" Match="NavLinkMatch.All">
                    Single Property
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#multiple-properties")" Match="NavLinkMatch.All">
                    Multiple Properties
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#custom-extension-method")" Match="NavLinkMatch.All">
                    Custom Extension Method
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            We can use LINQ <ContentHighlight>Where</ContentHighlight> to filter data within collections based on true or false condition(s). The resulting collection can be same, less or even 
            empty. We can chain conditions with logical operators like <ContentHighlight>&&</ContentHighlight>, <ContentHighlight>||</ContentHighlight>, <ContentHighlight>!</ContentHighlight>, etc. 
            we're going to find out and use AND and OR in a where clause, and talk about building your own custom extension method.
        </p>

        <h3 id="tldr" class="[ font-semibold text-lg ]">TLDR</h3>

        <figure>
            <img src="./image/blogs/linq/where/LINQ Where in DotNet.png" alt="LINQ Where in .NET" class="[ w-full ]" />
        </figure>

        <h3 id="single-property" class="[ font-semibold text-lg ]">Where Single Property</h3>

        <p>
            The following example shows how to filter <ContentHighlight>Product</ContentHighlight> class by one property.
        </p>

        <GithubGistSnippet Title="LINQ Where Single Property" UserId="fingers10" FileName="177a49c547c59f899961f3317dcf2ac8"></GithubGistSnippet>

        <h3 id="multiple-properties" class="[ font-semibold text-lg ]">Where Multiple Properties</h3>

        <p>
            The following example shows how to filter <ContentHighlight>Product</ContentHighlight> class with more than one property using <ContentHighlight>AND</ContentHighlight>, 
            <ContentHighlight>OR</ContentHighlight> operators.
        </p>

        <GithubGistSnippet Title="LINQ Where Multiple Properties" UserId="fingers10" FileName="c529fc806a0823626502a879540c23a4"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="custom-extension-method" class="[ font-semibold text-lg ]">Custom Extension Method</h3>

        <p>
            Let's take a look at creating our own custom extension method where we create a method that returns an IEnumerable&lt;T&gt;, that way we can use this method on the query instead of 
            like Where. For example. So we could do <ContentHighlight>from prod in products select prod.ByColor</ContentHighlight>, and then we pass in the parameter like Red. Now this is exactly 
            like doing a where clause, but it allows us to do things that could be maybe more complicated. What we do is we create a static class that has a static method in it. And if you'll 
            notice here, we're using the <ContentHighlight>this</ContentHighlight> keyword to key to the type of object, which in this case is an IEnumerable of Product, IEnumerable&lt;T&gt;, 
            right? So if you're familiar with extension methods, this is a very common thing we do to extend classes that Microsoft has built or other people have built. We then also pass in any 
            other parameters, in this case a color, and then we invoke the <ContentHighlight>Where</ContentHighlight> method to filter the data. So query, right, is what we passed in as the 
            parameter, and we return <ContentHighlight>query.Where</ContentHighlight>, pass in product, product.Color is equal to the color that was passed in the parameter. 
        </p>

        <p>
            The following example shows how to filter <ContentHighlight>Product</ContentHighlight> class with custom extension method.
        </p>

        <GithubGistSnippet Title="LINQ Where Custom Extension Method" UserId="fingers10" FileName="4f579fc60936912df2c63a61103f8f36"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Where Clause Demo">
            <p>
                Let's try LINQ Where
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight></li>
                <li>Enter the column names you would like to filter with condition.</li>
                <li>Click on Where Button</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <WhereDemo></WhereDemo>

        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to filter data within collection using LINQ. We also learn't how to filter with multiple fields using AND and OR conditions. We also made our own custom 
            extension method to filter a collection. All these can be used with any <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "using-linq-where-to-filter-data";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
}