@page "/blogs/using-linq-where-to-filter-data"
@using LINQDemoComponents
@inherits BasePage

<Content FileName=@nameof(LINQWhere) UseNewTableOfContentsMenu=true>
    <ContentBody>
      <What>
        <p>
            This article explains how to use the <ContentHighlight>Where</ContentHighlight> method in <ContentHighlight>LINQ</ContentHighlight> to filter data in .NET.
        </p>
        <p>
            <strong>Note:</strong> If you haven't already, read the article on
            <NavLink href="blogs/using-linq-orderby-to-sort-data" Match="NavLinkMatch.All">Using LINQ OrderBy to Sort Data in collections</NavLink>.
        </p>
        <figure>
            <img src="./image/blogs/linq/where/LINQ Where in DotNet.png" alt="LINQ Where in .NET" class="[ w-full ]" />
        </figure>
      </What>
      <Why>
        <p>
            The <ContentHighlight>Where</ContentHighlight> method in LINQ allows filtering collections based on conditions. The resulting collection can be the same, smaller, or even empty. You can chain conditions using logical operators like <ContentHighlight>&&</ContentHighlight>, <ContentHighlight>||</ContentHighlight>, and <ContentHighlight>!</ContentHighlight>.
        </p>
      </Why>
      <How>
        <h4>Filtering by Single Property</h4>
        <p>
            Example of filtering a <ContentHighlight>Product</ContentHighlight> class by a single property.
        </p>
        <GithubGistSnippet Title="LINQ Where Single Property" UserId="fingers10" FileName="177a49c547c59f899961f3317dcf2ac8"></GithubGistSnippet>

        <h4>Filtering by Multiple Properties</h4>
        <p>
            Example of filtering a <ContentHighlight>Product</ContentHighlight> class by multiple properties using <ContentHighlight>AND</ContentHighlight> and <ContentHighlight>OR</ContentHighlight> operators.
        </p>
        <GithubGistSnippet Title="LINQ Where Multiple Properties" UserId="fingers10" FileName="c529fc806a0823626502a879540c23a4"></GithubGistSnippet>

        <h4>Custom Extension Method</h4>
        <p>
            Create a custom extension method to filter a collection. This method returns an <ContentHighlight>IEnumerable&lt;T&gt;</ContentHighlight> and can be used on the query instead of the <ContentHighlight>Where</ContentHighlight> method.
        </p>
        <GithubGistSnippet Title="LINQ Where Custom Extension Method" UserId="fingers10" FileName="4f579fc60936912df2c63a61103f8f36"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Where Clause Demo">
            <p>
                Let's try LINQ Where
            </p>
            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have a <ContentHighlight>Product</ContentHighlight> class with properties: <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight>.</li>
                <li>Enter the column names you would like to filter with conditions.</li>
                <li>Click on the Where button.</li>
                <li>Click on reset to try other combinations.</li>
            </ul>
            <WhereDemo></WhereDemo>
        </DemoSnippet>
      </How>
      <Summary>
        <p>
            This article covered how to filter data in collections using LINQ. We explored filtering with single and multiple fields using AND and OR conditions, and created a custom extension method. These techniques can be used with any <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
      </Summary>
    </ContentBody>
</Content>