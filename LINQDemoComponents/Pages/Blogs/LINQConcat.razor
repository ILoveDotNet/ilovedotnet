@page "/blogs/using-linq-concat-to-combine-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(LINQConcat)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Concat</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-union-to-combine-data" Match="NavLinkMatch.All">Using LINQ Union to combine data</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#primitive-types")" Match="NavLinkMatch.All">
                    Using LINQ Concat to combine primitive types
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#equality-comparer")" Match="NavLinkMatch.All">
                    Using LINQ Concat to combine with Equality Comparer
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            When working with two collections, we can combine them using LINQ <ContentHighlight>Concat()</ContentHighlight> method. This will combine two collections and gives a single 
            collection with duplicates.
        </p>

        <p>
            LINQ <ContentHighlight>Concat()</ContentHighlight> is used to answer questions about collection such as
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Combining multiple data set from different sources for analysis</li>
            <li>Git merge and combine files with changes from both commits</li>
            <li>Append lines to files</li>
        </ul>

        <h3 id="primitive-types" class="[ font-semibold text-lg ]">Using LINQ Concat to combine primitive types</h3>

        <p>
            Primitive data types like <ContentHighlight>int</ContentHighlight>, <ContentHighlight>decimal</ContentHighlight>, <ContentHighlight>string</ContentHighlight>, etc can just
            compare the values against other value in the collection
        </p>

        <GithubGistSnippet Title="LINQ Concat Primitive Types" UserId="fingers10" FileName="33cdf49eccc4439e739d2d66b8ce8bec"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Concat Clause Demo">
            <p>
                Let's try LINQ Concat with integer type
            </p>

            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>Enter number and add it to respective sequence</li>
                <li>For demo purpose I have restricted sequence length to 3</li>
                <li>Click on Concat Button to view the result</li>
                <li>Click on reset to try other combination</li>
            </ol>

            <ConcatDemo></ConcatDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="equality-comparer" class="[ font-semibold text-lg ]">Using LINQ Concat to combine with Equality Comparer</h3>

        <p>
            So, combining primitive data types with <ContentHighlight>Concat()</ContentHighlight> is easy and straight forward. The same goes with objects. There is no need for comparer 
            as <ContentHighlight>Concat()</ContentHighlight> is going to simply combine without comparing.
        </p>

        <GithubGistSnippet Title="LINQ Concat Product Comparer" UserId="fingers10" FileName="397a8b7689831bac6da7e46d78f63768"></GithubGistSnippet>

        <GithubGistSnippet Title="LINQ Concat With Product Comparer" UserId="fingers10" FileName="29b888b1a49f3ca305b57140b12a9751"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Concat Clause with Objects Demo">
            <p>
                Let's try LINQ Concat with Comparer
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>The tables are loaded with two product collection.</li>
                <li>Click on Concat Button to view the result.</li>
                <li>Unlike previous demo, here we use <ContentHighlight>ProductComparer</ContentHighlight> to compare objects based on their property values. So they will be equal irrespective of reference.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <ConcatObjectDemo></ConcatObjectDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to combine data between collections using <ContentHighlight>Concat</ContentHighlight>. This can be used to combine items between collection 
            and return a unified collection with duplicates. All these can be used with any <ContentHighlight>IEnumerable</ContentHighlight> or 
            <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "using-linq-concat-to-combine-data";
    private string PosterPath = "Blogs/LINQ";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
}