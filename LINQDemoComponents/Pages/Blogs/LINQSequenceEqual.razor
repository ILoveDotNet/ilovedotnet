@page "/blogs/using-linq-sequence-equal-to-find-equality-of-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(LINQSequenceEqual)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>SequenceEqual</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-contains-to-check-data" Match="NavLinkMatch.All">Using LINQ Contains to Check Data</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#primitive-types")" Match="NavLinkMatch.All">
                    Using LINQ Sequence Equal to compare primitive types
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#objects")" Match="NavLinkMatch.All">
                    Using LINQ Sequence Equal to compare objects
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#equality-comparer")" Match="NavLinkMatch.All">
                    Using LINQ Sequence Equal to compare with Equality Comparer
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            When working with two collections, we can find the equality between them using LINQ <ContentHighlight>SequenceEqual()</ContentHighlight> method. The idea here is to find out 
            if two collections are equal or find values in one which is not in other or to find values in common. With <ContentHighlight>SequenceEqual()</ContentHighlight>, we can compare 
            two collections for Equality.
        </p>

        <p>
            LINQ <ContentHighlight>SequenceEqual()</ContentHighlight> is used to answer questions about collection such as
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Read lines from two files and compare like git difference</li>
            <li>Read data from two different table to check for equality</li>
            <li>Compare data in tables between different environments</li>
        </ul>

        <h3 id="primitive-types" class="[ font-semibold text-lg ]">Using LINQ Sequence Equal to compare primitive types</h3>

        <p>
            Primitive data types like <ContentHighlight>int</ContentHighlight>, <ContentHighlight>decimal</ContentHighlight>, <ContentHighlight>string</ContentHighlight>, etc can just
            compare the values against other value in the collection
        </p>

        <GithubGistSnippet Title="LINQ SequenceEqual Primitive Types" UserId="fingers10" FileName="61c769b2cc14509b34637a4acc088f2a"></GithubGistSnippet>

        <DemoSnippet Title="LINQ SequenceEqual Clause Demo">
            <p>
                Let's try LINQ SequenceEqual with integer type
            </p>

            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>Enter number and add it to respective sequence</li>
                <li>For demo purpose I have restricted sequence length to 3</li>
                <li>Click on Sequence Equal Button to view the result</li>
                <li>Click on reset to try other combination</li>
            </ol>

            <SequenceEqualDemo></SequenceEqualDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="objects" class="[ font-semibold text-lg ]">Using LINQ Sequence Equal to compare objects</h3>

        <p>
            Sequence Equal checks for reference equality of two objects for <ContentHighlight>object</ContentHighlight> data types.
        </p>

        <GithubGistSnippet Title="LINQ Sequence Equal Objects" UserId="fingers10" FileName="2d00b00132628463fc1138957a5d1ccb"></GithubGistSnippet>

        <DemoSnippet Title="LINQ SequenceEqual Clause Objects Demo">
            <p>
                Let's try LINQ SequenceEqual with objects
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>The tables are loaded with two product collection.</li>
                <li>Click on Sequence Equal Button to view the result.</li>
                <li>Click on Assign to same reference button to make two collection to point to same reference.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <SequenceEqualObjectDemo></SequenceEqualObjectDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="equality-comparer" class="[ font-semibold text-lg ]">Using LINQ Sequence Equal to compare with Equality Comparer</h3>

        <p>
            So, equality for primitive data types with <ContentHighlight>SequenceEqual()</ContentHighlight> is easy and straight forward, but with objects by default it's going to work by 
            comparing object references. But in most cases we want to make comparison based on one or more properties in the object. To do that we need to start by creating 
            <ContentHighlight>EqualityComparer&lt;T&gt;</ContentHighlight> class.
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create a <ContentHighlight>ProductComparer</ContentHighlight> class that inherits from <ContentHighlight>EqualityComparer&lt;Product&gt;</ContentHighlight> class.</li>
            <li>Override <ContentHighlight>Equals(Product 1, Product 2) method.</ContentHighlight></li>
            <li>Write the conditions to check equality and return true if both matches.</li>
            <li>Also override <ContentHighlight>GetHashCode()</ContentHighlight> method and return unique value for every single object.</li>
        </ol>

        <GithubGistSnippet Title="LINQ Sequence Equal Product Comparer" UserId="fingers10" FileName="24b9d73992162315dcf8481e4d636d3c"></GithubGistSnippet>

        <GithubGistSnippet Title="LINQ Sequence Equal With Product Comparer" UserId="fingers10" FileName="71176dc3397e34cc85d5386ea913b185"></GithubGistSnippet>

        <DemoSnippet Title="LINQ SequenceEqual Clause with Comparer Demo">
            <p>
                Let's try LINQ SequenceEqual with Comparer
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>The tables are loaded with two product collection.</li>
                <li>Click on Sequence Equal Button to view the result.</li>
                <li>Unlike previous demo, here we use <ContentHighlight>ProductComparer</ContentHighlight> to compare objects based on their property values. So they will be equal irrespective of reference.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <SequenceEqualWithComparerDemo></SequenceEqualWithComparerDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to check for equality in data between collections using <ContentHighlight>SequenceEqual</ContentHighlight>. This can be used to 
            find if item is between collection matches or not and also we can compare object item using Comparer. All these can be used with any <ContentHighlight>IEnumerable</ContentHighlight> or 
            <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "using-linq-sequence-equal-to-find-equality-of-data";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
}