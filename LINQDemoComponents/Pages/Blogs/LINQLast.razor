@page "/blogs/using-linq-last-to-select-single-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Description=@Description
         Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="LINQ"
         FileName=@nameof(LINQLast)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Last</ContentHighlight> and <ContentHighlight>LastOrDefault</ContentHighlight> in 
            <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-first-to-select-single-data" Match="NavLinkMatch.All">Using LINQ First to Select Single Data in Collections</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#last")" Match="NavLinkMatch.All">
                    Search backward for an element using Last
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#last-or-default")" Match="NavLinkMatch.All">
                    Search backward for an element using LastOrDefault
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#when-to-use-which")" Match="NavLinkMatch.All">
                    When to use which?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            We can select single piece of data from a collection using LINQ. We're going to use Last() and LastOrDefault() methods. Let's take a look at each of these methods and how they work.
        </p>

        <h3 id="last" class="[ font-semibold text-lg ]">Search backward for an element using Last</h3>

        <p>
            When searching, some of the methods will actually throw an exception if you don't find anything based on the expression. So, for example, first, you pass in your lambda
            expression of what you're looking for. It searches backward in the collection and finds that last one that matches the expression and returns that. If it doesn't find it, it
            throws an exception.
        </p>

        <GithubGistSnippet Title="LINQ Last" UserId="fingers10" FileName="d0e68a34948065e85dd392196d300505"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Last Clause Demo">
            <p>
                Let's try LINQ Last
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight></li>
                <li>Enter the column names you would like to select.</li>
                <li>Click on Last Button</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <LastDemo></LastDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="last-or-default" class="[ font-semibold text-lg ]">Search backward for an element using LastOrDefault</h3>

        <p>
            The LastOrDefault, You pass in a lambda expression of what you're looking for, as well as an optional default value. It searches backwards in the collection, so it starts at the 
            end of the collection and searches backwards, returns null if the values are not found based on the expression, or if you supply a default value, it will return that.
        </p>

        <GithubGistSnippet Title="LINQ LastOrDefault" UserId="fingers10" FileName="c4ea59be5e6a3b0cb98c135e51d6b149"></GithubGistSnippet>

        <DemoSnippet Title="LINQ LastOrDefault Clause Demo">
            <p>
                Let's try LINQ LastOrDefault
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight></li>
                <li>Enter the column names you would like to select.</li>
                <li>Click on Last Or Default Button</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <LastOrDefaultDemo></LastOrDefaultDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="when-to-use-which" class="[ font-semibold text-lg ]">When to use which?</h3>
        
        <p>
            So now I've shown you all these LINQ queries, but which ones do you use and when do you use them? So I'm going to do a comparison between the Last() versus the LastOrDefault()
            methods. If you expect the element to be present in the collection, you can use Last(). But if you're not sure if that element is present, then use LastOrDefault(), and that has
            to do with exceptions, right? Because the Last() is going to throw an exception if something is not found. So if you want to handle that or maybe rethrow an exception if something's 
            not found, you could use Last(). Me, I'd rather not deal with exceptions, so I really prefer LastOrDefault(). Also, this gives us back a null or some other default value, I find 
            it easier to check for null than actually check for an exception.
        </p>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to locate single data within collection using <ContentHighlight>Last</ContentHighlight> and <ContentHighlight>LastOrDefault</ContentHighlight>. We
            saw that there's an option to supply your own default value, that sometimes you need to catch exceptions or sometimes you need to check for null or that default value, depending on
            the method that you're calling. Now I always like using all the <ContentHighlight>OrDefault()</ContentHighlight> methods so that I can avoid anybody throwing exceptions. To me,
            throwing exceptions are not something that you want to use as a regular way of programming. Those should be exceptions. All these can be used with any
            <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Description = "In this post I will teach you how to select single data within collections using LINQ in .NET. All with live working demo.";
    private string Slug = "using-linq-last-to-select-single-data";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
}