@page "/blogs/using-linq-union-to-combine-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="LINQ"
         FileName=@nameof(LINQUnion)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Union</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-intersect-to-find-common-data" Match="NavLinkMatch.All">Using LINQ Intersect to Find Common data</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#primitive-types")" Match="NavLinkMatch.All">
                    Using LINQ Union to combine primitive types
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#equality-comparer")" Match="NavLinkMatch.All">
                    Using LINQ Union to combine with Equality Comparer
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#union-by-object-types")" Match="NavLinkMatch.All">
                    Using LINQ Union By to combine objects
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            When working with two collections, we can combine them using LINQ <ContentHighlight>Union()</ContentHighlight> method. This will combine two collections and gives a single 
            collection with out any duplicates.
        </p>

        <p>
            LINQ <ContentHighlight>Union()</ContentHighlight> is used to answer questions about collection such as
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Git merge and combine files without duplicates</li>
            <li>Combine customers who have participated in specific sale</li>
        </ul>

        <h3 id="primitive-types" class="[ font-semibold text-lg ]">Using LINQ Union to combine primitive types</h3>

        <p>
            Primitive data types like <ContentHighlight>int</ContentHighlight>, <ContentHighlight>decimal</ContentHighlight>, <ContentHighlight>string</ContentHighlight>, etc can just
            compare the values against other value in the collection
        </p>

        <GithubGistSnippet Title="LINQ Union Primitive Types" UserId="fingers10" FileName="64ec823de86c45525c38a0d7ce69cb7e"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Union Clause Demo">
            <p>
                Let's try LINQ Union with integer type
            </p>

            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>Enter number and add it to respective sequence</li>
                <li>For demo purpose I have restricted sequence length to 3</li>
                <li>Click on Union Button to view the result</li>
                <li>Click on reset to try other combination</li>
            </ol>

            <UnionDemo></UnionDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="equality-comparer" class="[ font-semibold text-lg ]">Using LINQ Union to combine with Equality Comparer</h3>

        <p>
            So, combining primitive data types with <ContentHighlight>Union()</ContentHighlight> is easy and straight forward, but with objects by default it's going to work by
            comparing object references. But in most cases we want to make comparison based on one or more properties in the object. To do that we need to start by creating
            <ContentHighlight>EqualityComparer&lt;T&gt;</ContentHighlight> class.
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create a <ContentHighlight>ProductComparer</ContentHighlight> class that inherits from <ContentHighlight>EqualityComparer&lt;Product&gt;</ContentHighlight> class.</li>
            <li>Override <ContentHighlight>Equals(Product 1, Product 2) method.</ContentHighlight></li>
            <li>Write the conditions to check equality and return true if both matches.</li>
            <li>Also override <ContentHighlight>GetHashCode()</ContentHighlight> method and return unique value for every single object.</li>
        </ol>

        <GithubGistSnippet Title="LINQ Union Product Comparer" UserId="fingers10" FileName="a609d75a536cbe7b985cd73eceeaa66f"></GithubGistSnippet>

        <GithubGistSnippet Title="LINQ Union With Product Comparer" UserId="fingers10" FileName="dc8ee787c8462981b533deee6ea062bf"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Union Clause with Comparer Demo">
            <p>
                Let's try LINQ Union with Comparer
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>The tables are loaded with two product collection.</li>
                <li>Click on Union Button to view the result.</li>
                <li>Unlike previous demo, here we use <ContentHighlight>ProductComparer</ContentHighlight> to compare objects based on their property values. So they will be equal irrespective of reference.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <UnionObjectDemo></UnionObjectDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="union-by-object-types" class="[ font-semibold text-lg ]">Using LINQ Union By to combine objects</h3>

        <p>
            Starting .NET 6, Microsoft added <ContentHighlight>UnionBy()</ContentHighlight> which is similar to <ContentHighlight>Union</ContentHighlight> in functionality but with an 
            simplification that we don't need to use a comparer class. We can use <ContentHighlight>Key Expression</ContentHighlight> to combine items.
        </p>

        <GithubGistSnippet Title="LINQ Union By Object Types" UserId="fingers10" FileName="d6b694e9e6529a4652e79ad8bd2419d0"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Union By Clause Demo">
            <p>
                Let's try LINQ Union By with object type
            </p>

            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>We have two <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>The tables are loaded with product collection respectively.</li>
                <li>The Key Expression here is the Product ID. UnionBy() will compare and combine Products from collection.</li>
                <li>For demo purpose I will be displaying only Product ID's</li>
                <li>Click on Union By Button to view the result.</li>
                <li>Click on reset to try other combination</li>
            </ol>

            <UnionByDemo></UnionByDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to combine data between collections using <ContentHighlight>Union</ContentHighlight> and <ContentHighlight>UnionBy</ContentHighlight>. 
            This can be used to combine items between collection and return a unified collection without duplicates. All these can be used with any 
            <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "using-linq-union-to-combine-data";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
}