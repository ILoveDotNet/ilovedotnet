@page "/blogs/linq-introduction"
@inherits BasePage

<Content FileName=@nameof(Introduction)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>
        
        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#assumptions")" Match="NavLinkMatch.All">
                    Assumptions
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#pre-requisites")" Match="NavLinkMatch.All">
                    Pre Requisites
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#examples-sql-loops-and-linq")" Match="NavLinkMatch.All">
                    Examples SQL, Loops and LINQ
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-use-linq")" Match="NavLinkMatch.All">
                    Why use LINQ?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#linq-operations")" Match="NavLinkMatch.All">
                    LINQ Operations
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="assumptions" class="[ font-semibold text-lg ]">Assumptions</h3>

        <p>
            I assumne you are,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>a C# developer</li>
            <li>familiar with SQL</li>
            <li>new to using LINQ</li>
        </ul>

        <h3 id="pre-requisites" class="[ font-semibold text-lg ]">Pre Requisites</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>C# Generics</li>
            <li>C# Delegates, Lambda Expressions</li>
            <li>C# Extension Methods</li>
        </ul>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>
        
        <p>
            Language-Integrated Query <abbr title="Language-Integrated Query">LINQ</abbr> is a SQL‑like syntax that you can use in C# and Visual Basic and allows you to query any type of 
            collections that implement <ContentHighlight>IEnumerable&lt;T&gt;</ContentHighlight> or <ContentHighlight>IQueryable&lt;T&gt;</ContentHighlight>.
        </p>

        <p>
            Now, some of the most common <ContentHighlight>IEnumerable</ContentHighlight> types are,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Any Array</li>
            <li>String (Array of characters)</li>
            <li>List&lt;T&gt;</li>
            <li>HashSet&lt;T&gt;, Dictionary&lt;TKey, TValue&gt;, LinkedList&lt;T&gt;, etc</li>
        </ul>

        <p>
            The <ContentHighlight>IQueryable</ContentHighlight> objects are typically those found in LINQ integrations. Now, some of the most common IQueryable integrations are,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>LINQ to XML - translator that knows how to read XML documents and then allow you to apply LINQ queries to that XML</li>
            <li>Entity Framework - SQL LINQ translator that reads from a SQL database and then gives you back that data that you can now query</li>
        </ul>

        <p>
            Besides the LINQ integrations, there's LINQ to objects
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>LINQ and Strings</li>
            <li>LINQ and Reflection</li>
            <li>LINQ and File Directories</li>
            <li>LINQ to Entities</li>
            <li>LINQ to Dataset</li>
        </ul>

        <p>
            To use LINQ in your applications, all you need to do is add a using statement <ContentHighlight>using System.Linq</ContentHighlight>. What this does is this adds extension methods 
            that are part of the <ContentHighlight>Enumerable</ContentHighlight> and <ContentHighlight>Queryable</ContentHighlight> base classes so that you can apply the LINQ queries to 
            whatever you're going to do.
        </p>

        <figure>
            <img src="./image/blogs/linq/introduction/LINQ in DotNet.png" alt="LINQ in DotNet" class="[ w-full ]" />
        </figure>

        <h3 id="examples-sql-loops-and-linq" class="[ font-semibold text-lg ]">Examples SQL, Loops and LINQ</h3>

        <p>
            Let's take a quick comparison of SQL, loops, and LINQ. SQL is very similar to the LINQ query language, so we're going to take a look at SQL, looping, and LINQ all side by side. 
            Let's start out with a simple SQL WHERE clause.
        </p>

        <GithubGistSnippet Title="simple SQL WHERE clause" UserId="fingers10" FileName="fd025f8d0779675bb4cd54545a1e8d2b"></GithubGistSnippet>

        <GithubGistSnippet Title="simple SQL MIN clause" UserId="fingers10" FileName="269948c3bab0e303d58c1e7cd261b3cf"></GithubGistSnippet>

        

        <h3 id="why-use-linq" class="[ font-semibold text-lg ]">Why use LINQ?</h3>

        <p>
            So, why use LINQ? Because,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Unified approach for querying any types of object</li>
            <li>Eliminate looping code</li>
            <li>IntelliSense Support</li>
            <li>Type-checking of objects at compile time</li>
        </ul>

        <figure>
            <img src="./image/blogs/linq/introduction/Why Use LINQ in DotNet.png" alt="Why Use LINQ in DotNet" class="[ w-full ]" />
        </figure>

        <h3 id="linq-operations" class="[ font-semibold text-lg ]">LINQ Operations</h3>

        <p>
            So what are the types of operations that we can perform with LINQ? Well, we can
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Select</li>
            <li>Projection (change shape)</li>
            <li>Order (ascending / descending)</li>
            <li>Get an Element (find, first, last, single)</li>
            <li>Filter (where)</li>
            <li>Iteration / Partition (foreach, skip, take)</li>
            <li>Quantify (any, all, contains)</li>
            <li>Set Comparison (equal, except, intersection)</li>
            <li>Set Operations (union, concat)</li>
            <li>Joining (inner joins, outer joins)</li>
            <li>Grouping (groupby, subquery, groupjoin)</li>
            <li>Distinct Sets (distinct)</li>
            <li>Aggregation (count, sum, min, max, average)</li>
        </ul>

        <figure>
            <img src="./image/blogs/linq/introduction/LINQ Operations in DotNet.png" alt="LINQ Operations in DotNet" class="[ w-full ]" />
        </figure>

        

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't what is LINQ. It's a SQL-like syntax for C# used to query IEnumerable and IQueryable types. It can be used with many types of collections. It can search, 
            order, group, etc and do many other operations. In the next article we will explore each operations with a demo.
        </p>
    </ContentBody>
</Content>