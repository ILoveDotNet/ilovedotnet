@page "/blogs/using-linq-chunk-to-split-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase

<Content FileName=@nameof(LINQChunk)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Chunk</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-distinct-to-select-unique-data" Match="NavLinkMatch.All">Using LINQ Distinct to Select Specific Data in Collections</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#chunk")" Match="NavLinkMatch.All">
                    Split collections into smaller collections using Chunk
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            We can split collection into small collection of arrays using LINQ. We're going to use Chunk() method. Let's take a look at each of these methods and how they work.
        </p>

        <h3 id="chunk" class="[ font-semibold text-lg ]">Split collections into smaller collections using Chunk</h3>

        <p>
            Let's partition data into other format. We can split our (Larger) Collection into array of smaller collections using Chunk() method. This will give list of data array. What 
            <ContentHighlight>Chunk(n)</ContentHighlight> does is that it takes first n items from collection and build an array with that items and put them into first item of our final list. 
            Then it takes second n items from collection build an array and put it into second item of our final list forming collection of collections.
        </p>

        <GithubGistSnippet Title="LINQ Chunk" UserId="fingers10" FileName="6dbe02ae10ff4e6e2472784f89d309c2"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Chunk Clause Demo">
            <p>
                Let's try LINQ Chunk
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Color, Price, Size</ContentHighlight></li>
                <li>Enter the number of products you would like to list.</li>
                <li>Click on Chunk Button</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <ChunkDemo></ChunkDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to split data within collection using <ContentHighlight>Chunk</ContentHighlight>. This can be used for pagination for small in-memory collections to 
            improve user experience. All these can be used with any <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>