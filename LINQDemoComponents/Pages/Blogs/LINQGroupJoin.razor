@page "/blogs/using-linq-group-join-to-combine-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase

<Content Slug=@Slug
         FileName=@nameof(LINQGroupJoin)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>GroupJoin</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-join-to-combine-data" Match="NavLinkMatch.All">Using LINQ Join to combine data</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#group-join")" Match="NavLinkMatch.All">
                    Using LINQ Group Join to combine collections
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            When working with two collections, we can combine them using LINQ <ContentHighlight>GroupJoin()</ContentHighlight> method. This will join elements between two or more 
            collections and gives a single collection representing one-to-many relationship. <ContentHighlight>GroupJoin()</ContentHighlight> can also be done using Query Synatx using 
            the <ContentHighlight>into</ContentHighlight> keyword similar to SQL. To work with <ContentHighlight>GroupJoin()</ContentHighlight>, we need atleast one property in each 
            collection to share equal value.
        </p>

        <p>
            LINQ <ContentHighlight>GroupJoin()</ContentHighlight> is used to answer questions about collection such as
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Joining collections using common key value to define one-to-many relationship between them</li>
            <li>Grouping Menu and Sub Menu in Navigation bar in UI</li>
            <li>Grouping Items with parent in Accordion</li>
            <li>Joining Order and Order Items</li>
        </ul>

        <h3 id="group-join" class="[ font-semibold text-lg ]">Using LINQ Group Join to combine collections</h3>

        <p>
            <ContentHighlight>GroupJoin()</ContentHighlight> is a very popular thing, a very common thing that you would do in many applications where you have a <ContentHighlight>one‑to‑many</ContentHighlight> 
            relationship. We can combine elements between two or more sequences (arrays, lists, etc.) based on a key value. The result is a new sequence that contains elements 
            with the matching key element and their associated collection values. For Example, new collection of customerOrders for each customer.
        </p>

        <GithubGistSnippet Title="LINQ GroupJoin Objects with Single Field" UserId="fingers10" FileName="75be9b5adfdb7792fb319cc44bb4f46b"></GithubGistSnippet>

        <DemoSnippet Title="LINQ GroupJoin Clause with Objects Demo">
            <p>
                Let's try LINQ GroupJoin with Objects
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>We have <ContentHighlight>Sale</ContentHighlight> class with following properties - <ContentHighlight>Id, Price</ContentHighlight></li>
                <li>The tables are loaded with product and sale collection.</li>
                <li>The Key Expression here is the <ContentHighlight>Product ID</ContentHighlight>. GroupJoin() will combine Products and Sales and return new <ContentHighlight>ProductSales</ContentHighlight> collection.</li>
                <li>Click on GroupJoin Button to view the result.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <GroupJoinDemo></GroupJoinDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to combine data between collections using <ContentHighlight>GroupJoin</ContentHighlight>. This allows you to group elements from one 
            collection with elements from another collection based on a specified key representing one-to-many relationship. All these can be used with any 
            <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "using-linq-group-join-to-combine-data";
}