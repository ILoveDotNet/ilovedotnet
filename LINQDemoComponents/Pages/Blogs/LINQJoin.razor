@page "/blogs/using-linq-join-to-combine-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content 
         Description=@Description
         Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="LINQ"
         FileName=@nameof(LINQJoin)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Join</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-concat-to-combine-data" Match="NavLinkMatch.All">Using LINQ Concat to combine data</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#primitive-types")" Match="NavLinkMatch.All">
                    Using LINQ Join to combine primitive types
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#single-field")" Match="NavLinkMatch.All">
                    Using LINQ Join to combine collections using single field
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#multiple-fields")" Match="NavLinkMatch.All">
                    Using LINQ Join to combine collections using multiple fields
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            When working with two collections, we can combine them using LINQ <ContentHighlight>Join()</ContentHighlight> method. This will join elements between two or more collections 
            and gives a single collection. <ContentHighlight>Join()</ContentHighlight> also know as <ContentHighlight>Equi Join</ContentHighlight> or 
            <ContentHighlight>Inner Join</ContentHighlight> in SQL. To work with <ContentHighlight>Join()</ContentHighlight>, we need atleast one property in each collection to share 
            equal value.
        </p>

        <p>
            LINQ <ContentHighlight>Join()</ContentHighlight> is used to answer questions about collection such as
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Joining collections using common key value to define relationship between them</li>
            <li>Joining Customer and their Orders</li>
            <li>Joining Order and Order Items</li>
        </ul>

        <h3 id="primitive-types" class="[ font-semibold text-lg ]">Using LINQ Join to combine primitive types</h3>

        <p>
            Primitive data types like <ContentHighlight>int</ContentHighlight>, <ContentHighlight>decimal</ContentHighlight>, <ContentHighlight>string</ContentHighlight>, etc can just
            combine the values against other equal values in the collection
        </p>

        <GithubGistSnippet Title="LINQ Join Primitive Types" UserId="fingers10" FileName="0cb3e4cbb4b39c3a218952500d99f3cc"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Join Clause Demo">
            <p>
                Let's try LINQ Join with integer type
            </p>

            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>Enter number and add it to respective sequence</li>
                <li>For demo purpose I have restricted sequence length to 3</li>
                <li>Click on Join Button to view the result</li>
                <li>Click on reset to try other combination</li>
            </ol>

            <JoinDemo></JoinDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="single-field" class="[ font-semibold text-lg ]">Using LINQ Join to combine Collections using single field</h3>

        <p>
            We can use <ContentHighlight>Join()</ContentHighlight> to combine elements between two or more sequences (arrays, lists, etc.) based on a key value. The result is a new sequence 
            that contains elements with the matching key and their associated values.
        </p>

        <GithubGistSnippet Title="LINQ Join Objects with Single Field" UserId="fingers10" FileName="d861247e7fe5cc6ca48da17214a6c739"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Join Clause with Objects Demo">
            <p>
                Let's try LINQ Join with Objects
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>We have <ContentHighlight>Sale</ContentHighlight> class with following properties - <ContentHighlight>Id, Price</ContentHighlight></li>
                <li>The tables are loaded with product and sale collection.</li>
                <li>The Key Expression here is the <ContentHighlight>Product ID</ContentHighlight>. Join() will combine Products and Sales and return new <ContentHighlight>ProductSale</ContentHighlight> collection.</li>
                <li>Click on Join Button to view the result.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <JoinObjectSingleFieldDemo></JoinObjectSingleFieldDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="multiple-fields" class="[ font-semibold text-lg ]">Using LINQ Join to combine Collections using multiple fields</h3>

        <p>
            So for joining collections with more than one field, the key selector condition will have an <ContentHighlight>anonymous</ContentHighlight> object containing multiple fields to compare.
        </p>

        <GithubGistSnippet Title="LINQ Join Objects with Multiple Fields" UserId="fingers10" FileName="f0b8cde072441f6b6aa7e67b441088a2"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Join Clause with Objects Demo">
            <p>
                Let's try LINQ Join with Objects
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>We have <ContentHighlight>Sale</ContentHighlight> class with following properties - <ContentHighlight>Id, Price</ContentHighlight></li>
                <li>The tables are loaded with product and sale collection.</li>
                <li>The Key Expression here is the <ContentHighlight>Product ID</ContentHighlight> and <ContentHighlight>Product Color</ContentHighlight>. Join() will combine Products and Sales and return new <ContentHighlight>ProductSale</ContentHighlight> collection.</li>
                <li>Click on Join Button to view the result.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <JoinObjectMultipleFieldsDemo></JoinObjectMultipleFieldsDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to combine data between collections using <ContentHighlight>Join</ContentHighlight>. This can be used to combine items between collection 
            and return a new collection. This can be done using the key selector. We can have single key selector or multiple key selector as <ContentHighlight>anonymous</ContentHighlight> 
            object. All these can be used with any <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Description = "In this post I will teach you how to combine data between collections using LINQ in .NET. All with live working demo.";
    private string Slug = "using-linq-join-to-combine-data";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
}