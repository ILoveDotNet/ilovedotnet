@page "/blogs/using-linq-except-to-find-difference-in-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         FileName=@nameof(LINQExcept)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Except</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-sequence-equal-to-find-equality-of-data" Match="NavLinkMatch.All">Using LINQ Sequence Equal to Find Equality</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#primitive-types")" Match="NavLinkMatch.All">
                    Using LINQ Except to compare primitive types
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#objects")" Match="NavLinkMatch.All">
                    Using LINQ Except to compare objects
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#equality-comparer")" Match="NavLinkMatch.All">
                    Using LINQ Except to compare with Equality Comparer
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#except-by-primitive-types")" Match="NavLinkMatch.All">
                    Using LINQ Except By to compare objects with primitive types
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#except-by-objects")" Match="NavLinkMatch.All">
                    Using LINQ Except By to compare objects
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            When working with two collections, we can find the difference between them using LINQ <ContentHighlight>Except()</ContentHighlight> method. The idea here is to find out
            values in one which is not in other and returns the list of exceptions. With <ContentHighlight>Except()</ContentHighlight>, we can compare
            two collections for Difference.
        </p>

        <p>
            LINQ <ContentHighlight>Except()</ContentHighlight> is used to answer questions about collection such as
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Find phones that do not have sales</li>
            <li>Find customers who have not ordered specific product</li>
            <li>Compare data in tables between different environments</li>
        </ul>

        <h3 id="primitive-types" class="[ font-semibold text-lg ]">Using LINQ Except to compare primitive types</h3>

        <p>
            Primitive data types like <ContentHighlight>int</ContentHighlight>, <ContentHighlight>decimal</ContentHighlight>, <ContentHighlight>string</ContentHighlight>, etc can just
            compare the values against other value in the collection
        </p>

        <GithubGistSnippet Title="LINQ Except Primitive Types" UserId="fingers10" FileName="8b857b012416dcce3c4507e6b6e62cec"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Except Clause Demo">
            <p>
                Let's try LINQ Except with integer type
            </p>

            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>Enter number and add it to respective sequence</li>
                <li>For demo purpose I have restricted sequence length to 3</li>
                <li>Click on Except Button to view the result</li>
                <li>Click on reset to try other combination</li>
            </ol>

            <ExceptDemo></ExceptDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="objects" class="[ font-semibold text-lg ]">Using LINQ Except to compare objects</h3>

        <p>
            Except checks for reference equality of two objects for <ContentHighlight>object</ContentHighlight> data types.
        </p>

        <GithubGistSnippet Title="LINQ Except Objects" UserId="fingers10" FileName="988e1a1b7d5a1cbd41aff90e32235b1d"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Except Clause Objects Demo">
            <p>
                Let's try LINQ Except with objects
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>We have <ContentHighlight>Sale</ContentHighlight> class with following properties - <ContentHighlight>ProductId, Price</ContentHighlight></li>
                <li>The tables are loaded with product and sale collection.</li>
                <li>Click on Except Button to view the result.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <ExceptObjectDemo></ExceptObjectDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="equality-comparer" class="[ font-semibold text-lg ]">Using LINQ Except to compare with Equality Comparer</h3>

        <p>
            So, equality for primitive data types with <ContentHighlight>Except()</ContentHighlight> is easy and straight forward, but with objects by default it's going to work by
            comparing object references. But in most cases we want to make comparison based on one or more properties in the object. To do that we need to start by creating
            <ContentHighlight>EqualityComparer&lt;T&gt;</ContentHighlight> class.
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create a <ContentHighlight>ProductComparer</ContentHighlight> class that inherits from <ContentHighlight>EqualityComparer&lt;Product&gt;</ContentHighlight> class.</li>
            <li>Override <ContentHighlight>Equals(Product 1, Product 2) method.</ContentHighlight></li>
            <li>Write the conditions to check equality and return true if both matches.</li>
            <li>Also override <ContentHighlight>GetHashCode()</ContentHighlight> method and return unique value for every single object.</li>
        </ol>

        <GithubGistSnippet Title="LINQ Except Product Comparer" UserId="fingers10" FileName="6f0ec5f1ab8df9032e72b666daa372db"></GithubGistSnippet>

        <GithubGistSnippet Title="LINQ Except With Product Comparer" UserId="fingers10" FileName="8a9859514f3d4e9f3c908bdd627aa9ce"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Except Clause with Comparer Demo">
            <p>
                Let's try LINQ Except with Comparer
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>The tables are loaded with two product collection.</li>
                <li>Click on Except Button to view the result.</li>
                <li>Unlike previous demo, here we use <ContentHighlight>ProductComparer</ContentHighlight> to compare objects based on their property values. So they will be equal irrespective of reference.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <ExceptWithComparerDemo></ExceptWithComparerDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="except-by-primitive-types" class="[ font-semibold text-lg ]">Using LINQ Except By to compare objects with Primitive Types</h3>

        <p>
            Starting .NET 6, Microsoft added <ContentHighlight>ExceptBy()</ContentHighlight> which is similar to <ContentHighlight>Except</ContentHighlight> in functionality but with an 
            simplification that we don't need to use a comparer class. We can use <ContentHighlight>Key Expression</ContentHighlight> to find the difference.
        </p>

        <GithubGistSnippet Title="LINQ Except By Primitive Types" UserId="fingers10" FileName="542c7f89995b986c23c3ff9fc5e0fd7a"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Except By Clause Demo">
            <p>
                Let's try LINQ Except By with integer type
            </p>

            <ol class="[ list-decimal ] [ ml-4 ]">
                <li>Enter number and add it to sequence</li>
                <li>For demo purpose I have restricted sequence length to 3</li>
                <li>The Key Expression here is the Product ID. So whatever ID you enter in above sequence, ExceptBy() will compare and return the remaining Products from collection.</li>
                <li>For demo purpose I will be displaying only Product ID's</li>
                <li>Click on Except By Button to view the result</li>
                <li>Click on reset to try other combination</li>
            </ol>

            <ExceptByDemo></ExceptByDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="except-by-objects" class="[ font-semibold text-lg ]">Using LINQ Except By to compare objects</h3>

        <p>
            Previously, we saw a demo on how to find products that are not sold. We can also perform the same function using <ContentHighlight>ExceptBy()</ContentHighlight>. Unlike 
            <ContentHighlight>Except()</ContentHighlight>, <ContentHighlight>ExceptBy()</ContentHighlight> will return list of <ContentHighlight>Product</ContentHighlight> instead of 
            product Id's.
        </p>

        <GithubGistSnippet Title="LINQ Except By Objects" UserId="fingers10" FileName="402c5360837afa0c93b32b58806b4225"></GithubGistSnippet>

        <DemoSnippet Title="LINQ Except By Clause Demo">
            <p>
                Let's try LINQ Except By with objects
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>We have <ContentHighlight>Sale</ContentHighlight> class with following properties - <ContentHighlight>ProductId, Price</ContentHighlight></li>
                <li>The tables are loaded with product and sale collection.</li>
                <li>The Key Expression here is the Product ID. So whatever ID you enter in above sequence, ExceptBy() will compare and return the remaining Products from collection.</li>
                <li>For demo purpose I will be displaying only Product ID's</li>
                <li>Click on Except By Button to view the result.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <ExceptByObjectDemo></ExceptByObjectDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to check for difference in data between collections using <ContentHighlight>Except</ContentHighlight> and <ContentHighlight>ExceptBy</ContentHighlight>. 
            This can be used to find if item is between collection matches or not and also we can compare object item using Comparer. All these can be used with any 
            <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "using-linq-except-to-find-difference-in-data";
}