@page "/blogs/using-linq-group-by-to-group-data"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="LINQ"
         FileName=@nameof(LINQGroupBy)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>GroupBy</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/simulating-left-outer-join-using-linq" Match="NavLinkMatch.All">Simulating Left Outer Join using LINQ</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#group-by")" Match="NavLinkMatch.All">
                    Using LINQ Group By to group collections
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#group-by-ordering")" Match="NavLinkMatch.All">
                    Ordering Grouped Collections
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#group-by-filtering")" Match="NavLinkMatch.All">
                    Filtering Grouped Collections
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            When working with collection, we can group data in them using LINQ <ContentHighlight>GroupBy()</ContentHighlight> method. This will group elements in collection and gives a 
            sequence of <ContentHighlight>IGrouping&lt;key , Object&gt;</ContentHighlight> interface. Internally <ContentHighlight>GroupBy()</ContentHighlight> Groups the elements of a 
            sequence according to a specified key selector function and creates a result value from each group and its key. <ContentHighlight>GroupBy()</ContentHighlight> is similar to 
            <ContentHighlight>group by</ContentHighlight> in SQL.
        </p>

        <p>
            LINQ <ContentHighlight>GroupBy()</ContentHighlight> is used to answer questions about collection such as
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Grouping sales data by product, region, or date to get insights into sales trends and patterns.</li>
            <li>Grouping employee data by department, job title, or location to analyze the distribution of employees across the organization.</li>
            <li>Grouping inventory data by product category, supplier, or manufacturing date to track inventory levels and monitor stock turnover.</li>
            <li>Grouping log data by error type, source, or severity to track and diagnose application errors.</li>
            <li>Grouping financial data by transaction type, account, or date to monitor account activity and perform analysis on financial data.</li>
        </ul>

        <h3 id="group-by" class="[ font-semibold text-lg ]">Using LINQ Group By to group collections</h3>

        <p>
            <ContentHighlight>GroupBy()</ContentHighlight> is a very popular thing, a very common thing that you would do in many applications where organizing, summarizing, and 
            analyzing data in a more meaningful way. We can group elements in sequences (arrays, lists, etc.) based on a key value. The result is a new sequence that contains elements 
            with the matching key element and their associated collection values.
        </p>

        <GithubGistSnippet Title="LINQ GroupBy Objects with Single Field" UserId="fingers10" FileName="59c887b0f043d9ca8cc35d56255d90ef"></GithubGistSnippet>

        <DemoSnippet Title="LINQ GroupBy Clause with Objects Demo">
            <p>
                Let's try LINQ GroupBy with Objects
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>The tables is loaded with product collection.</li>
                <li>The Key Expression here is the <ContentHighlight>Product Color</ContentHighlight>. <ContentHighlight>GroupBy()</ContentHighlight> will group Products return new sequence of <ContentHighlight>IGrouping&lt;Key, Product&gt;</ContentHighlight>.</li>
                <li>Click on GroupBy Button to view the result.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <GroupByDemo></GroupByDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="group-by-ordering" class="[ font-semibold text-lg ]">Ordering Grouped Collections</h3>
        
        <p>
            We can order the collections prior to grouping using the LINQ <NavLink class="[ underline ]" href="blogs/using-linq-orderby-to-sort-data" Match="NavLinkMatch.All">OrderBy</NavLink>. 
            But if we want to order the collection after grouping we need to use <ContentHighlight>into</ContentHighlight> and <ContentHighlight>select</ContentHighlight> to make this happen in 
            Query Syntax and <ContentHighlight>select</ContentHighlight> in Method Syntax.
        </p>

        <GithubGistSnippet Title="LINQ GroupBy Objects and OrderBy with Key" UserId="fingers10" FileName="1acf9df8a6405868d6145e00c9a901bd"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="group-by-filtering" class="[ font-semibold text-lg ]">Filtering Grouped Collections</h3>
        
        <p>
            We can filter the collections after grouping using the LINQ <NavLink class="[ underline ]" href="blogs/using-linq-where-to-filter-data" Match="NavLinkMatch.All">Where</NavLink>. 
            This is similar to <ContentHighlight>Having</ContentHighlight> clause in <abbr title="Structured Query Language">SQL</abbr>.
        </p>

        <GithubGistSnippet Title="LINQ GroupBy Objects and Filtering with Where Clause" UserId="fingers10" FileName="e18568497e329755bd98e5dfd9cf71d8"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to group data in collections using <ContentHighlight>GroupBy</ContentHighlight>. This allows you to group elements in collection based on a 
            specified key resulting in <ContentHighlight>IGrouping&lt;Key, Object&gt;</ContentHighlight> collection. All these can be used with any 
            <ContentHighlight>IEnumerable</ContentHighlight> or <ContentHighlight>IQueryable</ContentHighlight> types.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "using-linq-group-by-to-group-data";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
}