@page "/blogs/using-linq-for-each-to-iterate-collections"
@using LINQDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content 
         Description=@Description
         Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="LINQ"
         FileName=@nameof(LINQForEach)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>ForEach</ContentHighlight> in <ContentHighlight>LINQ</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/using-linq-count-min-max-average-sum-to-aggregate-data" Match="NavLinkMatch.All">Using LINQ Count Min Max Average and Sum to Aggregate data</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#for-each")" Match="NavLinkMatch.All">
                    Using LINQ For Each to iterate collections
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#for-each-sub-query")" Match="NavLinkMatch.All">
                    Using Sub Query in For Each
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#for-each-custom-method")" Match="NavLinkMatch.All">
                    Using Custom Method in For Each
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            When working with collection, we can perform set operation in them using LINQ <ContentHighlight>ForEach()</ContentHighlight> method. A set operation that iterates over an entire 
            collection and allows us to set a property value within that collection. This is similar to a <abbr title="Structured Query Language">SQL</abbr> 
            <ContentHighlight>UPDATE</ContentHighlight> command.
        </p>

        <p>
            LINQ <ContentHighlight>ForEach()</ContentHighlight> is used to answer questions about collection such as
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Calculate a line total or set the total sales for a product.</li>
            <li>Printing each element to the console.</li>
            <li>Updating a property of each object in the collection.</li>
        </ul>

        <h3 id="for-each" class="[ font-semibold text-lg ]">Using LINQ For Each to iterate collections</h3>

        <p>
            Set operation can be done using ForEach with quert syntaz or method syntax. In a real-world scenario, you may want to calculate Total Stock Value of items in inventory. 
            We can use query syntax to assign values to a property within an object. This can be done using a temporary variable, like <ContentHighlight>let tmp</ContentHighlight>, 
            and then assigning the property value you want to update. For instance, <ContentHighlight CssClasses="[ break-all ]">let tmp = product.TotalStockValue = product.Price * product.Quantity</ContentHighlight> 
            sets the length of a product name.
        </p>

        <p>
            Using the method syntax, you can use the ForEach method to directly set the property value of an object in a collection. For example, <ContentHighlight CssClasses="[ break-all ]">product.TotalStockValue = product.Price * product.Quantity</ContentHighlight> 
            assigns the length of the product name to another property within the product object.
        </p>

        <GithubGistSnippet Title="LINQ ForEach" UserId="fingers10" FileName="b432000c4c9e5df9df54062ad5ba9b78"></GithubGistSnippet>

        <DemoSnippet Title="LINQ ForEach Demo">
            <p>
                Let's try LINQ ForEach with Objects
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name</ContentHighlight></li>
                <li>The tables is loaded with product collection.</li>
                <li>The Key Expression here is the <ContentHighlight>Product TotalStock</ContentHighlight>. <ContentHighlight>ForEach()</ContentHighlight> will iterate Products and set / update values.</li>
                <li>Click on ForEach Button to view the TotalStock in Product.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <ForEachDemo></ForEachDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="for-each-sub-query" class="[ font-semibold text-lg ]">Using Sub Query in For Each</h3>
        
        <p>
            we'll learn how to use a sub query to calculate the total sales for each product in our Product object. Our Product class has some typical properties like Name, Color, and Price, 
            but we also have a couple of calculated properties, including TotalStock and TotalSales. TotalSales is marked as a nullable data type so that we can have either null or the total 
            sales in there.
        </p>

        <GithubGistSnippet Title="LINQ For Each with Sub Query" UserId="fingers10" FileName="062feb76e06e0ee1d0edb7c6acdf3e88"></GithubGistSnippet>

        <DemoSnippet Title="LINQ ForEach Sub Query">
            <p>
                Let's try LINQ ForEach with Sub Query
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Price, TotalSale</ContentHighlight></li>
                <li>We have <ContentHighlight>Sale</ContentHighlight> class with following properties - <ContentHighlight>Id, ProductId, Quantity</ContentHighlight></li>
                <li>The tables are loaded with product and sale collection.</li>
                <li>The Key Expression here is the <ContentHighlight>Product TotalSale</ContentHighlight>. <ContentHighlight>ForEach()</ContentHighlight> will iterate Products and query matching sale for the product and set / update values.</li>
                <li>Click on ForEach With SubQuery Button to view the TotalSale in Product.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <ForEachSubQueryDemo></ForEachSubQueryDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="for-each-custom-method" class="[ font-semibold text-lg ]">Using Custom Method in For Each</h3>
        
        <p>
            We can use alternative method of calculating the TotalSales property in the Product object. Rather than using a subquery, we can use a method that allows us to call a 
            method inside the query. We then call the <ContentHighlight>CalculateTotalSalesForProduct</ContentHighlight> method, passing in the current product and the sales collection. 
            This method returns a <ContentHighlight>decimal</ContentHighlight> value calculated by running the same <ContentHighlight>sales.Where</ContentHighlight> query as before. 
            <strong><em>By breaking out the calculation into a separate method, we can use more complex logic if needed.</em></strong> The resulting collection is an IEnumerable of Products, 
            which we can filter using the Where method to only include those products with a TotalSales greater than 0. Finally, we convert the resulting collection to a list and return it.
        </p>

        <GithubGistSnippet Title="LINQ For Each with Custom Method" UserId="fingers10" FileName="f4afb25100bfb0189e4a0355d0f9300b"></GithubGistSnippet>

        <DemoSnippet Title="LINQ ForEach Custome Method">
            <p>
                Let's try LINQ ForEach with Custom Method
            </p>

            <ul class="[ list-disc ] [ ml-4 ]">
                <li>We have <ContentHighlight>Product</ContentHighlight> class with following properties - <ContentHighlight>Id, Name, Price, TotalSale</ContentHighlight></li>
                <li>We have <ContentHighlight>Sale</ContentHighlight> class with following properties - <ContentHighlight>Id, ProductId, Quantity</ContentHighlight></li>
                <li>The tables are loaded with product and sale collection.</li>
                <li>The Key Expression here is the <ContentHighlight>Product TotalSale</ContentHighlight>. <ContentHighlight>ForEach()</ContentHighlight> will iterate Products and query matching sale for the product and set / update values.</li>
                <li>Click on ForEach With Custom Method Button to view the Products with <ContentHighlight>TotalSale > 0</ContentHighlight>.</li>
                <li>Click on reset to try other combination</li>
            </ul>

            <ForEachCustomMethodDemo></ForEachCustomMethodDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to iterate collections using <ContentHighlight>ForEach</ContentHighlight>. This allows you to set / update values for objects inside 
            collection. We also learnt how to use sub queries inside ForEach for performing set operations. By using sub queries, we can easily calculate aggregate values for a 
            collection based on related data in another collection. Overall by using query syntax or the method syntax, you can assign values to properties within objects in a 
            collection and make updates efficiently.
        </p>
    </ContentBody>
</Content>

@code {
    private string Description = "In this post I will teach you how to iterate collections using LINQ in .NET. All with live working demo.";
    private string Slug = "using-linq-for-each-to-iterate-collections";
    private string PosterPath = "Blogs/LINQ";
    private string Channel = "linq";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("LINQ", StringComparison.CurrentCultureIgnoreCase));
}