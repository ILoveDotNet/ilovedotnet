@page "/blogs/ai-powered-language-detection-in-net-with-mlnet-and-automl"
@inherits BasePage

<Content FileName=@nameof(LanguageDetection) UseNewTableOfContentsMenu=true>
    <ContentBody>
        <What>
            <p>
                <ContentHighlight>Machine learning (ML)</ContentHighlight> enables computers to make predictions and
                automate decision-making based on data.
                In <ContentHighlight>.NET</ContentHighlight> applications, <ContentHighlight>ML.NET</ContentHighlight>
                provides an easy way to integrate machine learning models. <ContentHighlight>ML.NET</ContentHighlight>
                allows
                developers to train, build, and deploy custom <ContentHighlight>ML</ContentHighlight> models without
                requiring prior <ContentHighlight>ML</ContentHighlight> expertise. It is
                open-source, cross-platform, and works offline, making it ideal for cloud and on-premises applications.
            </p>

            <p>
                In this article, we will explore how to use <ContentHighlight>ML.NET</ContentHighlight> to build a
                language detection model. We will use
                <ContentHighlight>AutoML</ContentHighlight> to train the model and <ContentHighlight>Visual Studio's
                    Model Builder</ContentHighlight> to simplify the process. The resulting model
                can be used to detect the language of a given text, which is useful for applications that process
                multilingual content.
            </p>
        </What>

        <Why>
            <p>
                You don't need <ContentHighlight>machine learning</ContentHighlight> expertise to use <ContentHighlight>
                    Model Builder</ContentHighlight>. All you need is some data, and a problem
                to solve.
            </p>

            <p>
                Traditional programming relies on explicit rules and control flow statements like <ContentHighlight>if
                </ContentHighlight>, <ContentHighlight>else</ContentHighlight>, <ContentHighlight>switch
                </ContentHighlight>,
                <ContentHighlight>foreach</ContentHighlight>, <ContentHighlight>while</ContentHighlight>, etc., which
                makes solving complex problems—like text classification or language
                detection—challenging. <ContentHighlight>ML.NET</ContentHighlight> overcomes this by allowing
                <ContentHighlight>.NET</ContentHighlight> developers to leverage <ContentHighlight>machine learning
                </ContentHighlight>
                without deep <ContentHighlight>ML</ContentHighlight> knowledge. With <ContentHighlight>AutoML
                </ContentHighlight> and <ContentHighlight>Visual Studio's Model Builder</ContentHighlight>, even
                beginners can train and
                deploy models effortlessly. This simplifies <ContentHighlight>AI</ContentHighlight> adoption in
                <ContentHighlight>.NET</ContentHighlight> applications, enabling powerful
                data-driven solutions.
            </p>

            <figure>
                <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/mlnet-and-automl-workflow.png"
                    alt="mlnet-and-automl-workflow" />
            </figure>
        </Why>

        <How>
            <p>
                Now let's learn how to use <ContentHighlight>data classification</ContentHighlight> to detect language
                with help of <ContentHighlight>AutoML</ContentHighlight> and <ContentHighlight>ML.NET</ContentHighlight>
                in a step-by-step manner.
            </p>

            <ol>
                <li>
                    <strong>Install <ContentHighlight>Visual Studio 2022</ContentHighlight>:</strong> Download and
                    install <ContentHighlight>Visual Studio 2022 Community Edition</ContentHighlight>
                    from the official website and make sure to install the extension <ContentHighlight>ML.NET Model
                        Builder 2022</ContentHighlight>.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/install-model-builder-2022-extension.png"
                            alt="install-model-builder-2022-extension" />
                    </figure>
                </li>
                <li>
                    To proceed with tasks and classify text into different languages, we need <ContentHighlight>training
                        data</ContentHighlight>. Since our
                    client deals with <ContentHighlight>multi-locale</ContentHighlight> historically, we have a rich
                    dataset to train. We exported the data as
                    <ContentHighlight>CSV</ContentHighlight> with two columns: the first column is <ContentHighlight>
                        Language</ContentHighlight>, and the second column is <ContentHighlight>Message
                    </ContentHighlight> in that language.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/language-detection-data.png"
                            alt="language-detection-data" />
                    </figure>
                </li>
                <li>
                    To create a <ContentHighlight>Model Builder</ContentHighlight> config file, right-click the project
                    in <ContentHighlight>Solution Explorer</ContentHighlight> and select <ContentHighlight>Add > Machine
                        Learning Model</ContentHighlight>. Name the file <ContentHighlight>
                        LanguageDetectionModel.mbconfig</ContentHighlight>, then open and configure it.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/add-machine-learning-model.png"
                            alt="add-machine-learning-model" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/create-machine-learning-model.png"
                            alt="create-machine-learning-model" />
                    </figure>
                </li>
                <li>
                    To select a scenario, choose <ContentHighlight>Data Classification</ContentHighlight> and use the
                    <ContentHighlight>Local CPU</ContentHighlight> as the training environment.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/select-data-classification.png"
                            alt="select-data-classification" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/select-local-cpu.png"
                            alt="select-local-cpu" />
                    </figure>
                </li>
                <li>
                    To specify the <ContentHighlight>training data</ContentHighlight>, select <ContentHighlight>file
                    </ContentHighlight> as the data source and choose <ContentHighlight>language-messages.csv
                    </ContentHighlight>.
                    Ensure the correct column headers are set, with <ContentHighlight>Language</ContentHighlight> as the
                    <ContentHighlight>label</ContentHighlight> and <ContentHighlight>Message</ContentHighlight> as the
                    <ContentHighlight>feature</ContentHighlight>.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/select-data-file.png"
                            alt="select-data-file" />
                    </figure>

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/fix-headers-in-advanced-options.png"
                            alt="fix-headers-in-advanced-options" />
                    </figure>
                </li>
                <li>
                    To train the model, click <ContentHighlight>Start Training</ContentHighlight>, set the training
                    duration, and check the model's performance.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/start-training.png"
                            alt="start-training" />
                    </figure>

                    Now you can see the <ContentHighlight>best model getting auto selected and macro accuracy getting
                        displayed</ContentHighlight>. The
                    <ContentHighlight>closer the value to 1, the better the model</ContentHighlight>. This again depends
                    the on the quality of data you
                    provide. Meanwhile you can also have a look at <ContentHighlight>output logs</ContentHighlight> to
                    see what is happening.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/output-logs.png"
                            alt="output-logs" />
                    </figure>

                    This will also <ContentHighlight>update the csproj</ContentHighlight> file with necessary Nuget
                    packages and references.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/csproject-update.png"
                            alt="csproject-update" />
                    </figure>
                </li>
                <li>
                    To evaluate the model, enter a sample message, click <ContentHighlight>Predict</ContentHighlight> to
                    check accuracy, and adjust training if needed.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/evaluate-model.png"
                            alt="evaluate-model" />
                    </figure>

                    You can see that it has <ContentHighlight>detected the entered message as English with 25%
                    </ContentHighlight> confidence compared to
                    other languages. This again depends on the data you provide for training.
                </li>
                <li>
                    To consume the model, copy the generated <ContentHighlight>C#</ContentHighlight> code, integrate it
                    into the <ContentHighlight>Console App</ContentHighlight> or your <ContentHighlight>.NET App
                    </ContentHighlight>, and use the <ContentHighlight>Predict</ContentHighlight> method for language
                    detection.

                    <figure>
                        <img src="./image/blogs/mlnet/ai-powered-language-detection-in-net-with-mlnet-and-automl/consuming-model.png"
                            alt="consuming-model" />
                    </figure>

                    You can see that it has <ContentHighlight>detected the entered message as English with 25%
                    </ContentHighlight> confidence compared to
                    other languages. This again depends on the data you provide for training.

                    <GithubGistSnippet Title="Language Detection Using AutoML in ML.NET" UserId="fingers10"
                        FileName="e655fb2e5f9aedcb5282bb747de0292f"></GithubGistSnippet>
                </li>
            </ol>
        </How>

        <Summary>
            <p>
                In this article, we learned how to use <ContentHighlight>ML.NET</ContentHighlight> and
                <ContentHighlight>AutoML</ContentHighlight> to build a language detection model. We used
                <ContentHighlight>Visual Studio's Model Builder</ContentHighlight> to simplify the process, making it
                easy for beginners to train and deploy
                models. The resulting model can <ContentHighlight>detect the language of a given text</ContentHighlight>
                , which is useful for applications
                that process multilingual content.
            </p>
        </Summary>
    </ContentBody>
</Content>