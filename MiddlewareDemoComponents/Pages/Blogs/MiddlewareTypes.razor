@page "/blogs/types-of-middleware-in-aspnet"
@inherits BasePage

<Content FileName=@nameof(MiddlewareTypes)>
    <ContentBody>
        <p>
            In this article, let's learn about different types of <ContentHighlight>Middleware</ContentHighlight> in ASP.NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on 
            <NavLink href="blogs/introducing-middleware-in-aspnet" Match="NavLinkMatch.All">Introducing Middleware in ASP.NET</NavLink>.
        </p>

        <h3>Table of Contents</h3>
        
        <ol>
            <li>
                <NavLink href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#run-middleware")" Match="NavLinkMatch.All">
                    Run Middleware
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#use-middleware")" Match="NavLinkMatch.All">
                    Use Middleware
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#use-when-middleware")" Match="NavLinkMatch.All">
                    UseWhen Middleware
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#map-middleware")" Match="NavLinkMatch.All">
                    Map Middleware
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#map-when-middleware")" Match="NavLinkMatch.All">
                    MapWhen Middleware
                </NavLink>
            </li>
            <li>
                <NavLink href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction">Introduction</h3>

        <p>
            Middleware's are <ContentHighlight>C# classes</ContentHighlight> and logics connected by <ContentHighlight>chain of responsibility</ContentHighlight> 
            pattern to <ContentHighlight>handle and terminate request pipeline</ContentHighlight> in the order of appearance. Middleware's are configured by 
            default in <ContentHighlight>Program.cs</ContentHighlight> and the order in which they run are important. Request's are processed from 
            <ContentHighlight>top to bottom and outside to inside and back again</ContentHighlight>. These are created once in application start up.
        </p>

        <p>
            There are 5 types of middleware:
        </p>

        <ul>
            <li><ContentHighlight>Run</ContentHighlight> Middleware</li>
            <li><ContentHighlight>Use</ContentHighlight> Middleware</li>
            <li><ContentHighlight>UseWhen</ContentHighlight> Middleware</li>
            <li><ContentHighlight>Map</ContentHighlight> Middleware</li>
            <li><ContentHighlight>MapWhen</ContentHighlight> Middleware</li>
        </ul>

        <figure>
            <img src="./image/blogs/middleware/types/aspnet-core-middleware-types.png" alt="types of middleware in asp.net" class="[ w-full ]" />
        </figure>

        

        <h3 id="run-middleware">Run Middleware</h3>

        <p>
            <ContentHighlight>Run</ContentHighlight> Middleware execute the <ContentHighlight>delegate</ContentHighlight> and <ContentHighlight>terminates</ContentHighlight> 
            processing the request pipeline. Run delegates <ContentHighlight>don't receive a next parameter</ContentHighlight>. The 
            <ContentHighlight>first Run delegate</ContentHighlight> is <ContentHighlight>always terminal and terminates</ContentHighlight> the pipeline. 
            Run should <ContentHighlight>always be the last one in pipeline</ContentHighlight>.
        </p>

        <p>
            The simplest possible ASP.NET Core app sets up a single request delegate that handles all requests. This case doesn't include an actual request 
            pipeline. Instead, a single anonymous function is called in response to every HTTP request.
        </p>

        <GithubGistSnippet Title="Run Middleware" UserId="fingers10" FileName="66a05950b20165267fc97c8c07fb82e1"></GithubGistSnippet>

        

        <h3 id="use-middleware">Use Middleware</h3>

        <p>
            <ContentHighlight>Use</ContentHighlight> Middleware execute the <ContentHighlight>delegate</ContentHighlight> and <ContentHighlight>proceed to next</ContentHighlight> 
            in request pipeline. We can <ContentHighlight>chain multiple request delegates</ContentHighlight> together with Use. 
            The <ContentHighlight>next</ContentHighlight> parameter represents the <ContentHighlight>next delegate</ContentHighlight> in the pipeline. You can 
            <em>short-circuit the pipeline</em> by not calling the next parameter. You can typically 
            <ContentHighlight>perform actions both before and after the next delegate</ContentHighlight>.
        </p>

        <GithubGistSnippet Title="Use Middleware" UserId="fingers10" FileName="6d4fb67bf040067785f7c38f34ac92c1"></GithubGistSnippet>

        
        
        <p>
            When a delegate doesn't pass a request to the next delegate, it's called <ContentHighlight>short-circuiting</ContentHighlight> the request pipeline. 
            Short-circuiting is often desirable because it avoids unnecessary work. For example, <ContentHighlight>Static File Middleware</ContentHighlight> can 
            act as a terminal middleware by processing a request for a static file and short-circuiting the rest of the pipeline.
        </p>

        

        <h3 id="use-when-middleware">UseWhen Middleware</h3>

        <p>
            <ContentHighlight>UseWhen</ContentHighlight> Middleware <ContentHighlight>branches</ContentHighlight> the request pipeline based on the result of the 
            given predicate and this branch is <ContentHighlight>rejoined</ContentHighlight> to the main pipeline if it doesn't short-circuit or contain a 
            terminal middleware.
        </p>

        <GithubGistSnippet Title="UseWhen Middleware" UserId="fingers10" FileName="b07795a4d571b38839140bd52fcdf7bd"></GithubGistSnippet>

        

        <h3 id="map-middleware">Map Middleware</h3>
        
        <p>
            <ContentHighlight>Map</ContentHighlight> Middleware <ContentHighlight>conditionally execute</ContentHighlight> a method and does not return to 
            request pipeline. Map extensions are used as a convention for branching the pipeline. Map branches the request pipeline based on matches of the 
            given <ContentHighlight>request path</ContentHighlight>. If the request path starts with the given path, the branch is executed.
        </p>

        <GithubGistSnippet Title="Map Middleware" UserId="fingers10" FileName="b942378b3ba7551b3d7560c923f6dbda"></GithubGistSnippet>

        
        
        <h3 id="map-when-middleware">MapWhen Middleware</h3>
        
        <p>
            <ContentHighlight>MapWhen</ContentHighlight> <ContentHighlight>branches</ContentHighlight> the request pipeline based on the result of the given 
            predicate. Any predicate of type <ContentHighlight>Func&lt;HttpContext, bool&gt;</ContentHighlight> can be used to map requests to a new branch of 
            the pipeline. Unlike with <ContentHighlight>UseWhen</ContentHighlight>, this branch is <ContentHighlight>not rejoined</ContentHighlight> to the 
            main pipeline.
        </p>

        <GithubGistSnippet Title="MapWhen Middleware" UserId="fingers10" FileName="cf512c1eb310a6bbe33b522875713796"></GithubGistSnippet>
        
        

        <h3 id="summary">Summary</h3>

        <p>
            In this article, we learn't different types <ContentHighlight>Middleware</ContentHighlight> in ASP.NET and how it processes the request pipeline 
            and how we can use middleware to customise the HTTP request. In next article let's learn about the 
            <NavLink href="blogs/unit-testing-middlewares-in-asp-net-webapi" class="[ underline ]" Match="NavLinkMatch.All">unit testing middleware</NavLink> in ASP.NET.
        </p>
    </ContentBody>
</Content>