@page "/blogs/creational-design-pattern-builder"
@using DesignPatternDemoComponents.Builder
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(Builder)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Builder Design Pattern</ContentHighlight> in .NET.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>
        
        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#structure")" Match="NavLinkMatch.All">
                    Structure
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#use-cases")" Match="NavLinkMatch.All">
                    Use Cases
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#advantages")" Match="NavLinkMatch.All">
                    Advantages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#disadvantages")" Match="NavLinkMatch.All">
                    Disadvantages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#related-patterns")" Match="NavLinkMatch.All">
                    Related Patterns
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>
        
        <p>
            Embarking on the journey of software design often involves <ContentHighlight>constructing complex objects</ContentHighlight> with varying representations. 
            One tool in our <ContentHighlight>design toolkit</ContentHighlight> that excels at this task is the <ContentHighlight>Builder Pattern</ContentHighlight>. 
            As a creational pattern, it gracefully tackles the challenge of <ContentHighlight>creating intricate objects by separating their construction from 
            their representation</ContentHighlight>.
        </p>

        <p>
            In this exploration, we'll delve into the structure, use cases, advantages, and disadvantages of the 
            <ContentHighlight>Builder Pattern</ContentHighlight>, accompanied by real-life examples.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="structure" class="[ font-semibold text-lg ]">Structure</h3>
        
        <p>
            At the core of the <ContentHighlight>Builder Pattern</ContentHighlight> lies a structured framework that facilitates the 
            <ContentHighlight>step-by-step construction of complex objects</ContentHighlight>. The fundamental components include:
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <GithubGistSnippet Title="Code Sample - Builder Pattern" UserId="fingers10" FileName="03ddad799365260406df72253ccfd6b2"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            In the above code, <ContentHighlight>Builder Interface</ContentHighlight> is an <ContentHighlight>abstract interface</ContentHighlight> defining the 
            creation of parts for the product <ContentHighlight>object</ContentHighlight>. In our analogy, this is akin to a car builder 
            <ContentHighlight>interface</ContentHighlight>, outlining methods like <ContentHighlight>buildEngine</ContentHighlight> and 
            <ContentHighlight>buildFrame</ContentHighlight>.
        </p>

        <p>
            <ContentHighlight>Concrete Builders</ContentHighlight> is an <ContentHighlight>Implementations</ContentHighlight> of the builder 
            <ContentHighlight>interface</ContentHighlight>, such as the <ContentHighlight>BMW</ContentHighlight> and <ContentHighlight>Mini</ContentHighlight> 
            builders. These <ContentHighlight>class</ContentHighlight>'es assemble the product and keep track of its representation, providing a method to 
            retrieve the final product. 
        </p>

        <p>
            <ContentHighlight>Product</ContentHighlight> is the complex <ContentHighlight>object</ContentHighlight> under construction, represented by the 
            <ContentHighlight>car</ContentHighlight> in our example. It may include constituent parts like a frame or an engine. 
            <ContentHighlight>Director</ContentHighlight> is the entity responsible for constructing the <ContentHighlight>object</ContentHighlight> using 
            the builder <ContentHighlight>interface</ContentHighlight>. In our analogy, think of a <ContentHighlight>garage</ContentHighlight> orchestrating the 
            construction of cars.
        </p>

        <p>
            <strong>Note:</strong> The builder can be implemented using <ContentHighlight>interface</ContentHighlight> or 
            <ContentHighlight>abstract class</ContentHighlight>.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Builder Pattern Demo">
            <p>
                Let's try <ContentHighlight>Builder</ContentHighlight> Demo, Click on the Build Mini Card and Build BMW Car to see the builder pattern in action. 
                The results will be displayed next to the buttons after building the respective cars.
            </p>
            <GithubGistSnippet Title="Builder Pattern Demo" UserId="fingers10" FileName="498cf9fd77e2d478b5e2b8716379efd8"></GithubGistSnippet>
            <BuilderDemo></BuilderDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="use-cases" class="[ font-semibold text-lg ]">Use Cases</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>
                <ContentHighlight>Algorithm Independence</ContentHighlight> - When you want the algorithm for creating a complex object independent of its parts 
                and assembly process.
            </li>
            <li>
                <ContentHighlight>Diverse Representations</ContentHighlight> - When the construction process should allow for different representations of the 
                same object, like building distinct cars using the same construction process.
            </li>
            <li>
                Other Real-world applications include generating documents, constructing database queries, designing game characters, and creating user interfaces or 
                forms.
            </li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="advantages" class="[ font-semibold text-lg ]">Advantages</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>
                <ContentHighlight>Internal Representation Variability</ContentHighlight> - Enables variation in the internal representation of the product by 
                providing a new builder.
            </li>
            <li>
                <ContentHighlight>Isolation of Construction and Representation Code</ContentHighlight> - Enhances modularity by encapsulating the construction 
                and representation details, following the 
                <ContentHighlight><NavLink class="[ underline ]" href="blogs/single-responsibility-principle-in-solid">Single Responsibility Principle</NavLink></ContentHighlight>.
            </li>
            <li>
                <ContentHighlight>Fine-grained Construction Control</ContentHighlight> - Allows finer control over the construction process with step-by-step 
                creation.
            </li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="disadvantages" class="[ font-semibold text-lg ]">Disadvantages</h3>

        <p>
            While powerful, the <ContentHighlight>Builder Pattern</ContentHighlight> introduces complexity to the codebase due to the creation of multiple classes. It's crucial to balance the benefits with the increased complexity.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="related-patterns" class="[ font-semibold text-lg ]">Related Patterns</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li><ContentHighlight>Abstract Factory</ContentHighlight> pattern</li>
            <li><ContentHighlight>Composite</ContentHighlight> pattern</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In the vast landscape of software design, the <ContentHighlight>Builder Pattern</ContentHighlight> stands as a reliable guide for 
            <ContentHighlight>constructing complex objects</ContentHighlight> with elegance and flexibility. Its ability to 
            <ContentHighlight>separate construction from representation</ContentHighlight> empowers developers to navigate the intricacies of design, 
            providing a valuable tool for crafting robust and maintainable software.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p class="[ font-bold ] [ p-5 ] [ flex items-center justify-center ]">
            <a href="https://whatsapp.com/channel/0029VaAGMV2LtOj5S5MHd23h" target="_blank">
                <span>To learn more interesting things about .NET in a simple way, 👉🏼 Click here to Join I ❤️ .NET </span>
                <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icon-tabler-brand-whatsapp ] [ fill-green-500 ] [ inline ]" width="30" height="30" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                    <path d="M3 21l1.65 -3.8a9 9 0 1 1 3.4 2.9l-5.05 .9"></path>
                    <path d="M9 10a.5 .5 0 0 0 1 0v-1a.5 .5 0 0 0 -1 0v1a5 5 0 0 0 5 5h1a.5 .5 0 0 0 0 -1h-1a.5 .5 0 0 0 0 1"></path>
                </svg>
                <span>WhatsApp Channel for free to get 🔔 notified about new articles and other updates.</span>
            </a>
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Creational Design Pattern - Builder";
    private string Description = "In this post I will teach you Creational Builder Design Pattern in .NET. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2024, 1, 28, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2024, 1, 28, 22, 30, 0);
    private string Slug = "creational-design-pattern-builder";
    private string PosterPath = "Blogs/Design-Pattern";
    private string Channel = "design-pattern";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Design-Pattern", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(2) { "Creational", "Builder" };
}