@page "/blogs/behavioral-design-pattern-state"
@using DesignPatternDemoComponents.State
@inherits BasePage

<Content FileName=@nameof(State)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>State Design Pattern</ContentHighlight> in .NET.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>
        
        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#structure")" Match="NavLinkMatch.All">
                    Structure
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#use-cases")" Match="NavLinkMatch.All">
                    Use Cases
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#advantages")" Match="NavLinkMatch.All">
                    Advantages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#disadvantages")" Match="NavLinkMatch.All">
                    Disadvantages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#related-patterns")" Match="NavLinkMatch.All">
                    Related Patterns
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>
        
        <p>
            The State Pattern is a behavioral design pattern that lets an object alter its behavior when its state changes. Instead of using a large set of 
            if-else or switch statements, state-specific behavior is delegated to separate state classes.
        </p>

        <p>
            For example, consider a bank account that can be in a "regular" or "overdrawn" state. Each state has its own rulesâ€”when in an overdrawn state, 
            withdrawals may be restricted. Adding more states, like a "gold" state for high balances, can make the logic even more complex. Using the state 
            pattern helps to manage this complexity by organizing the behavior in individual classes.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="structure" class="[ font-semibold text-lg ]">Structure</h3>
        
        <p>
            The State pattern involves several key components:
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Context: The main class that maintains the current state (e.g., BankAccount).</li>
            <li>State: An abstract base class or interface that defines behaviors for different states (e.g., BankAccountState).</li>
            <li>Concrete States: Implementations of the state that handle specific state behavior (e.g., RegularState, OverdrawnState).</li>
        </ol>

        <p>
            
        </p>

        <GithubGistSnippet Title="State Pattern Code Sample" UserId="fingers10" FileName="42d600ad99e64fc65e1077063df91663"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="State Pattern Demo">
            <p>
                Let's try <ContentHighlight>State</ContentHighlight> Demo, Click on the <ContentHighlight>Deposit</ContentHighlight> 
                button and <ContentHighlight>Withdraw</ContentHighlight> button to see the state pattern in action. 
                The results will be displayed at the bottom.
            </p>
            <GithubGistSnippet Title="State Pattern Demo" UserId="fingers10" FileName="4a34a7643e0bdf2388e30d7d1f18f3ca"></GithubGistSnippet>
            <StateDemo></StateDemo>
        </DemoSnippet>

        <p>
            
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="use-cases" class="[ font-semibold text-lg ]">Use Cases</h3>

        <p>
            The State pattern is beneficial in several scenarios:
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Document editing: Different modes (insert, overwrite, select) with distinct behaviors.</li>
            <li>Vending machine: Different states like idle, selecting, dispensing, and their associated actions.</li>
            <li>Workflow management: Tasks change behavior based on whether they are "pending," "in progress," or "completed."</li>
            <li>Robotics: Operational modes like "exploration" or "charging" that affect robot behavior.</li>
        </ol>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="advantages" class="[ font-semibold text-lg ]">Advantages</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Positive: Each state-specific behavior is isolated, making it easier to manage transitions and add new states.</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="disadvantages" class="[ font-semibold text-lg ]">Disadvantages</h3>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Negative: Adding more states increases the number of classes, leading to more complexity.</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="related-patterns" class="[ font-semibold text-lg ]">Related Patterns</h3>

        <p>
            The State pattern is closely related to several other design patterns:
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Flyweight: State objects can sometimes be shared across contexts, reducing memory usage.</li>
            <li>Singleton: Often, state objects can be implemented as singletons since the state is shared.</li>
            <li>Strategy: Similar to the state pattern, but strategies don't depend on internal state changes; they are chosen externally.</li>
            <li>Bridge: Both patterns share the idea of composition to separate functionality, although they solve different problems.</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            The State Pattern allows you to manage complex state-dependent behaviors in a clean and scalable way. By encapsulating states in their own classes, 
            you reduce the complexity of conditional logic and make the code easier to extend.
        </p>
    </ContentBody>
</Content>