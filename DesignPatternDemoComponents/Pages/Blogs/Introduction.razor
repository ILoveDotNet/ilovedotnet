@page "/blogs/design-pattern-introduction"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="DesignPattern"
         FileName=@nameof(Introduction)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Design Pattern</ContentHighlight> in .NET.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>
        
        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#gang-of-four")" Match="NavLinkMatch.All">
                    Gang of Four
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-use-design-pattern")" Match="NavLinkMatch.All">
                    Why use Design Pattern?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#design-pattern-types")" Match="NavLinkMatch.All">
                    Design Pattern Types
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#object-oriented-principles")" Match="NavLinkMatch.All">
                    Object Oriented Principles
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>
        
        <p>
            <ContentHighlight>Design patterns</ContentHighlight> are a critical part of software design. They are reusable solutions to common problems encountered in software design 
            within a given context. In other words, they provide a template that you can use to solve typical issues you'll encounter during software development. The beauty of design 
            patterns is that they help create <ContentHighlight>flexible and easily maintainable</ContentHighlight> applications. They are considered best practice approaches to common 
            software development problems. However, it's important to remember that you should see these patterns as a starting point, not as a set of rules written in stone. Implementing 
            a pattern can typically be done in multiple ways, depending on the language you're using and the problem you're trying to solve.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <figure>
            <img src="./image/blogs/design-pattern/introduction/Design Pattern.png" alt="Design Pattern" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="gang-of-four" class="[ font-semibold text-lg ]">Gang of Four</h3>
        
        <p>
            One of the best-known design pattern categories is the <ContentHighlight>Gang of Four (GoF)</ContentHighlight> design patterns. This group comprises <ContentHighlight>Erich Gamma</ContentHighlight>, 
            <ContentHighlight>Richard Helm</ContentHighlight>, <ContentHighlight>Ralph Johnson</ContentHighlight>, and <ContentHighlight>John Vlissides</ContentHighlight>. In 1994, 
            they published a book called <ContentHighlight>"Design Patterns: Elements of Reusable Object-Oriented Software"</ContentHighlight>, which has become the de facto standard 
            work on software design patterns. The book consists of <ContentHighlight>23 patterns</ContentHighlight> that are still commonly used today, even though they were written 
            almost three decades ago. These patterns are still commonly used today and are often built into the framework we use.
        </p>

        <p>
            While the book was written in 1994 and uses C++ 2.0, the patterns are still relevant today. However, the implementations have been adjusted to modern-day possibilities using 
            current, real-life examples you might encounter in your day-to-day life as a developer. The three types of patterns defined by the Gang of Four will also be covered in the 
            article. Instead of memorizing the exact implementation of each pattern, it's more important to understand which problem they solve and how they relate to the type of pattern.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="why-use-design-pattern" class="[ font-semibold text-lg ]">Why Use Design Pattern?</h3>

        <p>
            Some of the problems that design patterns solve include,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>how to ensure that only a single instance of a class exists?</li>
            <li>how to make two objects with a different interface work together?</li>
            <li>how to extend an object interface without changing the underlying object?</li>
            <li>how to enable support for undo functionality? and many more</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="design-pattern-types" class="[ font-semibold text-lg ]">Design Pattern Types</h3>

        <p>
            There are three types of design patterns.
        </p>

        <dl>
            <dt><ContentHighlight>Creational patterns</ContentHighlight></dt>
            <dd>
                These patterns help with creating objects in a flexible and independent way. They make it easier to add new objects to a system without tightly coupling them to the 
                code. This means you won't need to use a lot of new statements in your code.
            </dd>
            <dt><ContentHighlight>Structural patterns</ContentHighlight></dt>
            <dd>These patterns define how objects and classes are related and connected. They help with creating larger structures in a system.</dd>
            <dt><ContentHighlight>Behavioral patterns</ContentHighlight></dt>
            <dd>They help with communication between objects and classes. These patterns can make it easier to understand how different parts of a system work together</dd>
        </dl>

        <p>
            Throughout the <NavLink class="[ underline ]" href="channels/design-pattern"><ContentHighlight>design pattern</ContentHighlight></NavLink> article series, you will also 
            learn about two important principles of object-oriented programming.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <table class="[ table-fixed border-collapse ] [ bg-white ] [ border-2 ] [ dark:bg-black dark:border-slate-500 ]">
            <thead>
                <tr class="[ bg-gray-100 ] [ dark:bg-slate-500 ]">
                    <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">Type</th>
                    <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">Patterns</th>
                </tr>
            </thead>
            <tbody>
                <tr class="[ bg-yellow-100 ] [ dark:bg-yellow-600 ]">
                    <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Creational - Create Objects</td>
                    <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Singleton, Factory Method, Abstract Factory, Builder, Prototype</td>
                </tr>
                <tr class="[ bg-green-100 ] [ dark:bg-green-600 ]">
                    <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Structural - Combine Objects</td>
                    <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Adapter, Bridge, Decorator, Composite, Facade, Proxy, Flyweight</td>
                </tr>
                <tr>
                    <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Behavioral - Control Flow</td>
                    <td class="[ border-2 ] [ dark:border-slate-700 ] [ p-2 ]">Template Method, Strategy, Command, Memento, Mediator, Chain of Responsibility, Observer, State, Iterator, Visitor, Interpreter</td>
                </tr>
            </tbody>
        </table>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="object-oriented-principles" class="[ font-semibold text-lg ]">Object Oriented Principles</h3>

        <p>
            The Gang of Four follow two important principles in their design patterns,
        </p>

        <dl>
            <dt><ContentHighlight>Program to an interface, not an implementation</ContentHighlight></dt>
            <dd>
                Programmed to an interface means clients remain unaware of the specific types of objects they use as long as the objects adhere to the interface that clients expect. This allows 
                for loose coupling.
            </dd>
            <dt><ContentHighlight>Favor object composition over class inheritance</ContentHighlight></dt>
            <dd>
                Object composition obtains new functionality by assembling objects, while class inheritance defines the implementation of one class in terms of another. The Gang of Four favored 
                object composition over class inheritance as it leads to more reusable and simpler designs.
            </dd>
        </dl>

        <p>
            Patterns that adhere to these principles often follow the <ContentHighlight>SOLID</ContentHighlight> coding principles of <ContentHighlight>open/closed</ContentHighlight> 
            and <ContentHighlight>single responsibility</ContentHighlight>. It's important to note that these patterns can be implemented in various ways, using 
            <ContentHighlight>abstract</ContentHighlight> classes or <ContentHighlight>interfaces</ContentHighlight>.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't what is <ContentHighlight>Design Pattern</ContentHighlight>. A design pattern is a helpful solution to a common problem in software design. It's 
            like a template that you can use to solve problems that you'll encounter while designing software. They help make software easy to <ContentHighlight>maintain and flexible</ContentHighlight>. 
            The <ContentHighlight>Gang of Four</ContentHighlight> patterns are a set of <ContentHighlight>23 patterns</ContentHighlight> that are commonly used today. They are grouped 
            into three categories: <ContentHighlight>Creational</ContentHighlight>, <ContentHighlight>Structural</ContentHighlight>, and <ContentHighlight>Behavioral</ContentHighlight> 
            patterns. Creational patterns help with <ContentHighlight>creating objects</ContentHighlight>, Structural patterns help with <ContentHighlight>combining objects</ContentHighlight>, 
            and Behavioral patterns help with <ContentHighlight>control flow</ContentHighlight>. Two important principles to remember are to <ContentHighlight>program to an interface</ContentHighlight> 
            and <ContentHighlight>favor object composition over class inheritance</ContentHighlight>. In the next article, we'll learn about the <ContentHighlight>Singleton</ContentHighlight> 
            pattern, which is a common and easy pattern to understand.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "design-pattern-introduction";
    private string PosterPath = "Blogs/Design-Pattern";
    private string Channel = "design-pattern";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("Design-Pattern", StringComparison.CurrentCultureIgnoreCase));
}