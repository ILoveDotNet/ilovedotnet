@page "/blogs/behavioral-design-pattern-visitor"
@using DesignPatternDemoComponents.Visitor
@inherits BasePage

<Content FileName=@nameof(Visitor) UseNewTableOfContentsMenu=true>
  <ContentBody>
    <What>
      <p>
        The <ContentHighlight>Visitor</ContentHighlight> pattern is a <ContentHighlight>behavioral</ContentHighlight> design pattern that 
        represents an operation performed on elements of an object structure. <ContentHighlight>It allows adding new operations without altering 
        the existing classes of these elements</ContentHighlight>. For example, in an Amazon order system, FreeUser pays a ₹40 shipping cost, 
        while PrimeUser has zero shipping cost. The Visitor pattern helps apply such behavior changes flexibly across different user types.
      </p>
    </What>

    <Why>
      <p>
        The Visitor pattern is used when:
      </p>

      <ul>
        <li>Object structures contain multiple classes with distinct interfaces.</li>
        <li>New operations need to be added frequently without altering the existing structure.</li>
        <li>You want to avoid violating the Single Responsibility Principle by not mixing unrelated behaviors into one class.</li>
        <li>Accumulating information or performing distinct operations across different object types is required.</li>
      </ul>

      <p>
        Benefits:
      </p>

      <ol>
        <li><strong><ContentHighlight>Open/Closed Principle:</ContentHighlight></strong> New operations can be added without modifying existing classes.</li>
        <li><strong><ContentHighlight>Single Responsibility Principle:</ContentHighlight></strong> Separates behaviors from object structures.</li>
        <li><strong><ContentHighlight>Flexibility:</ContentHighlight></strong> Allows adding new operations without altering existing classes.</li>
      </ol>

      <p>
        Example Scenario: In Amazon, shipping costs differ for FreeUsers and PrimeUsers. Instead of modifying user
        classes every time shipping logic changes, use the Visitor Pattern.
      </p>
    </Why>

    <How>
      <h4>Structure</h4>

      <p>
        The Visitor pattern consists of:
      </p>

      <ul>
        <li><strong><ContentHighlight>Element Interface</ContentHighlight></strong>: Declares an <ContentHighlight>Accept</ContentHighlight> method to accept a visitor.</li>
        <li><strong><ContentHighlight>Concrete Elements</ContentHighlight></strong>: Classes like <ContentHighlight>FreeUser</ContentHighlight> and <ContentHighlight>PrimeUser</ContentHighlight> that implement the element interface.</li>
        <li><strong><ContentHighlight>Visitor Interface</ContentHighlight></strong>: Declares methods to <ContentHighlight>visit</ContentHighlight> each concrete element.</li>
        <li><strong><ContentHighlight>Concrete Visitor</ContentHighlight></strong>: Implements visitor methods (e.g., calculates delivery cost).</li>
        <li><strong><ContentHighlight>Object Structure</ContentHighlight></strong>: Manages elements and allows visitor traversal.</li>
      </ul>

      <h4>Implementation</h4>

      <p>
        Example: Delivery Cost Calculation
      </p>

      <ul>
        <li><strong><ContentHighlight>Elements:</ContentHighlight></strong> FreeUser (₹40 cost) and PrimeUser (₹0 cost).</li>
        <li><strong><ContentHighlight>Visitor:</ContentHighlight></strong> <ContentHighlight>ShippingCostVisitor</ContentHighlight> calculates and assigns costs.</li>
        <li><strong><ContentHighlight>Object Structure:</ContentHighlight></strong> A container holds users and applies the visitor to calculate costs.</li>
      </ul>

      <p>
        Steps:
      </p>

      <ol>
        <li>Define an <ContentHighlight>IElement</ContentHighlight> interface with an <ContentHighlight>Accept</ContentHighlight> method.</li>
        <li>Create <ContentHighlight>FreeUser</ContentHighlight> and <ContentHighlight>PrimeUser</ContentHighlight> implementing <ContentHighlight>IElement</ContentHighlight>.</li>
        <li>Define an <ContentHighlight>IVisitor</ContentHighlight> interface with <ContentHighlight>VisitFreeUser</ContentHighlight> and <ContentHighlight>VisitPrimeUser</ContentHighlight>.</li>
        <li>Implement a <ContentHighlight>ShippingCostVisitor</ContentHighlight> to calculate costs.</li>
        <li>Create a container to hold users and apply the visitor.</li>
      </ol>

      <GithubGistSnippet Title="Visitor Pattern Code Sample" UserId="fingers10" FileName="9f51a40ff04f8e7f012be0ea912bd45a"></GithubGistSnippet>

      <DemoSnippet Title="Visitor Pattern Demo">
        <p>
            Let's try <ContentHighlight>Visitor</ContentHighlight> Demo, Click on the <ContentHighlight>Add Free User</ContentHighlight> 
            button and <ContentHighlight>Add Prime User</ContentHighlight> button and <ContentHighlight>Calculate Shipping Cost</ContentHighlight>
            button to see the visitor pattern in action. 
            The results will be displayed at the bottom.
        </p>
        <GithubGistSnippet Title="Visitor Pattern Demo" UserId="fingers10" FileName="86bca46217a62123ba299e89f956f2e3"></GithubGistSnippet>
        <VisitorDemo></VisitorDemo>
      </DemoSnippet>

      <h4>Simplified Interface</h4>

      <p>
        The visitor interface can have a single <ContentHighlight>Visit</ContentHighlight> method accepting a general element interface. This
        reduces the need for updates when new elements are added but requires type checking within the visitor.
      </p>
    </How>

    <Summary>
      <p>
        The Visitor pattern separates behaviors from object structures, adhering to the Open/Closed and Single
        Responsibility principles. It simplifies adding operations like shipping cost calculations (e.g., ₹40 for
        FreeUser, ₹0 for PrimeUser) but can introduce complexity when new elements are added or when accessing private
        data. Related patterns include Composite (manages object structures) and Iterator (traverses structures while
        applying logic).
      </p>
    </Summary>
  </ContentBody>
</Content>