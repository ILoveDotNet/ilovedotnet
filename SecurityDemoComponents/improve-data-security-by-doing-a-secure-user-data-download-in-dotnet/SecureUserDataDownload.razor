
@page "/blogs/improve-data-security-by-doing-a-secure-user-data-download-in-dotnet"
@inherits BasePage

<Content FileName=@nameof(SecureUserDataDownload) UseNewTableOfContentsMenu=true>
  <ContentBody>
    <What>
      <p>
          Think giving users a download link for their data is enough? <ContentHighlight>Think again.
          </ContentHighlight> GDPR compliance is a minefield, and one wrong step could mean a data breach. In this
          article, we'll show you how to lock down your .NET data export endpoints—no more sleepless nights.
      </p>
    </What>

    <Why>
      <p>
        <ContentHighlight>Exporting user data</ContentHighlight> isn't just a feature—it's a security risk waiting to
        happen. <ContentHighlight>GDPR</ContentHighlight> requires that users can access and download all their personal
        data, but it also demands that you protect that data at every step. If you store or deliver user data
        carelessly, you could be exposing sensitive information to unauthorized parties, risking legal trouble and
        reputational damage.
      </p>
      <p>
        A common misconception? That a one-time link or expiring URL is enough. In reality, <ContentHighlight>
          authentication alone is not sufficient</ContentHighlight>—you must also verify that the requesting user is the
        data owner. And don't forget: storing unencrypted zip files on disk, or leaving PII in logs, is a clear
        violation of GDPR.
      </p>
    </Why>

    <How>
      <p>
        Here's how to implement a secure, GDPR-compliant user data download in your .NET application:
      </p>

      <h4>Step 1: Require Authentication and Authorization</h4>

      <p>
        Your data export endpoint must require authentication, and you must verify that the authenticated user is
        requesting <ContentHighlight>their own data</ContentHighlight>—not someone else's. Use <ContentHighlight>
          ClaimsPrincipal</ContentHighlight> to extract the user's identity from the token or cookie.
      </p>

<CodeSnippet CssClass="language-csharp">
[Authorize]
[HttpGet("/api/users/download-data")]
public async Task&lt;IActionResult&gt; DownloadUserData()
{
    var email = User.FindFirst(ClaimTypes.Email)?.Value;
    if (string.IsNullOrEmpty(email))
        return Unauthorized();
    // ...existing code to collect and package user data...
}
</CodeSnippet>

      <h4>Step 2: Encrypt Data Before Storing</h4>

      <p>
        Never store the generated zip file unencrypted on disk or in cloud storage. Use an <ContentHighlight>
          AESEncryptor</ContentHighlight> to encrypt the zip data before saving. Store the encrypted blob in a secure
        location (like Azure Blob Storage), and only decrypt it when serving the download.
      </p>

<CodeSnippet CssClass="language-csharp">
// Encrypt the zip data before saving
var encryptedData = AesEncryptor.Encrypt(zipStream.ToArray(), EncryptionKey);
await _blobStorage.SaveAsync(userId, encryptedData.IV.ToArray());
await _blobStorage.SaveAsync(userId, encryptedData.Cipher.ToArray());
</CodeSnippet>

      <h4>Step 3: Secure the Download Endpoint</h4>

      <p>
        When the user requests their data, require authentication again (consider re-authentication for extra security).
        Decrypt the data in-memory and deliver it <ContentHighlight>only over HTTPS</ContentHighlight>. Validate that
        the download request matches the authenticated user.
      </p>

<CodeSnippet CssClass="language-csharp">
[Authorize]
[HttpGet("/api/users/download-data/{downloadId}")]
public async Task&lt;IActionResult&gt; DownloadData(string downloadId)
{
    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    var (cipherData, iv) = await _blobStorage.GetAsync(userId);
    var zipStream = AesEncryptor.Decrypt(cipherData, EncryptionKey, iv);
    // ...validate ownership and serve file...
    return File(zipStream, "application/zip", "userdata.zip");
}
</CodeSnippet>

      <h4>Step 4: Remove PII from Logs and Requests</h4>

      <p>
        Never log PII, even in request logs, headers, or error logs. Scrub all sensitive data before logging, and avoid
        storing unencrypted temp files on disk. Keep unencrypted data in memory for as short a time as possible.
      </p>

<CodeSnippet CssClass="language-csharp">
// Instead of logging raw PII:
_logger.LogInformation($"User data export for {user.Email}");
// Log anonymized info:
_logger.LogInformation($"User data export for userId: {user.Id}");
</CodeSnippet>

      <h4>Step 5: (Optional) Password-Protect the Zip</h4>

      <p>
        While GDPR does not require password-protected zip files, it's a best practice. .NET does not natively support
        encrypted zip files, so use a reputable third-party library (like <ContentHighlight>ProDotNetZip
        </ContentHighlight>) if you need this feature. Always monitor third-party libraries for vulnerabilities.
      </p>
    </How>

    <Summary>
      <p>
        <ContentHighlight>Secure data export</ContentHighlight> is more than just a download link—it's a critical part
        of GDPR compliance. Encrypt user data at rest, require strong authentication and authorization, and never expose
        PII in logs or temp files. By following these steps, you'll protect your users—and your organization—from costly
        mistakes. When in doubt, secure more, not less.
      </p>
    </Summary>
  </ContentBody>
</Content>
