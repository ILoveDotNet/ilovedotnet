@using System.Security.Cryptography
@using System.Text

<div class="[ flex flex-col ] [ space-y-4 ]">
    <div class="[ flex ]">
        <input class="[ basis-5/6 ] [ w-full ] [ px-2 py-1 ] [ border-2 border-gray-200 ] [ focus:outline-hidden focus:border-gray-400 ] [ dark:bg-black dark:border-gray-800 dark:focus:border-b-white dark:md:focus:border-blue-800 dark:caret-white dark:text-white ]" 
               type="password"
               placeholder="Enter password to hash"
               @bind-value="inputPassword"
               @bind-value:event="oninput" />
        <button class="[ basis-1/6 ] [ bg-fuchsia-500 ] [ px-4 py-2 ] [ inline-block ] [ rounded-md ] [ inline-flex ] [ space-x-1 ] [ justify-center ]" 
                disabled="@(string.IsNullOrWhiteSpace(inputPassword))"
                @onclick="GeneratePasswordHash">
            <svg xmlns="http://www.w3.org/2000/svg" class="[ icon icon-tabler icons-tabler-outline icon-tabler-key ] [ text-white ]" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M16.555 3.843l3.602 3.602a2.877 2.877 0 0 1 0 4.069l-2.643 2.643a2.877 2.877 0 0 1 -4.069 0l-.301 -.301l-6.558 6.558a2 2 0 0 1 -1.239 .578l-.175 .008h-1.172a1 1 0 0 1 -.993 -.883l-.007 -.117v-1.172a2 2 0 0 1 .467 -1.284l.119 -.13l6.558 -6.558l-.301 -.301a2.877 2.877 0 0 1 0 -4.069l2.643 -2.643a2.877 2.877 0 0 1 4.069 0z" />
                <path d="M15 9h.01" />
            </svg>
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(hashedPassword))
{
    <div class="[ mt-4 ]">
        <div><strong>Password:</strong> ••••••••••••</div>
        <div><strong>Salt:</strong> @salt</div>
        <div><strong>Hashed (PBKDF2):</strong> @hashedPassword</div>
    </div>
}

@code {
    private string hashedPassword = string.Empty;
    private string? inputPassword;
    private string salt = string.Empty;

    private void GeneratePasswordHash()
    {
        if (string.IsNullOrWhiteSpace(inputPassword))
            return;
            
        // Generate random salt
        byte[] saltBytes = new byte[16];
        RandomNumberGenerator.Fill(saltBytes);
        salt = Convert.ToBase64String(saltBytes);
        
        // Hash password using PBKDF2
        using var pbkdf2 = new Rfc2898DeriveBytes(inputPassword, saltBytes, 10000, HashAlgorithmName.SHA256);
        byte[] hashBytes = pbkdf2.GetBytes(32);
        
        hashedPassword = Convert.ToBase64String(hashBytes);
        StateHasChanged();
    }
}
