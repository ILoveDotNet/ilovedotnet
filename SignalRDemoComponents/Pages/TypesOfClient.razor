@page "/blogs/types-of-clients-in-signalr"
@inherits BasePage

<Content FileName=@nameof(TypesOfClient)>
    <ContentBody>
        <p>
            In this article, let's learn about types of <ContentHighlight>SignalR</ContentHighlight> clients.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/fundamentals-of-signalr-in-dotnet" Match="NavLinkMatch.All">Fundamentals of SignalR in .NET</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#connect-from-everywhere")" Match="NavLinkMatch.All">
                    Connect from Everywhere
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            In our previous article we learnt the <ContentHighlight>fundamentals</ContentHighlight> of SignalR. Today in this article lets dive deep into the 
            <ContentHighlight>server and client features</ContentHighlight> available in SignalR in .NET. One among them is the 
            <ContentHighlight>types of clients</ContentHighlight> available in SignalR.
        </p>

        <p>
            SignalR will use <ContentHighlight>WebSockets when it's available, and gracefully falls back on other technologies when it isn't</ContentHighlight>, 
            while your application code stays the same.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="connect-from-everywhere" class="[ font-semibold text-lg ]">Connect from Everywhere</h3>

        <p>
            SignalR isn't just for browsers. Your clients can be all sorts of applications - <ContentHighlight>desktop, web, or mobile</ContentHighlight>, and 
            they don't even have to match. Mix and match to your heart's content!
        </p>

        <p>
            Plus, <ContentHighlight>you're not limited to any specific tech stack</ContentHighlight>. Whether it's <ContentHighlight>React, Angular, WPF, 
            .NET MAUI, or Blazor</ContentHighlight>, they can all hop on the SignalR train. The only thing to watch for is having the right client libraries. 
            Luckily, there are <ContentHighlight>JavaScript, .NET, and Java</ContentHighlight> libraries available, so as long as your app's using one of those, 
            you're good to go.
        </p>

        <h4 id="steps" class="[ font-semibold text-lg ]">Steps</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Add <ContentHighlight CssClasses="[ break-all ]">Microsoft.AspNetCore.SignalR.Client</ContentHighlight> Nuget Package to Client.</li>
            <li>Create <ContentHighlight>HubConnection</ContentHighlight>.</li>
            <li>Configure <ContentHighlight>Handler</ContentHighlight> to be invoked.</li>
            <li><ContentHighlight>Start</ContentHighlight> the HubConnection.</li>
            <li>Finally close it on Component <ContentHighlight>Dispose</ContentHighlight>.</li>
        </ol>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 id="blazor-client" class="[ font-semibold text-lg ]">Blazor Client</h4>

        <GithubGistSnippet Title="Creating and Configuring Blazor Client" UserId="fingers10" FileName="787fa9ec41e10559b8fe7f9079079a9b"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 id="console-client" class="[ font-semibold text-lg ]">Console Client</h4>

        <GithubGistSnippet Title="Creating and Configuring Console Client" UserId="fingers10" FileName="f5426199e3f4924095b92e236854dbfc"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h4 id="javascript-client" class="[ font-semibold text-lg ]">Javascript Client</h4>

        <GithubGistSnippet Title="Creating and Configuring Javascript Client" UserId="fingers10" FileName="e36d1bf3064fd843692bea6db3aa48df"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learnt about different <ContentHighlight>types</ContentHighlight> of SignalR clients. We also saw how to create a 
            <ContentHighlight>blazor client</ContentHighlight>, <ContentHighlight>console client</ContentHighlight>, 
            <ContentHighlight>javascript client</ContentHighlight> and connect to the SignalR hub. In the next article, we will learn about 
            <ContentHighlight>IHubContext</ContentHighlight> and <ContentHighlight>Caller</ContentHighlight> in SignalR.
        </p>
    </ContentBody>
</Content>