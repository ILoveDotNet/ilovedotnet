@page "/blogs/design-and-deployment-and-scaling-in-signalr"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(DesignAndDeploymentAndScaling)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>Design</ContentHighlight> and <ContentHighlight>Deployment</ContentHighlight> 
            and <ContentHighlight>Scaling</ContentHighlight> Considerations in <ContentHighlight>SignalR</ContentHighlight>.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/streaming-and-authentication-and-authorization-in-signalr" Match="NavLinkMatch.All">Streaming and Authentication and Authorization in SignalR</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#design-consideration")" Match="NavLinkMatch.All">
                    Design Considerations
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#deployment")" Match="NavLinkMatch.All">
                    Deployment
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#scaling")" Match="NavLinkMatch.All">
                    Scaling
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            In our previous article we about <ContentHighlight>Streaming</ContentHighlight> and <ContentHighlight>Authentication</ContentHighlight> and 
            <ContentHighlight>Authorization</ContentHighlight> and how to configure them. Today in this article, lets learn about design, deployment and 
            scaling Considerations in SignalR.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="design-considerations" class="[ font-semibold text-lg ]">Design Considerations</h3>

        <p>
            SignalR can be a game-changer if you can use it, but it's best not to rely on it for your app's main functions if you can help it. 
            <ContentHighlight>Connecting to the hub isn't as dependable or secure as traditional request-response setups</ContentHighlight>. That's why I suggest 
            <ContentHighlight>teaming</ContentHighlight> up SignalR with a tried-and-true <ContentHighlight>API</ContentHighlight>, like 
            <ContentHighlight>REST</ContentHighlight> or <ContentHighlight>gRPC</ContentHighlight>, for your <ContentHighlight>heavy lifting</ContentHighlight>. 
            Let the <ContentHighlight>hub handle notifications</ContentHighlight> and keep the critical stuff, like data handling, to the reliable APIs.
        </p>

        <p>
            Imagine what happens <ContentHighlight>if the SignalR connection suddenly drops</ContentHighlight>. It's more common than you might realize. One 
            way to handle this is by telling the client to <ContentHighlight>reconnect automatically</ContentHighlight>. By doing this, it'll keep trying to 
            connect, with longer intervals between attempts. But remember, <ContentHighlight>each reconnection means a new connection ID</ContentHighlight>, so 
            it won't be part of any groups anymore.
        </p>

        <p>
            Also, the connection object has two handy <ContentHighlight>events</ContentHighlight>: <ContentHighlight>onreconnecting</ContentHighlight>, which 
            tells you why the disconnect happened, and <ContentHighlight>onreconnected</ContentHighlight>, which gives you the new connection ID. With these 
            events, you can keep the user informed or adjust the app's state as needed.
        </p>

        <GithubGistSnippet Title="SignalR Automatic Reconnect" UserId="fingers10" FileName="5f6f1b982119bec653fa4d2ff174c143"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <p>
            Here's a cool feature introduced in ASP.NET Core 8 called <ContentHighlight>Stateful Reconnect</ContentHighlight>. When it's turned on and the 
            connection takes a dive, any messages that were supposed to go between server and client get stored in a <ContentHighlight>buffer</ContentHighlight>, 
            just hanging out in memory. And get this. There can be buffers on both sides, client and server. Once the connection gets back on its feet, those 
            buffered messages get delivered. Better late than never, huh? Just so you know, there's a limit to how big the buffer can get on each side it's set 
            to <ContentHighlight>100 KB</ContentHighlight> by default.
        </p>

        <GithubGistSnippet Title="SignalR Stateful Reconnect" UserId="fingers10" FileName="251389e6a2221fc48d93b849d4243c64"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="deployment" class="[ font-semibold text-lg ]">Deployment</h3>

        <p>
            Once your app is out there, whether it's chilling in the cloud or hanging out on local servers, 
            <ContentHighlight>double-check that WebSockets are switched on</ContentHighlight>. Sometimes, they're turned off by default, so keep an eye out for 
            that.
        </p>

        <p>
            Also, <ContentHighlight>watch out for connection limits</ContentHighlight>. There's usually a cap on how many <ContentHighlight>WebSocket</ContentHighlight> 
            connections can happen simultaneously. And if you're using other methods besides WebSockets, there might be limits on HTTP requests too.
        </p>

        <p>
            Oh, and don't forget about <ContentHighlight>sticky sessions</ContentHighlight>. You'll want those turned on when you're scaling out your app, 
            meaning you've got it running on multiple servers to handle lots of requests at once. Keep those sessions sticky for a smooth ride!
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="scaling" class="[ font-semibold text-lg ]">Scaling</h3>

        <p>
            When your app is up and running in the cloud, making it handle <ContentHighlight>more traffic</ContentHighlight> is usually as easy as adjusting a 
            slider to add more instances. There's this thing called a <ContentHighlight>load balancer</ContentHighlight> that helps out by picking a server for 
            each new request that comes in. It might choose servers one after the other, or use some other smart way to decide.
        </p>

        <p>
            If you're just using <ContentHighlight>WebSocket</ContentHighlight>, you're all good. Once that connection is set up, it's like there's a 
            <ContentHighlight>direct tunnel</ContentHighlight> between one server and the browser, so no worries there.
        </p>

        <p>
            But if you're using other methods to send messages, things get <ContentHighlight>tricky without sticky sessions</ContentHighlight>. See, each message 
            is treated like a separate request. So, every time a message is sent, it might land on a different server. And that server might not have a clue about 
            what messages were sent earlier or what's going on.
        </p>

        <p>
            <ContentHighlight>Sticky sessions come to the rescue!</ContentHighlight> There are a bunch of ways to make this work, but here's the gist: When the 
            first request is sent, the <ContentHighlight>load balancer tags the browser with a cookie</ContentHighlight>, showing which server it used. Then, 
            for future requests, the load balancer checks that cookie and sends them to the same server as before.
        </p>

        <p>
            <strong>Note:</strong> Azure SignalR Service is a fully managed service that makes it easy to use SignalR in your apps. It handles the scaling for you,
            so you don't have to worry about it. You can use it with Azure Functions, Azure Logic Apps, and more.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learnt about <ContentHighlight>Design</ContentHighlight> and <ContentHighlight>Deployment</ContentHighlight> 
            and <ContentHighlight>Scaling</ContentHighlight> Considerations in SignalR. We touched <ContentHighlight>WebSockets</ContentHighlight>, 
            <ContentHighlight>sticky session</ContentHighlight>, etc. With this knowledge, we are now ready to build 
            <ContentHighlight>real-time applications</ContentHighlight> with SignalR.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "design-and-deployment-and-scaling-in-signalr";
    private string PosterPath = "Blogs/SignalR";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("SignalR", StringComparison.CurrentCultureIgnoreCase));
}
