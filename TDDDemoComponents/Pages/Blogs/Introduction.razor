@page "/blogs/introducing-tdd-in-csharp-dotnet"
@inherits BasePage

<Content FileName=@nameof(Introduction)>
    <ContentBody>
        <p>
            In this article, let's learn about <ContentHighlight>(<abbr title="Test Driven Development">TDD</abbr>) Test Driven Development</ContentHighlight> 
            using C# .NET.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what-is-test-driven-development")" Match="NavLinkMatch.All">
                    What is Test Driven Development?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#basics-of-test-driven-development")" Match="NavLinkMatch.All">
                    Basics of Test-Driven Development
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#advantages")" Match="NavLinkMatch.All">
                    Advantages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#disadvantages")" Match="NavLinkMatch.All">
                    Disadvantages
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="what-is-test-driven-development" class="[ font-semibold text-lg ]">What is Test Driven Development?</h3>

        <p>
            <ContentHighlight>TDD</ContentHighlight> is a very powerful approach to build robust software. Before we develop the feature, we will write a 
            <ContentHighlight>unit test</ContentHighlight> for the feature which means the unit test will drive our feature development.
        </p>

        <h3 id="basics-of-test-driven-development" class="[ font-semibold text-lg ]">Basics of Test-Driven Development</h3>

        <p>
            Let's see what is test-driven Development and explain to you the project scenario.
        </p>

        <p>
            Test-Driven Development, or TDD for short, is a <ContentHighlight>method used to write tests before we start our implementation</ContentHighlight>. 
            <ContentHighlight>Before you start, you might list the requirements</ContentHighlight> that need to be fulfilled in your application.
        </p>

        <figure>
            <img src="./image/blogs/tdd/introduction/requirements.jpg" alt="Requirements" class="[ w-full ]" />
        </figure>

        

        <p>
            Then you take the <ContentHighlight>first requirement</ContentHighlight> and write a <ContentHighlight>failing test</ContentHighlight>. The test fails 
            and it is <ContentHighlight>RED</ContentHighlight> as you haven't developed it yet. But the test describes already what your code should do to fulfill 
            the requirement. Now you need to make the test <ContentHighlight>GREEN</ContentHighlight> by writing the <ContentHighlight>necessary code</ContentHighlight> 
            to make the <ContentHighlight>test pass</ContentHighlight>. After you write the code to make the <ContentHighlight>test green</ContentHighlight> you 
            need to <ContentHighlight>REFACTOR</ContentHighlight> the code. Maybe you can <ContentHighlight>simplify the code</ContentHighlight> or extract 
            few code lines into a method to make code more readable and maintainable. After you are done with the first requirement, you can continue with the next 
            requirement. This means you iterate the entire cycle <ContentHighlight>(Red -> Green -> Refactor)</ContentHighlight> for another requirement and so on. 
            So the <ContentHighlight>tests are driving your development</ContentHighlight>. This is the heart of TDD and known as 
            <ContentHighlight>TDD cycle</ContentHighlight>.
        </p>

        <p>
            <strong>TDD means writing tests to implement a requirement and continuously iterate through RED GREEN and REFACTOR cycles.</strong>
        </p>

         <figure>
            <img src="./image/blogs/tdd/introduction/red green refactor.jpg" alt="Red Green Refactor" class="[ w-full ]" />
         </figure>

        

         <h3 id="advantages" class="[ font-semibold text-lg ]">Advantages</h3>

         <figure>
            <img src="./image/blogs/tdd/introduction/advantages.jpg" alt="Advantages" class="[ w-full ]" />
         </figure>

         

         <ol class="[ list-decimal ] [ ml-4 ]">
             <li>
                 TDD makes you <ContentHighlight>think with the needed API from the beginning</ContentHighlight>. You need to think about what classes, properties, 
                 API's are needed. This will usually lead to great API design.
             </li>
             <li>
                 After you know the class and properties, another big advantage is that you need to <ContentHighlight>think about what the code should do than 
                 how it should do</ContentHighlight>. As you start with test you don't need to have any idea about implementation. You just need to write a test 
                 for what the code should do. After writing the test you can think of requirements and their development.
             </li>
             <li>
                 While thinking of your requirements, <ContentHighlight>you get quick feedback about your requirements by running the test</ContentHighlight>. The 
                 fact that you get quick feedback means you even don't need a fully working application at all. You just need a class library to build your business 
                 logic and don't need the entire project.
             </li>
             <li>
                 This helps you <ContentHighlight>create modular code</ContentHighlight>. You can <ContentHighlight>decouple the dependencies from the 
                 beginning</ContentHighlight> and TDD makes you do that from the beginning. This decoupling of dependency makes you write a modular code by 
                 isolating the dependencies like a database that is not ready yet and the web API isn't ready when beginning the development.
             </li>
             <li>
                 This leads to a <ContentHighlight>maintainable codebase</ContentHighlight>, as you will have <ContentHighlight>one test per requirement</ContentHighlight>. 
                 You can write code to add new functionality and run all the unit tests to ensure that the <ContentHighlight>existing code doesn't break</ContentHighlight>. 
                 You can be confident about your new code as well as the existing code.
             </li>
             <li>
                 These tests will serve as <ContentHighlight>good documentation</ContentHighlight>. For example, the test for the code written by others will help 
                 you understand why the code has been written.
             </li>
         </ol>

         <h3 id="disadvantages" class="[ font-semibold text-lg ]">Disadvantages</h3>

         <p>
             The only disadvantage is that <ContentHighlight>TDD is not so easy to start by writing tests for beginners</ContentHighlight>. In fact, TDD is an 
             <ContentHighlight>mindset shift</ContentHighlight> and art that every developer should master.
         </p>

         

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we got introduced to TDD and learnt about <ContentHighlight>Red, Green and Refactor</ContentHighlight> phases of TDD along with its 
            advantages and disadvantages. In next article lets learn about how to implement TDD using C# .NET in detail.
        </p>
    </ContentBody>
</Content>