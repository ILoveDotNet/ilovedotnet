#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

echo "Selecting modified .cs files"
FILES=$(git diff --cached --name-only --diff-filter=ACM "*.cs" | sed 's| |\\ |g')
# - `git diff --cached --name-only`: Lists the staged files.
# - `--diff-filter=ACM`: Filters only Added (A), Copied (C), or Modified (M) files.
# - `"*.cs"`: Restricts the list to C# files.
# - `sed 's| |\\ |g'`: Escapes spaces in file paths for proper handling.

if [ -n "$FILES" ]; then

  # Run dotnet format
  LC_ALL=C
  # Set locale to "C" to ensure consistent behavior for text processing, sorting, etc.

  # Initialize flag to check if any file was formatted
  formatted_files=0

  # Format all selected files
  # Loop through each file and run dotnet format
  # Build the --include arguments for dotnet format
  echo "Files to be formatted:"
  INCLUDE_ARGS=""
  for FILE in $FILES; do
    INCLUDE_ARGS="$INCLUDE_ARGS --include $FILE"
  done

  # Run dotnet format on all files at once
  dotnet format --no-restore --verbosity normal $INCLUDE_ARGS || {
    echo "dotnet format failed. Aborting commit." >&2
    exit 1
  }

  # Check if any files were modified by dotnet format
  # Stage the formatted files only if they are modified
  for FILE in $FILES; do
    git diff --exit-code "$FILE" > /dev/null || {
      git add "$FILE"  # Stage the formatted file
      formatted_files=1  # Set the flag to indicate that a file was formatted
    }
  done

  # Exit commit if any file was formatted
  if [ $formatted_files -eq 1 ]; then
    echo "One or more files were formatted. Please review the changes and commit again."
    exit 1
  else
    echo "No files were formatted."
  fi

  echo "Checking and installing dotnet report generator"
  dotnet tool install --global dotnet-reportgenerator-globaltool

  echo "Cleaning up previous test results inside *Tests directories..."
  find . -type d -name "*Tests" -exec rm -rf {}/TestResults \;

  echo "Running tests and collecting code coverage..."
  dotnet test . --no-build --settings ./UITests/ilovedotnet.runsettings --collect:"XPlat Code Coverage"

  echo "Generating aggregated code coverage report..."
  reportgenerator -reports:"./**/TestResults/**/coverage.cobertura.xml" -targetdir:"test_coverage_report" -reporttypes:XmlSummary || {
      echo "Error: Failed to generate code coverage report. Commit aborted."
      exit 1
  }

  # Define the summary file path
  SUMMARY_FILE="test_coverage_report/Summary.xml"

  # Check if the summary file exists
  if [ ! -f "$SUMMARY_FILE" ]; then
      echo "Error: Coverage summary file not found. Commit aborted."
      exit 1
  fi

  # Extract the Linecoverage percentage
  COVERAGE=$(xmllint --xpath "string(//Summary/Linecoverage)" "$SUMMARY_FILE")

  if [ -z "$COVERAGE" ]; then
      echo "Error: Failed to retrieve code coverage from summary. Commit aborted."
      exit 1
  fi

  # Set the required coverage threshold
  THRESHOLD=70.0

  # Round off coverage to one decimal place
  COVERAGE_PERCENTAGE=$(printf "%.1f" "$COVERAGE")

  echo "Aggregated Code Coverage: ${COVERAGE_PERCENTAGE}%"

  # Check if the aggregated coverage meets the threshold
  if (( $(echo "$COVERAGE_PERCENTAGE < $THRESHOLD" | bc -l) )); then
      echo "Code coverage (${COVERAGE_PERCENTAGE}%) is below the required threshold (${THRESHOLD}%). Commit aborted."
      exit 1
  fi

  echo "Code coverage ${COVERAGE_PERCENTAGE}% is sufficient. Proceeding with commit."
else
  echo "No staged .cs files found. Skipping tests and code coverage."
fi

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
