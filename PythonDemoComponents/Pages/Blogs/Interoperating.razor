@page "/blogs/python-dynamic-interop-with-dotnet"
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Slug=@Slug
         PosterPath=@PosterPath
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(Interoperating)>
    <ContentBody>
        <p>
            In this article, let's learn about how to use <ContentHighlight>Python</ContentHighlight> in .NET.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#tldr")" Match="NavLinkMatch.All">
                    TLDR
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-dynamic-interop")" Match="NavLinkMatch.All">
                    Why Dynamic Interop?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#getting-started")" Match="NavLinkMatch.All">
                    Getting Started
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#getting-script-input-from-user")" Match="NavLinkMatch.All">
                    Getting Script Input from User
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#scripting-risks")" Match="NavLinkMatch.All">
                    Scripting Risks
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#executing-python-statements")" Match="NavLinkMatch.All">
                    Executing Python Statements
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#interacting-with-python-objects")" Match="NavLinkMatch.All">
                    Interacting with Python Objects
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#interacting-with-external-python-file")" Match="NavLinkMatch.All">
                    Passing Custom Dynamic Objects to Python
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            One of the benefits of the dynamic language runtime is the ability for our C# code to interoperate with other languages built on top of it such as <ContentHighlight>IronPython</ContentHighlight>. 
            Whilst making use of something like IronPython is not an everyday occurrence for .NET developers. We're going to start off by looking at some of the reasons why we might want to consider 
            dynamic language interop. We'll then jump into Visual Studio, and we'll see how we can get started with IronPython in our C# code. We'll then see how we can allow the end user to add scripting 
            content that gets executed in our application. We'll also learn how we can execute Python statements in our C# application and get access to the result value of the statement. We'll learn that 
            we can create Python objects and then access them dynamically from our C# code.
        </p>

        <h3 id="tldr" class="[ font-semibold text-lg ]">TLDR</h3>

        <figure>
            <img src="./image/blogs/python/interoperating/Python Interoperation in DotNet.png" alt="Python Interoperation in .NET" class="[ w-full ]" />
        </figure>

        <h3 id="why-dynamic-interop" class="[ font-semibold text-lg ]">Why Dynamic Interop?</h3>

        <p>
            Few reason why we might want to consider using dynamic interop is,
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>Language features not existing in C#. For example, chained comparison operators “1 &lt; age &lt; 50”.</li>
            <li>Existing libraries and scripts don’t have .NET equivalents. For example, running python algorithm in C#.</li>
            <li>Add user scripts to application. For example, user entering business rules as python expressions.</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="getting-started" class="[ font-semibold text-lg ]">Getting Started</h3>

        <p>
            Let's start off by seeing how we can execute simple Python expressions in C# code.
        </p>

        <h4 class="[ font-semibold text-base ]">Steps</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Install <ContentHighlight>IronPython</ContentHighlight> Nuget Package.</li>
            <li>Add necessary <ContentHighlight>using</ContentHighlight> statements.</li>
            <li>Create Python <ContentHighlight>ScriptEngine</ContentHighlight>.</li>
            <li>Execute Python expression from the Python <ContentHighlight>ScriptEngine</ContentHighlight>.</li>
            <li>Get the result as dynamic result or a generic result from the Python Engine.</li>
        </ol>

        <p>
            The following code sample shows how to execute simple python expressions in dotnet.
        </p>

        <GithubGistSnippet Title="Python Interoperating - Simple Expression" UserId="fingers10" FileName="ab77860f8b669ac1825b4f8c3cc5309c"></GithubGistSnippet>

        <figure>
            <img src="./image/blogs/python/interoperating/Simple Expression.png" alt="Simple Expression.png" class="[ w-full ]" />
        </figure>

        <h3 id="getting-script-input-from-user" class="[ font-semibold text-lg ]">Getting Script Input from User</h3>

        <p>
            We'll start off here by allowing the user to enter a Python expression that gets evaluated against a employee's age. The age will be stored in our C# code, but the expression will 
            be entered at runtime by the user. So what we'll do here is add a variable to hold the employee's age. We're hard coding this age to keep the demo simple, but you can imagine this 
            coming from a database or API
        </p>

        <GithubGistSnippet Title="Python Interoperating - Getting Input from User" UserId="fingers10" FileName="0160f2277476b0f4349f3b9f2e979055"></GithubGistSnippet>

        <h4 class="[ font-semibold text-base ]">Steps</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create Python <ContentHighlight>ScriptEngine</ContentHighlight>.</li>
            <li>Get the expression from user.</li>
            <li>Create a scope using <ContentHighlight>ScriptEngine</ContentHighlight> instance.</li>
            <li>Assign the Python variable token a to the <ContentHighlight>ScriptEngine</ContentHighlight> instance using <ContentHighlight>SetVariable()</ContentHighlight>.</li>
            <li>Create a <ContentHighlight>ScriptSource</ContentHighlight> instance from engine using Create<ContentHighlight>ScriptSourceFromString()</ContentHighlight> and pass expression received from user and expression type as <ContentHighlight>SourceCodeKind.Expression</ContentHighlight>.</li>
            <li>Now execute the scope using script source.</li>
        </ol>

        <figure>
            <img src="./image/blogs/python/interoperating/Simple Expression Getting Input from User True.png" alt="Simple Expression Getting Input from User True.png" class="[ w-full ]" />
        </figure>

        <figure>
            <img src="./image/blogs/python/interoperating/Simple Expression Getting Input from User False.png" alt="Simple Expression Getting Input from User False.png" class="[ w-full ]" />
        </figure>

        <h3 id="scripting-risks" class="[ font-semibold text-lg ]">Scripting Risks</h3>

        <p>
            One thing to bear in mind here is that allowing users to enter and execute arbitrary script or code may introduce security, data corruption, and other risks into the project. 
            You should carefully consider these risks and put in measures to prevent them before adding this feature to your application. Next, we'll just ask the user to enter an expression 
            and tell them to use the token a to represent the employee age. Now, rather than hard coding this expression, we're going to read it from the user. For demo purposes, we're not 
            going to be adding validation to this input, but in a production app, you would want to do that. So, the token, a, is going to represent a Python variable.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="executing-python-statements" class="[ font-semibold text-lg ]">Executing Python Statements</h3>

        <p>
            In addition to evaluating Python expressions, we can also execute Python statements and optionally access any variables that were set. Let's modify the code now to allow the user 
            to enter a Python statement at runtime that gets passed to the Python engine and executed.
        </p>

        <GithubGistSnippet Title="Python Interoperating - Single Statement" UserId="fingers10" FileName="212f1dae4a2ae0458c6c617320aef843"></GithubGistSnippet>

        <h4 class="[ font-semibold text-base ]">Steps</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create Python <ContentHighlight>ScriptEngine</ContentHighlight>.</li>
            <li>Get the statement from user.</li>
            <li>Create a scope using <ContentHighlight>ScriptEngine</ContentHighlight> instance.</li>
            <li>Assign the Python variable token a to the <ContentHighlight>ScriptEngine</ContentHighlight> instance using <ContentHighlight>SetVariable()</ContentHighlight>.</li>
            <li>Create a <ContentHighlight>ScriptSource</ContentHighlight> instance from engine using Create<ContentHighlight>ScriptSourceFromString()</ContentHighlight> and pass statement received from user and expression type as <ContentHighlight>SourceCodeKind.SingleStatement</ContentHighlight>.</li>
            <li>Now execute the scope using script source.</li>
            <li>Call the scope's <ContentHighlight>GetVariable()</ContentHighlight> method to get result.</li>
        </ol>

        <p>
            So now that we're executing a statement, we're not getting the result back like we would when we evaluate an expression. so we are calling scope's <ContentHighlight>GetVariable()</ContentHighlight> method. Essentially 
            here, we're saying have a look in the Python statement entered by the user, and look for a Python variable called result. This, of course, assumes that the user will set a result 
            variable in their Python code.
        </p>

        <figure>
            <img src="./image/blogs/python/interoperating/Single Statement Console Output.png" alt="Single Statement Console Output" class="[ w-full ]" />
        </figure>

        <figure>
            <img src="./image/blogs/python/interoperating/Single Statement With Chained Operators Console Output.png" alt="Single Statement With Chained Operators Console Output" class="[ w-full ]" />
        </figure>

        <h3 id="interacting-with-python-objects" class="[ font-semibold text-lg ]">Interacting with Python Objects</h3>

        <p>
            Let's see next at how we can interoperate with objects created in Python from our C# code.
        </p>

        <GithubGistSnippet Title="Python Interoperating - Interacting with Python Objects" UserId="fingers10" FileName="2eb831e445d2a5ee06b4bdb95a46f1ed"></GithubGistSnippet>

        <h4 class="[ font-semibold text-base ]">Steps</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create Python <ContentHighlight>ScriptEngine</ContentHighlight>.</li>
            <li>Create Python Statement.</li>
            <li>Create a scope using <ContentHighlight>ScriptEngine</ContentHighlight> instance.</li>
            <li>Create a <ContentHighlight>ScriptSource</ContentHighlight> instance from engine using Create<ContentHighlight>ScriptSourceFromString()</ContentHighlight> and pass statement received from user and expression type as <ContentHighlight>SourceCodeKind.SingleStatement</ContentHighlight>.</li>
            <li>Now execute the scope using script source.</li>
            <li>Call the scope's <ContentHighlight>GetVariable()</ContentHighlight> method to get result.</li>
        </ol>

        <figure>
            <img src="./image/blogs/python/interoperating/Interacting with Python Object.png" alt="Interacting with Python Object.png" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="interacting-with-external-python-file" class="[ font-semibold text-lg ]">Passing Custom Dynamic Objects to Python</h3>

        <p>
            Let's see next at how we can load Python code from an external file.
        </p>

        <GithubGistSnippet Title="Python Interoperating - Interacting with External Python File" UserId="fingers10" FileName="5f12f49915d8376aba14875da8526083"></GithubGistSnippet>

        <h4 class="[ font-semibold text-base ]">Steps</h4>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Create Python <ContentHighlight>ScriptEngine</ContentHighlight>.</li>
            <li>Create <ContentHighlight>C# dynamic</ContentHighlight> element.</li>
            <li>Create a scope using <ContentHighlight>ScriptEngine</ContentHighlight> instance.</li>
            <li>Create a Python file and add it to project root and go to properties and select <ContentHighlight>CopyIfNewer</ContentHighlight> on <ContentHighlight>BuildAction</ContentHighlight></li>
            <li>Assign the c# dynamic element to the <ContentHighlight>ScriptEngine</ContentHighlight> instance using <ContentHighlight>SetVariable()</ContentHighlight>.</li>
            <li>Create a <ContentHighlight>ScriptSource</ContentHighlight> instance from engine using Create<ContentHighlight>ScriptSourceFromFile()</ContentHighlight> and pass python file name as parameter.</li>
            <li>Now execute the scope using script source.</li>
        </ol>

        <figure>
            <img src="./image/blogs/python/interoperating/Passing Object to External File.png" alt="Passing Object to External File.png" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learned some of the reasons why we might want to consider using <ContentHighlight>dynamic interop</ContentHighlight> such as the ability to take advantage of 
            language features not present in C# or to reuse existing Python code or libraries in our C# code. Next, we saw how we can get started with <ContentHighlight>IronPython</ContentHighlight>, 
            and the first thing we went and did is installed the IronPython NuGet package. We saw how we can use the static <ContentHighlight>CreateEngine</ContentHighlight> method of the Python class 
            to create an engine in which we can execute Python code. And we learned about a couple of the different types of source code that we can execute, the SourceCodeKind of Expression and the 
            SourceCodeKind of SingleStatements. We learned how we can create an object in Python such as a Python tuple and then access this from our C# code and how we can execute some Python stored 
            in a separate file by using the Create<ContentHighlight>ScriptSource</ContentHighlight>FromFile method. We learned that we can pass an instance of our custom dynamic object into the Python 
            engine and how this object can be manipulated in the Python script and thus access the resulting state in our C# code.
        </p>
    </ContentBody>
</Content>

@code {
    private string Slug = "python-dynamic-interop-with-dotnet";
    private string PosterPath = "Blogs/Python";
    private string Channel = "python";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Channel.Equals("Python", StringComparison.CurrentCultureIgnoreCase));
}