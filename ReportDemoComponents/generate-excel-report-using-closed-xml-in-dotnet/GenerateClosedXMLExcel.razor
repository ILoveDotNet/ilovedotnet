@page "/blogs/generate-excel-report-using-closed-xml-in-dotnet"
@using ReportDemoComponents
@inherits BasePage

<Content FileName=@nameof(GenerateClosedXMLExcel) UseNewTableOfContentsMenu=true>
    <ContentBody>
        <What>
            <p>
                Reports are essential for tracking key performance indicators, analyzing data, and making informed decisions. Common formats include 
                PDF, Word, PowerPoint, and Excel. Excel is widely preferred due to its availability, ease of use, data visualization options, and 
                powerful data manipulation capabilities.
            </p>

            <p>
                @(DateTime.Now.Year - 2016) years ago, Years ago, Crystal Reports was commonly used in .NET applications for generating back-office 
                reports. However, designing reports was complex, requiring proficiency in Crystal Reports. Alternatives often relied on Microsoft 
                Office/Interop, necessitating Office installation on target servers.
            </p>

            <p>
                <a href="https://github.com/ClosedXML/ClosedXML.Report" target="_blank">
                    <ContentHighlight>ClosedXML.Report</ContentHighlight>
                </a> is a modern, open-source .NET library built on top of <a href="https://github.com/ClosedXML/ClosedXML" target="_blank">
                    <ContentHighlight>ClosedXML</ContentHighlight></a>. 
                It enables developers to create, read, and manipulate Excel documents in the XML-based Office Open XML format. The library simplifies 
                working with Excel files programmatically, allowing report generation, data visualizations, and other Excel-based solutions without 
                requiring Microsoft Excel installation on the target system. This makes it ideal for automating Excel-related tasks and integrating 
                Excel functionality into custom applications.
            </p>

            <p>
                In this article, we'll explore how to generate Excel reports using ClosedXML.Report in .NET.
            </p>
        </What>

        <Why>
            <p>
                Closed XML is an open-source project and has a large community of developers and users. Its repository
                is maintained on GitHub and is actively updated by the development team.
            </p>

            <p>
                We can consider using Closed XML Report for the following options and benefits,
            </p>

            <ol>
                <li>It is open source and it is built on top of <ContentHighlight>ClosedXML</ContentHighlight>
                </li>
                <li>No need to install Microsoft Excel or Interop in target server</li>
                <li>Integrate Excel into custom applications</li>
                <li>Save development time</li>
                <li>Improve data processing performance</li>
                <li>It is compatible with latest .NET</li>
                <li>Get all the benefits of excel</li>
            </ol>
        </Why>

        <How>
            <h4>Generating Simple Excel Report</h4>

            <p>
                Sometimes, we have a list of records that needs to be directly exported to Excel. With
                <ContentHighlight>ClosedXML.Report</ContentHighlight>, this is a simple and easy process,
                which can be accomplished in four steps.
            </p>

            <ol>
                <li>Install <ContentHighlight>ClosedXML.Report</ContentHighlight> Nuget Package</li>
                <li>
                    <p>Convert <ContentHighlight>List / IEnumerable</ContentHighlight> data to <ContentHighlight>
                            DataTable</ContentHighlight>
                    </p>
                    <GithubGistSnippet Title="Convert IEnumerable to DataTable" UserId="fingers10"
                        FileName="f15f20d0b2028f3bac259cb8955a193b"></GithubGistSnippet>
                </li>
                <li>
                    <p>Add <ContentHighlight>DataTable</ContentHighlight> to Excel <ContentHighlight>WorkSheet
                        </ContentHighlight>
                    </p>
                    <GithubGistSnippet Title="Add DataTable to Excel WorkSheet using Closed XML" UserId="fingers10"
                        FileName="59b7990842d5adb9905bcf81a8d6111b"></GithubGistSnippet>
                </li>
                <li>
                    <p>Save it to excel file or <ContentHighlight>MemoryStream</ContentHighlight> and get
                        <ContentHighlight>bytes[]</ContentHighlight> from workbook and send to browser for download</p>
                    <GithubGistSnippet Title="Save Closed XML WorkSheet to File" UserId="fingers10"
                        FileName="2ff4f82695fc43afbe1fc2724c694a5f"></GithubGistSnippet>
                </li>
            </ol>

            <GithubGistSnippet Title="Generating Simple Excel Report" UserId="fingers10"
                FileName="66a9c69639354f6ee47859cb8ecdef5f"></GithubGistSnippet>

            <DemoSnippet Title="Generate Simple Excel Report Using Closed XML">
                <p>
                    I attempted to export a table of contents from I Love .NET, and the output is as follows.
                </p>

                <ErrorBoundary>
                    <ChildContent>
                        <SimpleClosedXMLDemo></SimpleClosedXMLDemo>
                    </ChildContent>
                    <ErrorContent>
                        <div class="[ bg-red-500 ]">
                            <p class="[ text-white ]">An error occured while downloading the excel. Please try again
                                later.</p>
                        </div>
                    </ErrorContent>
                </ErrorBoundary>

                <figure>
                    <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Simple Report Using Closed XML.png"
                        alt="Simple Report Using Closed XML" class="[ w-full ]" />
                </figure>
            </DemoSnippet>

            <h4>Generating Complex Excel Report</h4>

            <p>
                In an enterprise, it is common to have complex data sets that need to be generated as Excel files. The
                data may include nested lists of data, such as one-to-many relationships, and
                this can be displayed in Excel as nested tables. This is also possible using <ContentHighlight>
                    ClosedXML.Report</ContentHighlight>, and can be achieved in five steps.
            </p>

            <ol>
                <li>Install <ContentHighlight>ClosedXML.Report</ContentHighlight> Nuget Package</li>
                <li>
                    <p>
                        Design a report Template. This step involves more work. We need to design a excel template to be
                        used and add it in our project directory and enable copy to output on build.
                        This template used in next step. We need to follow simple rules when designing the template.
                    </p>

                    <figure>
                        <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Copy to Output.png"
                            alt="Copy to Output" class="[ w-1/2 ]" />
                    </figure>

                    <ol>
                        <li>
                            <p>
                                The first column <ContentHighlight>A</ContentHighlight> needs to be left empty in Excel
                                as it is used by ClosedXML for internal processing.
                            </p>

                            <figure>
                                <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Empty Column A.png"
                                    alt="Empty Column A" class="[ w-1/4 ]" />
                            </figure>
                        </li>
                        <li>
                            <p>
                                We need to use <ContentHighlight>{{PropertyName}}</ContentHighlight> placeholder to let
                                Closed XML know what data needs to be replaced in the excel cells.
                            </p>

                            <figure>
                                <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Placeholder.png"
                                    alt="Placeholder" class="[ w-full ]" />
                            </figure>

                            <p>
                                The placeholder can contain any valid <ContentHighlight>C#</ContentHighlight> expression
                                like <ContentHighlight>{{GeneratedOn.ToString("dd-MM-yyyy")}}</ContentHighlight>.
                                You can either format the data in code itself or use excel to do formatting or apply any
                                styles in excel to cell while designing template. You can also place images. This
                                can be useful when we generate Confidential report and add confidential classification
                                image to report directly in excel.
                            </p>
                        </li>
                        <li>
                            <p>
                                While building a document, <ContentHighlight>ClosedXML.Report</ContentHighlight> finds
                                all named ranges and determines data sources by their name.
                                <ContentHighlight>Range</ContentHighlight> name should coincide with the name of the
                                variable serving a data source for this range. For nested tables, the range
                                name is built using an <ContentHighlight>underscore (_)</ContentHighlight>. E.g., to
                                output values from <ContentHighlight CssClasses="[ break-all ]">
                                    Data[].AuthorChannels[].ArticleDetails[]</ContentHighlight>
                                the range name must be <ContentHighlight CssClasses="[ break-all ]">
                                    Data_AuthorChannels_ArticleDetails</ContentHighlight>.
                            </p>

                            <p>
                                Also we need to make sure that each data range must have minimum of one column and two
                                rows (one row for data and an empty row for CLosedXML to do processing). That said,
                                let's see some ranges in action.
                            </p>

                            <figure>
                                <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Article Details Named Range.png"
                                    alt="Article Details Named Range" class="[ w-full ]" />
                            </figure>

                            <figure>
                                <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Author Channels Named Range.png"
                                    alt="Author Channels Named Range.png" class="[ w-full ]" />
                            </figure>

                            <figure>
                                <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Data Named Range.png"
                                    alt="Data Named Range" class="[ w-full ]" />
                            </figure>
                        </li>
                    </ol>
                </li>
                <li>
                    <p>Load the template and add data variable to template</p>
                    <GithubGistSnippet Title="Load the Excel Template and Data Variable to Template" UserId="fingers10"
                        FileName="6aff559ac5ac23ac0efa48575ef54019"></GithubGistSnippet>
                </li>
                <li>
                    <p>Generate the report using template</p>
                    <GithubGistSnippet Title="Generate Excel using ClosedXML Report Template" UserId="fingers10"
                        FileName="4f901c355ed7927b2f9420c50186fc1f"></GithubGistSnippet>
                </li>
                <li>
                    <p>Save it to excel file or <ContentHighlight>MemoryStream</ContentHighlight> and get
                        <ContentHighlight>bytes[]</ContentHighlight> from workbook and send to browser for download</p>
                    <GithubGistSnippet Title="Save Closed XML Template to File" UserId="fingers10"
                        FileName="0a1da192498f9ee64763b97e69042365"></GithubGistSnippet>
                </li>
            </ol>

            <GithubGistSnippet Title="Generate Complex Report Using Closed XML" UserId="fingers10"
                FileName="fc5150c586bdbad1bec23341ef12bb54"></GithubGistSnippet>

            <DemoSnippet Title="Generating Complex Excel Report">
                <p>
                    I attempted to export complex real-world data from I Love .NET, and the output is as follows. You
                    can alos notice how Generated Date get formatted as expected.
                </p>

                <ErrorBoundary>
                    <ChildContent>
                        <ComplexClosedXMLDemo></ComplexClosedXMLDemo>
                    </ChildContent>
                    <ErrorContent>
                        <div class="[ bg-red-500 ]">
                            <p class="[ text-white ]">An error occured while downloading the excel. Please try again
                                later.</p>
                        </div>
                    </ErrorContent>
                </ErrorBoundary>

                <p>Template:</p>

                <figure>
                    <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Content Report Template.png"
                        alt="Content Report Template" class="[ w-full ]" />
                </figure>

                <p>Report:</p>

                <figure>
                    <img src="./image/blogs/report/generate-excel-report-using-closed-xml-in-dotnet/Complex Report Using Closed XML.png"
                        alt="Complex Report Using Closed XML" class="[ w-full ]" />
                </figure>
            </DemoSnippet>

            <h4>More Information</h4>

            <p>
                Additional information can be found in the official documentation, accessible via the <NavLink
                    class="underline" href="https://closedxml.github.io/ClosedXML.Report/docs/en/" target="_blank">
                    official documentation</NavLink>.
                They support various types of reports and provide sample templates on their website.
            </p>
        </How>

        <Summary>
            <p>
                In this article we learn't how to generate simple and complex excel report using <ContentHighlight>
                    ClosedXML.Report</ContentHighlight>. Closed XML is a .NET library that enables
                developers to create, read, and manipulate Microsoft Excel files without using Microsoft Excel. It
                provides an API that simplifies the process of working with Excel files, making
                it easier to automate tasks, integrate Excel into custom applications, and improve data processing
                performance. Closed XML is an open-source project with an active community of
                developers and users, and is regularly updated. By using Closed XML, developers can efficiently and
                effectively generate Excel reports and other solutions, without having to depend
                on Microsoft Excel being installed on the target system.
            </p>
        </Summary>
    </ContentBody>
</Content>