@page "/blogs/generate-pdf-report-using-quest-pdf-in-dotnet"
@using ReportDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         Type="Report"
         FileName=@nameof(GenerateQuestPDFPdf)>
    <ContentBody>
        <p>
            In this article, let's learn about how to do <ContentHighlight>Generate PDF Report</ContentHighlight> using <ContentHighlight>QuestPDF</ContentHighlight> in .NET.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#what-is-quest-pdf")" Match="NavLinkMatch.All">
                    What is Quest PDF ?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#why-quest-pdf")" Match="NavLinkMatch.All">
                    Why Quest PDF ?
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#pdf-report")" Match="NavLinkMatch.All">
                    Generating PDF Report
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#more-information")" Match="NavLinkMatch.All">
                    More Information
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            Reports are needed in an enterprise to provide insights into key performance indicators, track progress towards goals, do some analysis, and make informed decisions. The most 
            common report formats availabe are in PDF, Word, Power Point, Excel, etc. <abbr title="Portable Document Format">PDF</abbr> reports are widely used because they offer a 
            combination of portability, security, consistency, and customization that make them ideal for a variety of business and personal applications.
        </p>

        <p>
            @(DateTime.Now.Year - 2016) years ago, we used to generate reports using <ContentHighlight>Crystal Reports</ContentHighlight> in .NET for back-office monitoring in applications. Designing reports was 
            tedious and sometimes complex, as it required an understanding of and proficiency in Crystal Reports. While there were other tools available for generating reports, they required 
            Microsoft Office/Interop to be installed on the target servers.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="what-is-quest-pdf" class="[ font-semibold text-lg ]">What is Quest PDF ?</h3>

        <p>
            <NavLink class="[ underline ]" href="https://github.com/QuestPDF/QuestPDF" target="_blank"><ContentHighlight>QuestPDF</ContentHighlight></NavLink> QuestPDF is a modern 
            open-source .NET library for PDF generation. Offering comprehensive layout engine powered by concise and discoverable C# Fluent API.
        </p>

        <p>With Quest PDF, you</p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li>👨‍💻 Design documents using C# and employ a code-only approach. Utilize your version control system to its fullest potential.</li>
            <li>🧱 Compose document content with a range of powerful and predictable structural elements, such as text, image, border, background, table, and more.</li>
            <li>⚙️ Utilize a comprehensive layout engine, specifically designed for document generation and paging support.</li>
            <li>📖 Write code using concise and easy-to-understand C# Fluent API. Utilize IntelliSense to quickly discover available options.</li>
            <li>🔗 Don't be limited to any proprietary scripting language or format. Follow your experience and leverage all of the features that C# has to offer.</li>
            <li>⌛ Save time thanks to a hot-reload capability, allowing real-time document preview without code recompilation.</li>
        </ul>

        <p>I personally liked the instant preview along with rapid prototyping available in this library.</p>

        <figure>
            <img src="https://raw.githubusercontent.com/QuestPDF/QuestPDF-Documentation/main/docs/public/previewer/animation.gif" alt="Quest PDF Previewer" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="why-quest-pdf" class="[ font-semibold text-lg ]">Why Quest PDF ?</h3>

        <p>
            Quest PDF is an open-source project and has a large community of developers and users. Its repository is maintained on GitHub and is actively updated by the development team.
        </p>

        <p>
            As with any open-source software, it is important to thoroughly evaluate the source code and the project's reputation before using it in production. You can assess the 
            trustworthiness of Quest PDF by looking at its code quality, the number of contributors, and the frequency of updates.
        </p>

        <p>
            Overall, Quest PDF has a positive reputation and is widely used by many developers. It is an active project with regular updates, and the development team is responsive to issues 
            and feature requests. You can review its GitHub repository and the community feedback to determine its trustworthiness.
        </p>

        <p>
            We can consider using Quest PDF for the following options and benefits,
        </p>

        <dl>
            <dt><ContentHighlight>Comprehensive layout engine</ContentHighlight></dt>
            <dd>
                - Utilize a layout engine specifically designed for document generation, with full paging support. It gives you high control over the content, optimizes the document's 
                visual structure, and makes your code more flexible.
            </dd>
            <dt><ContentHighlight>Multiplatform</ContentHighlight></dt>
            <dd>
                - We can use our preffered code editor (Visual Studio, VS Code, JetBrains Rider, etc.). Run our software on any operating system (Windows, Linux, macOS), cloud platforms 
                (e.g. Azure, AWS), device types (desktop, tablets, phones) and even web browser (via WebAssembly).
            </dd>
            <dt><ContentHighlight>Discoverable Fluent API</ContentHighlight></dt>
            <dd>
                - The library uses the FluentAPI code style that makes our code more concise and easier to understand. The IntelliSense mechanism available in all major IDEs helps you 
                writing the code efficiently and discover new features.
            </dd>
            <dt><ContentHighlight>Reusable code</ContentHighlight></dt>
            <dd>
                - Apply established programming patterns and practices to make your code more manageable. For instance, divide your layout implementation into distinct and/or reusable 
                structures using classes and methods, exactly how you do it with other features and functionalities.
            </dd>
            <dt><ContentHighlight>Efficient maintenance</ContentHighlight></dt>
            <dd>
                - Follow the code-only approach to have better understanding of changes and implementation history. Use your preferred version control system to easily manage fixes, 
                adjustments and improvements. Never get lost in proprietary binary formats or complex HTML implementations.
            </dd>
            <dt><ContentHighlight>Quick prototyping</ContentHighlight></dt>
            <dd>
                - Design and adjust visual content using the QuestPDF Previewer tool. It utilizes a hot-reload capability to preview your document without code re-compilation. Use the 
                inspector tool to better understand the layout and its structure.
            </dd>
            <dt><ContentHighlight>High performance</ContentHighlight></dt>
            <dd>
                - This is high performant and consumesn low resource usage. Generate even 1000 PDF files per minute per core, with a thread-safe process.
            </dd>
            <dt><ContentHighlight>Advanced languages support</ContentHighlight></dt>
            <dd>
                - Easily create multilingual documents with advanced text style support, including right-to-left (RTL) languages as well as languages requiring text shaping to display 
                glyphs correctly (e.g. Arabic).
            </dd>
        </dl>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="pdf-report" class="[ font-semibold text-lg ]">Generating PDF Report</h3>

        <p>
            Let's learn on how to generate beautiful PDF documents easily using QuestPDF.
        </p>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>Install <ContentHighlight>QuestPDF</ContentHighlight> Nuget Package</li>
            <li>
                <p>
                    If you are using <ContentHighlight>QuestPDF</ContentHighlight> in <ContentHighlight>Blazor WASM</ContentHighlight> Apps, you need to add the 
                    following additional Nuget Packages to your <ContentHighlight>startup project's .csproj</ContentHighlight> file. This is 
                    <ContentHighlight>required</ContentHighlight> to load the <ContentHighlight>font files</ContentHighlight> in Blazor WASM Apps

                    <ul class="[ list-disc ] [ ml-4 ]">
                        <li><ContentHighlight>SkiaSharp.HarfBuzz</ContentHighlight></li>
                        <li><ContentHighlight>HarfBuzzSharp.NativeAssets.WebAssembly</ContentHighlight></li>
                        <li><ContentHighlight>SkiaSharp.NativeAssets.WebAssembly</ContentHighlight></li>
                        <li><ContentHighlight>SkiaSharp.Views.Blazor</ContentHighlight></li>
                    </ul>
                </p>

                <p>
                    A <ContentHighlight>NativeFileReference</ContentHighlight> as shown below also needs to be added under 
                    <ContentHighlight>ItemGroup</ContentHighlight> in <ContentHighlight>startup project's .csproj</ContentHighlight> file. 
                    This is <ContentHighlight>required</ContentHighlight> to load the <ContentHighlight>font files</ContentHighlight> in Blazor WASM Apps.
                </p>

                <p><ContentHighlight>&lt;NativeFileReference Include="$(HarfBuzzSharpStaticLibraryPath)/3.1.34/st/*.a" /&gt;</ContentHighlight></p>
            </li>
            <li>Add appropriate <ContentHighlight>License Configuration</ContentHighlight> <ContentHighlight CssClasses="[ break-all ]">QuestPDF.Settings.License = LicenseType.Community;</ContentHighlight> to <ContentHighlight>Program.cs</ContentHighlight></li>
            <li>Keep you Document Model <ContentHighlight>POCO class</ContentHighlight> ready</li>
            <li>Connect to <ContentHighlight>Document data source</ContentHighlight> and load data into your <ContentHighlight>Document Model (POCO Classes)</ContentHighlight></li>
            <li>Prepare <ContentHighlight>Template</ContentHighlight> using <ContentHighlight>Document Engine</ContentHighlight> and Fluent API and fill it with data</li>
            <li>Generate and <ContentHighlight>save/stream</ContentHighlight> it back to user</li>
        </ol>

        <GithubGistSnippet Title="Generating PDF Report" UserId="fingers10" FileName="52316c0dedc09b32f4b9e7b2717226a5"></GithubGistSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <DemoSnippet Title="Generate PDF Receipt Using Quest PDF">
            <p>
                I attempted to generate PDF Receipt using Quest PDF.
            </p>

            <QuestPDFDemo></QuestPDFDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="more-information" class="[ font-semibold text-lg ]">More Information</h3>

        <p>
            Additional information can be found in the official documentation, accessible via the <NavLink class="underline" href="https://www.questpdf.com/getting-started.html" target="_blank">official documentation</NavLink>. 
            They support various types of layouts and provide samples on their website.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article we learn't how to generate simple pdf report using <ContentHighlight>QuestPDF</ContentHighlight>. QuestPDF is a modern .NET library that enables 
            developers to design and create PDF files. It provides an Fluent API that simplifies the process of creating PDF files, making it easier to develop and maintain, 
            Quest PDF is an open-source project with an active community of developers and users, and is regularly updated. By using Quest PDF, developers can efficiently and 
            effectively generate PDF reports and other solutions.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Generate PDF Report using Quest PDF in .NET";
    private string Description = "In this post I will teach you how to generate pdf report using Quest PDF in .NET. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2023, 2, 19, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2024, 3, 3, 22, 30, 0);
    private string Slug = "generate-pdf-report-using-quest-pdf-in-dotnet";
    private string PosterPath = "Blogs/Report";
    private string Channel = "report";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("report", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(3) { "Quest PDF", "PDF Report", "PDF" };
}