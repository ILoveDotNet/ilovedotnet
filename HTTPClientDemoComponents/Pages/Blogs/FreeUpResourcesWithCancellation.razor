@page "/blogs/free-up-resources-with-cancellation-while-accessing-apis-using-http-client-in-dotnet"
@using HTTPClientDemoComponents
@inherits FragmentNavigationBase
@inject TableOfContents tableOfContents

<Content Title=@Title
         Description=@Description
         CreatedOn=@CreatedOn
         ModifiedOn=@ModifiedOn
         Slug=@Slug
         PosterPath=@PosterPath
         Keywords=@Keywords
         Channel="@Channel"
         ContentType="@ContentType"
         TotalContents=@TotalContents
         FileName=@nameof(FreeUpResourcesWithCancellation)>
    <ContentBody>
        <p>
            In this article, let's learn about how to <ContentHighlight>free up resources with cancellation</ContentHighlight> while accessing APIs  
            using <ContentHighlight>HTTP Client</ContentHighlight> in .NET.
        </p>

        <p>
            <strong>Note:</strong> If you have not done so already, I recommend you read the article on
            <NavLink class="[ underline ]" href="blogs/improving-performance-and-memory-use-while-accessing-apis-using-http-client-in-dotnet" Match="NavLinkMatch.All">Improving performance and memory use while accessing APIs using HTTPClient in dotnet</NavLink>.
        </p>

        <h3 class="[ font-semibold text-lg ]">Table of Contents</h3>

        <ol class="[ list-decimal ] [ ml-4 ]">
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#introduction")" Match="NavLinkMatch.All">
                    Introduction
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#advantages-of-cancellation")" Match="NavLinkMatch.All">
                    Advantages of Cancellation
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#cancellation-token-source-and-cancellation")" Match="NavLinkMatch.All">
                    Cancellation Token Source and Cancellation
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#supporting-cancellation-while-reading-data-from-api")" Match="NavLinkMatch.All">
                    Supporting Cancellation while reading data from API
                </NavLink>
            </li>
            <li>
                <NavLink class="[ underline ]" href="@($"blogs/{Slug}#summary")" Match="NavLinkMatch.All">
                    Summary
                </NavLink>
            </li>
        </ol>

        <h3 id="introduction" class="[ font-semibold text-lg ]">Introduction</h3>

        <p>
            <ContentHighlight>Cancelling</ContentHighlight> requests can be beneficial to <ContentHighlight>performance</ContentHighlight>, both at level of 
            <ContentHighlight>bandwidth consumption</ContentHighlight> and <ContentHighlight>scalability</ContentHighlight>.  Let's learn how and I'll guide 
            you through this. We will start by learning why we should cancel requests when we no longer need them. 
        </p>

        <p>
            Imagine we're using HttpClient to get a data. Chances are that the <ContentHighlight>user of your application will navigate away</ContentHighlight> 
            or <ContentHighlight>press a cancel button</ContentHighlight>. In such a case, you want to be able to handle that instead of just letting the 
            request continue. The reasoning behind this is that behind the scenes, <ContentHighlight>HttpClient</ContentHighlight> works with 
            <ContentHighlight>async tasks</ContentHighlight>. There's another reason, though. It's not unheard of for a <ContentHighlight>timeout</ContentHighlight> 
            to happen. If that happens, we want to be notified of that so we can gracefully handle such a timeout. In such a case, it is due to the timeout 
            that the task gets canceled.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="advantages-of-cancellation" class="[ font-semibold text-lg ]">Advantages of Cancellation</h3>

        <p>
             It's important to know that cancelling a task that's no longer needed will <ContentHighlight>free up the thread</ContentHighlight> that is used to 
             run the task. That means that <ContentHighlight>thread is potentially returned to the thread pool where it can be used for other work</ContentHighlight>.
        </p>

        <ul class="[ list-disc ] [ ml-4 ]">
            <li><ContentHighlight>Save threads</ContentHighlight> which can be used to handle other tasks / requests.</li>
            <li><ContentHighlight>Save db calls</ContentHighlight> which can save compute cost.</li>
            <li><ContentHighlight>Save data</ContentHighlight> transferred over network.</li>
        </ul>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="cancellation-token-source-and-cancellation" class="[ font-semibold text-lg ]">Cancellation Token Source and Cancellation</h3>

        <p>
            To support <ContentHighlight>cancelation</ContentHighlight> of <ContentHighlight>async tasks</ContentHighlight>, a 
            <ContentHighlight>CancellationTokenSource</ContentHighlight> and a <ContentHighlight>CancellationToken</ContentHighlight> are used. A 
            <ContentHighlight>CancellationTokenSource</ContentHighlight> is an <ContentHighlight>object</ContentHighlight>, which manages and sends cancellation 
            notifications to the individual cancellation tokens. It exposes such a <ContentHighlight>CancellationToken</ContentHighlight> via its token property. 
            That <ContentHighlight>CancellationToken</ContentHighlight> is a lightweight value passed to one or more listeners, typically as a method parameter. 
        </p>

        <p>
            Listeners should then monitor the value of the <ContentHighlight>IsCancellationRequested</ContentHighlight> property of that token and react accordingly. 
            From that, it follows that a <ContentHighlight>CancellationToken</ContentHighlight> is what we need to pass to each task returning method we want to 
            listen to cancellation. So, the idea is that we provide these cancellation tokens to whichever part of our application we want to listen to cancellation 
            and cancel itself. And we use the <ContentHighlight>CancellationToken</ContentHighlight> source to effectively request them to cancel themselves, which it 
            does by sending notifications to those tokens.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="supporting-cancellation-while-reading-data-from-api" class="[ font-semibold text-lg ]">Supporting Cancellation while reading data from API</h3>

        <p>
            All we need to do now is to initialize a <ContentHighlight>CancellationTokenSource</ContentHighlight> and set <ContentHighlight>CancelAfter()</ContentHighlight> 
            a timeout. Then, we pass the token to the <ContentHighlight>HTTPClient</ContentHighlight> <ContentHighlight>SendAsync</ContentHighlight> method. 
            We can then use the token to cancel the request if it takes too long. We can also use the token to cancel the request if the user navigates away. 
        </p>

        <p>
            <strong>Note:</strong> that for demo purpose we are cancelling after 10 seconds and we are awaiting for 5 seconds to simulate the API call failure. In real world 
            scenario, you can set the timeout to 30 seconds or 1 minute or you can cancel when user presses cancel button.
        </p>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <GithubGistSnippet Title="Support Cancellation while Reading Data" UserId="fingers10" FileName="88f09bb2b546363ede9d901183d8d533"></GithubGistSnippet>

        <DemoSnippet Title="Support Cancellation while Reading Data">
            <p>
                Let's try Cancellation while reading data in this Demo, Click on the Read with Cancellation Button to see the demo on the screen. Note that 
                data might not be rendered on the screen as the API is cancelled before the data is read. You can verify this from the browser console log.
            </p>
            <ReadWithCancellationDemo></ReadWithCancellationDemo>
        </DemoSnippet>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <figure>
            <caption>Supporting Cancellation in API Calls</caption>
            <img src="./image/blogs/http-client/free-up-resources-with-cancellation-while-accessing-apis-using-http-client-in-dotnet/Cancelled Requests.png" alt="Cancelled Requests" class="[ w-full ]" />
        </figure>

        <GoogleAdSense Type="GoogleAdSenseAdType.InArticle" Format="GoogleAdSenseAdFormat.Fluid" Style="text-align:center;" Slot="3914293965"></GoogleAdSense>

        <h3 id="summary" class="[ font-semibold text-lg ]">Summary</h3>

        <p>
            In this article, we learned about how to <ContentHighlight>free up resources with cancellation</ContentHighlight> while accessing APIs using 
            <ContentHighlight>HTTP Client</ContentHighlight> in .NET. We learned about what is <ContentHighlight>CancellationTokenSource</ContentHighlight> 
            and <ContentHighlight>why we should cancel requests</ContentHighlight> when we no longer need them and <ContentHighlight>advantages of 
            cancellation</ContentHighlight>. We also learned about <ContentHighlight>how to support cancellation while reading data from API</ContentHighlight>. 
            I hope you enjoyed reading this article.
        </p>
    </ContentBody>
</Content>

@code {
    private string Title = "Free up resources with cancellation while accessing APIs using HTTPClient in dotnet";
    private string Description = "In this post I will teach how to free up resources with cancellation while accessing APIs using HTTP Client. All with live working demo.";
    private DateTime CreatedOn = new DateTime(2023, 8, 27, 22, 30, 0);
    private DateTime ModifiedOn = new DateTime(2023, 8, 27, 22, 30, 0);
    private string Slug = "free-up-resources-with-cancellation-while-accessing-apis-using-http-client-in-dotnet";
    private string PosterPath = "Blogs/HTTP-Client";
    private string Channel = "http-client";
    private string ContentType = "blogs";
    private ushort TotalContents => (ushort)tableOfContents.Contents.Count(content => content.Type.Equals("HTTP-Client", StringComparison.CurrentCultureIgnoreCase));
    private List<string> Keywords = new(3) { "CancellationTokenSource", "CancellationToken", "Cancellation" };
}