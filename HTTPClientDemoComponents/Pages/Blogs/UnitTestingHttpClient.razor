@page "/blogs/unit-testing-http-client-in-dotnet"
@inherits BasePage

<Content FileName=@nameof(UnitTestingHttpClient) UseNewTableOfContentsMenu=true>
    <ContentBody>
        <What>
            <p>
                In this article, let's learn about how to <ContentHighlight>Unit Test HTTPClient</ContentHighlight> in .NET.
            </p>

            <p>
                <strong>Note:</strong> If you have not done so already, I recommend you read the article on
                <NavLink href="blogs/extending-http-client-with-custom-http-message-handlers-in-dotnet" Match="NavLinkMatch.All">Extending HTTPClient with Custom Http Message Handlers in dotnet</NavLink>.
            </p>

            <p>
                There are multiple ways to Unit Test HTTP Client in dotnet. Most of the examples you will find on the internet will be using 
                <ContentHighlight>Moq</ContentHighlight> or <ContentHighlight>NSubstitute</ContentHighlight>. But I prefer to write 
                <ContentHighlight>Custom Http Message Handlers</ContentHighlight> to Unit Test HTTP Client in dotnet.
            </p>
        </What>

        <Why>
            <p>
                You're working on a part of your application that relies on <ContentHighlight>HttpClient</ContentHighlight> to make API calls. Testing this can 
                become cumbersome, as you don't want to actually call the API. Because <ContentHighlight>it's not an integration test</ContentHighlight>. Moreover, 
                constantly calling a service that's cloud hosted can cost you quite a bit of money. You just want to test one specific piece of functionality that 
                happens to rely on data being returned from an HTTP call.
            </p>

            <p>
                Integrating with a web API is a common task required by many applications. <ContentHighlight>Http Client</ContentHighlight> is a class that 
                simplifies the consumption of web APIs. It provides a <ContentHighlight>base class</ContentHighlight> for <ContentHighlight>sending HTTP requests 
                and receiving HTTP responses</ContentHighlight> from a resource identified by a <ContentHighlight>URI</ContentHighlight>. The 
                <ContentHighlight>HttpClient class</ContentHighlight> is typically used to send and receive requests from a web service by using the 
                <ContentHighlight>HTTP protocol</ContentHighlight>. 
            </p>

            <p>
                Most of the time I see developers including me say we can test HTTP Client or calls in Integration Test but 
                <ContentHighlight>Unit testing</ContentHighlight> allows developers to <ContentHighlight>verify the behavior and logic of individual units of code 
                in isolation</ContentHighlight> quickly. By writing tests, you can ensure that your code functions correctly and remains reliable even after making 
                changes or adding new features. Unit tests are faster and help catch bugs early in the development process and provide confidence in the correctness 
                of the code.
            </p>

            <p>
                <strong>Note:</strong> If you have not done so already, I recommend you read the article on
                <NavLink href="blogs/implementing-tdd-in-csharp-dotnet" Match="NavLinkMatch.All">Implementing TDD in C# .Net</NavLink>.
            </p>
        </Why>

        <How>
            <p>
                <ContentHighlight>Take error handling</ContentHighlight>, for example. You want to ensure that when the API responds with a dreaded 
                <ContentHighlight>401 Unauthorized status code</ContentHighlight> that your application handles it gracefully. You don't want to actually call the 
                API, though. You just want to ensure that your application handles the response correctly. This is where <ContentHighlight>Custom Http Message 
                Handlers</ContentHighlight> come in handy. Well, we can write a custom handler to stop communication with the API and return the response required 
                for our test. For our use case, we don't want to communicate with the API, but we do want to get back a 401 Unauthorized response.
            </p>

            <p>
                The following code shown a simple implementation of a custom message handler that returns a 401 Unauthorized response. Notice that we are using 
                <ContentHighlight>HttpMessageHandler</ContentHighlight> instead of <ContentHighlight>DelegatingHandler</ContentHighlight>. This is because we don't 
                want to pass the request to the next handler in the pipeline. We want to return the response we want. So, we are using HttpMessageHandler to 
                <ContentHighlight>short circuit</ContentHighlight> it.
            </p>

            <CodeSnippet CssClass="language-csharp">
public class Return401UnauthorizedResponseHandler : HttpMessageHandler
{
    protected override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {
        var response = new HttpResponseMessage(System.Net.HttpStatusCode.Unauthorized);
        return Task.FromResult(response);
    }
}
            </CodeSnippet>

            <p>
                Now, we can use this custom message handler to unit test our HTTP client. The following code shows a simple implementation of a unit test for 
                HTTP client. All we need to do is to <ContentHighlight>pass our custom message handler to the HTTP client and make the HTTP call</ContentHighlight>. 
                The <ContentHighlight>HTTP call</ContentHighlight> will be <ContentHighlight>intercepted</ContentHighlight> by our custom message handler and will 
                return the response we want which is <ContentHighlight>401 Unauthorized Status Code</ContentHighlight> in our case. This will help you to assert your 
                code against the response you want.
            </p>

            <CodeSnippet CssClass="language-csharp">
[Fact]
public async Task GetData_On401Response_MustThrowUnauthorizedApiAccessException()
{
    var httpClient = new HttpClient(new Return401UnauthorizedResponseHandler())
    {
        BaseAddress = new Uri("http://ilovedotnet.org")
    };

    var apiAccessClass = new ApiAccess(httpClient);
    await Assert.ThrowsAsync&lt;UnauthorizedApiAccessException&gt;(() => apiAccessClass.GetDataAsync(CancellationToken.None));
}
            </CodeSnippet>

            <p>
                Here is another similar example for <ContentHighlight>200 Success Status Code</ContentHighlight>:
            </p>

            <CodeSnippet CssClass="language-csharp">
public class Return200OkResponseHandler : HttpMessageHandler
{
    protected override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {
        var response = new HttpResponseMessage(System.Net.HttpStatusCode.OK)
        {
            Content = new StringContent(JsonSerializer.Serialize(new { Name = "I Love .NET" }))
        };
        return Task.FromResult(response);
    }
}
            </CodeSnippet>

            <p>And here comes the corresponding unit test.</p>

            <CodeSnippet CssClass="language-csharp">
[Fact]
public async Task GetData_On200Response_MustReturnExpectedData()
{
    var httpClient = new HttpClient(new Return200OkResponseHandler())
    {
        BaseAddress = new Uri("http://ilovedotnet.org")
    };

    var apiAccessClass = new ApiAccess(httpClient);
    var result = await apiAccessClass.Get();

    Assert.Equal(200, result.StatusCode);
    Assert.Equal("I Love .NET", result.Name);
}
            </CodeSnippet>

            <p>
                The only drawback of this approach is that you need to write a custom message handler for each status code you want to test. I feel like we will also 
                need to maintain these custom message handlers. But this is the best approach I found to unit test HTTP client in dotnet when there is no option available 
                to mock the HTTP client.
            </p>
        </How>

        <Summary>
            <p>
                In this article, we learned about how to <ContentHighlight>Unit Test HTTP Client</ContentHighlight> in dotnet. We also learned about why we should 
                write unit tests and what is an HTTP client. We also learned about how to write custom HTTP message handlers to unit test HTTP client in dotnet. 
                I hope you enjoyed reading this article. With this, I'm concluding this HTTP Client series. Please share this with your network and help other dotnet 
                devs.
            </p>
        </Summary>
    </ContentBody>
</Content>