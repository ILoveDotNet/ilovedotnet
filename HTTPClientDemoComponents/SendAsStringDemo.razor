<table class="[ table-fixed border-collapse ] [ bg-white ] [ border-2 ] [ dark:bg-black dark:border-slate-500 ] [ mt-2 ] [ w-full ]">
    <thead>
        <tr class="[ bg-gray-100 ] [ dark:bg-slate-500 ]">
            <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">Title</th>
            <th class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">Author</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var post in _posts)
        {
            <tr>
                <td class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">@post.Title</td>
                <td class="[ border-2 ] [ dark:border-slate-600 ] [ p-2 ]">@post.Author</td>
            </tr>
        }
    </tbody>
</table>    

<button type="button"
    class="[ bg-cyan-500 ] [ text-white ] [ px-4 py-2 ] [ inline-block ] [ rounded-md ] [ inline-flex ] [ space-x-1 ]"
    @onclick="HandleSendAsString">
    Send As String
</button>

<button type="button"
    class="[ bg-fuchsia-500 ] [ text-white ] [ px-4 py-2 ] [ inline-block ] [ rounded-md ] [ inline-flex ] [ space-x-1 ]"
    @onclick="Reset">
    Reset
</button>

@code
{
    private IEnumerable<Post> _posts = Enumerable.Empty<Post>();

    [Inject] private HttpClient _httpClient { get; set; }

    private async Task HandleSendAsString()
    {
        var response = await _httpClient.PostAsync("api/posts", new StringContent("Hello World"));
    }

    private void Reset()
    {
        _posts = Enumerable.Empty<Post>();
    }
}