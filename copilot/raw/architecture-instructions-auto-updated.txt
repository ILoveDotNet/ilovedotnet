# Architecture Documentation and Maintenance Instructions for ILoveDotNet

This document provides clear instructions for documenting and maintaining the architecture of the ILoveDotNet application.

## 1. Building Architecture Diagrams from Code

### Step 1: Analyze the Application Architecture
```
Describe the main components and general architecture of this dotnet application.
```

When executing this step:
- Examine the entire ILoveDotNet.sln structure including all projects
- Focus on both Web (Blazor WASM) and MAUI projects as the main entry points
- Analyze how component libraries are organized and referenced
- Identify key services and their dependencies
- Understand the lazy loading mechanism for Blazor components
- Document how the application handles cross-platform deployment

### Step 2: Visualize Architecture with Mermaid Diagrams
```
Now show me the same structure visually using Mermaid syntax.
```

Create at least these three diagrams:
1. Project structure diagram - showing how projects relate to each other
2. Component interaction diagram - showing the runtime flow including lazy loading
3. Deployment architecture diagram - showing how the app is built and deployed

Make sure all diagrams:
- Use valid Mermaid syntax
- Include appropriate styling for components
- Show clear relationships between components
- Are properly organized with clear node labels

### Step 3: Create Architecture Documentation File
```
Create a new file to document the application's architecture visually using Mermaid syntax.
```

When creating this file:
- Save it as `/Users/abdulrahmanshabeekmohamed/Projects/Personal/ilovedotnet/docs/Architecture.md`
- Include all Mermaid diagrams from step 2
- Add explanatory text between diagrams
- Include sections for Key Architectural Characteristics, Component Types, and Technical Implementation

### Step 4: Update Architecture Documentation Based on Recent Changes
```
Look at the last Git commit I did to see what changed structurally in the codebase. Update my Mermaid architecture diagram accordingly.
```

When updating diagrams:
- Use git commands to identify recent structural changes
- Check for new projects, removed projects, or changes to project relationships
- Update all affected diagrams to accurately reflect the current state
- Preserve diagram styling and formatting

## 2. Maintaining Release Documentation

### Step 1: Summarize Git History Since a Specific Version
```
Find all Git commits since tag {version_tag} for the current repo and provide a categorized summary.
```
Replace {version_tag} with an actual version like v2.0.0.

When generating the summary:
- Use git commands to list all commits since the specified tag
- Group commits by category (features, fixes, improvements, etc.)
- Provide a concise summary of each commit

### Step 2: Analyze Code Changes in Detail
```
Discover all of the code changes for all commits since {version_tag} and provide a categorized summary; don't just look at commit messages.
```

When analyzing code changes:
- Examine actual file changes, not just commit messages
- Look for structural changes, new features, bug fixes, and improvements
- Focus on changes that affect the architecture or user experience
- Categorize changes according to the release template structure

### Step 3: Generate Release Notes
```
Use all commits since {version_tag}, follow our release note template in /Users/abdulrahmanshabeekmohamed/Projects/Personal/ilovedotnet/copilot/RELEASE_TEMPLATE.md, and generate a draft release_notes.md.
```

When generating release notes:
- Use the exact format from RELEASE_TEMPLATE.md
- Fill in all sections with relevant information from the code analysis
- Set proper version number and date
- Write a concise overview that summarizes the release
- Categorize changes appropriately into features, fixes, improvements, etc.

### Step 4: Commit Release Notes
```
Commit the release notes with a tag of {new_version_tag}.
```

When committing:
- Save the release notes to the proper location
- Use git commands to commit the file
- Create a new version tag as specified
- Push changes to the repository