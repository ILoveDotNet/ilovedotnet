Ctrl/Cmd+Shift+P and Github Copilot: Build Local Workspace Index

1. Understanding the project:

Please create a project cheat sheet for me that contains the following:
• Architecture Overview - What are the main directories and files?
• Key Components & Patterns - What DotNet patterns are being used?
• APis & Data Flow - How does the frontend communicate with the backend?
• Reusable Utilities & Helpers - Are there existing functions you should use instead of reinventing the wheel?

Do you see any components used over and over?

Create a folder in the root of the project called github and create a Markdown file in it called copilot-instructions.md containing all of the contents from our project cheat sheet...

2. Dependency Mapping and Tracing code paths:

a. Tracing:

#file:file-name Show me how the {{functionality name}} functionality works

@workspace /explain Show me how the {{functionality name}} functionality works. Just give me the high level details.

#file:file-name This UI calls out to an API somewhere to perform {{functionality name}}. Where?

#file:file-name js Generate a summary of the entire {{functionality name}} workflow in the UI. I'm most interested in the function names, their input, output and how they call each other to get to the API call.

Give me the workflow breakdown in a bulleted list with groups like:
- group
  - method
  - reason etc

Create a Markdown file called {{functionality name}}_map.md which contains an ASCIl diagram of the functions used and their relationships when {{functionality name}}. Use the above as context if needed.

b. Mapping:

Find the UI function that triggers the API endpoint that receives {{functionality name}} requests from the frontend and update the {{functionality name}} map's ASCII diagram to show the function and endpoint.

In the backend, what components are involved in accepting the API request and routing it to the database? I'm providing you with context of {{functionality name}} service. Use it to understand the code and update the {{function name}} journey #file:file-name

Look at the code yourself and double check.

Please look at each of the backend components in the code and discover the package dependencies for each. You can reference the #file:package.json or nuget package reference inside .csproj if you need to. When you discover them, update each box in the {{functionality name}} map diagram to include what packages each component needs to operate.

Generate a UML diagram showing the full dependency tree for the {{functionality name}}.
Include:
- Routes
- Controllers
- Services
- External npm/nuget packages
- Relationships between components
Use PlantUML syntax.

3. Troubleshooting with context:

Copilot, when on the {{file-name}} page and I add an item to a batch, how is that price calculated? #file:{{file-name}}

I see it's eventually calling the {{route}} API endpoint. Where is that in the routes? #codebase

---

Optional Example:

Copilot, we have an internal API testing tool for this codebase somewhere. What URL would I use to access it? The app's base URL is http://localhost:3000/app
#codebase

When a user {{does the functionality}} in the #file:{{file-name}} page and they have their {{context}}, {{the actual issue}} but {{the correct behavior}} it is. Please look over the codebase and see if you can find an area where this condition might be checked and a problem arise. #codebase

