@page "/blogs/unit-testing-anti-pattern-exposing-private-state"
@inherits BasePage

<Content FileName=@nameof(ExposingPrivateState) UseNewTableOfContentsMenu=true>
    <ContentBody>
        <What>
            <p>
                Exposing <ContentHighlight>private state</ContentHighlight> for <ContentHighlight>unit testing</ContentHighlight> is a common <ContentHighlight>anti-pattern</ContentHighlight>. <ContentHighlight>Private fields</ContentHighlight> and <ContentHighlight>methods</ContentHighlight> should
                remain encapsulated, and tests should verify the <ContentHighlight>observable behavior</ContentHighlight> of the system rather than its
                internal state.
            </p>
        </What>

        <Why>
            <p>
                Making <ContentHighlight>private fields</ContentHighlight> accessible solely for testing introduces <ContentHighlight>tight coupling</ContentHighlight> between tests and
                implementation details. This can lead to <ContentHighlight>brittle tests</ContentHighlight> that break due to minor code changes, even when
                functionality remains intact. A well-structured test suite should interact with the system in the same
                way as <ContentHighlight>production code</ContentHighlight> to ensure maintainability and reliability.
            </p>
        </Why>

        <How>
            <p>Instead of exposing <ContentHighlight>private state</ContentHighlight>, tests should validate behavior through <ContentHighlight>public methods</ContentHighlight>. Consider the
                following example of a <ContentHighlight>Member</ContentHighlight> class:
            </p>
            <pre>
public class Member
{
    private MembershipLevel _level = MembershipLevel.Standard;
    
    public void Upgrade()
    {
        _level = MembershipLevel.Premium;
    }
    
    public decimal GetDiscount()
    {
        return _level == MembershipLevel.Premium ? 0.1m : 0m;
    }
}

public enum MembershipLevel
{
    Standard,
    Premium
}
            </pre>

            <p>
                The <ContentHighlight>Upgrade()</ContentHighlight> method changes the <ContentHighlight>internal state</ContentHighlight>, affecting the <ContentHighlight>discount calculation</ContentHighlight>.
                Instead of exposing the <ContentHighlight>private field</ContentHighlight>, tests should validate the expected behavior:
            </p>

            <pre>
[Fact]
public void New_Member_Should_Have_No_Discount()
{
    var member = new Member();
    Assert.Equal(0m, member.GetDiscount());
}

[Fact]
public void Upgraded_Member_Should_Get_10_Percent_Discount()
{
    var member = new Member();
    member.Upgrade();
    Assert.Equal(0.1m, member.GetDiscount());
}
            </pre>

            <p>These tests confirm correct behavior without exposing <ContentHighlight>internal state</ContentHighlight>.</p>
        </How>

        <Summary>
            <p>
                Exposing <ContentHighlight>private state</ContentHighlight> for testing leads to unnecessary coupling and <ContentHighlight>fragile tests</ContentHighlight>. Instead, <ContentHighlight>unit tests</ContentHighlight>
                should focus on verifying <ContentHighlight>observable behavior</ContentHighlight>. By designing tests that align with <ContentHighlight>production interactions</ContentHighlight>, we ensure better maintainability and robustness of the system.
            </p>
        </Summary>
    </ContentBody>
</Content>